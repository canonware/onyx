#!/usr/bin/perl
#-*-mode:perl-*-
#############################################################################
#
# Copyright (C) 1998-2000 Jason Evans <jasone@canonware.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice(s), this list of conditions and the following disclaimer as
#    the first lines of this file unmodified other than the possible 
#    addition of one or more copyright notices.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice(s), this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
#############################################################################
#
# This script does all the necessary work to create a snapshot release of a 
# source tree that is under cvs control.  It also does string substitution 
# for certain tags, such as <Copyright = "Author">, <License>, and <Version>.
#
#############################################################################

use Cwd; # For pwd().
use File::Find; # For find().
use FileHandle; # For file manipulation.
use Getopt::Long;

# Add values to the %COPYRIGHT associative array as shown below to add 
# copyright holder tag keys.  This allows substition of tags that look like:
#
# <Copyright = jasone>
#
$COPYRIGHT{"jasone", 0}
= "Copyright (C) 1996-2000 Jason Evans <jasone\@canonware.com>.";
$COPYRIGHT{"jasone", 1}
= "All rights reserved.";
$COPYRIGHT{"toshok", 0}
= "Copyright (C) 1999 Chris Toshok <toshok\@hungry.com>.";
$COPYRIGHT{"toshok", 1}
= "All rights reserved.";

# XXX The contents of @LICENSE are substituted for tags that look like:
#
# <License>
#
@LICENSE = 
(
 '',
 'Redistribution and use in source and binary forms, with or without',
 'modification, are permitted provided that the following conditions',
 'are met:',
 '1. Redistributions of source code must retain the above copyright',
 '   notice(s), this list of conditions and the following disclaimer as',
 '   the first lines of this file unmodified other than the possible',
 '   addition of one or more copyright notices.',
 '2. Redistributions in binary form must reproduce the above copyright',
 '   notice(s), this list of conditions and the following disclaimer in',
 '   the documentation and/or other materials provided with the',
 '   distribution.',
 '',
 "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY",
 'EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE',
 'IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR',
 'PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) BE',
 'LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR',
 'CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF',
 'SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR',
 'BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,',
 'WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE',
 'OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,',
 'EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
 );

#
# Name to use for a temporary directory.
#
$tmpdir = "tmpdir";

#
# Parse command-line arguments.
#
Getopt::Long::config("bundling"); # Allow -hv rather than forcing -h -v.

$opt_retval = 
    &GetOptions("h|help" => \$opt_help,
		"n|noact" => \$opt_noact,
		"v|verbose" => \$opt_verbose,
		"p|pkgname=s" => \$opt_pkgname,
		"r|root=s" => \$opt_root,
		"t|tag=s" => \$opt_tag,
		"f|filetree=s@" => \@OPT_FILETREES
		);

if (($#ARGV >= 0)
    || ($opt_retval == 0)
    || (!defined($opt_root))
    || (!defined($opt_pkgname))
    || (!defined(@OPT_FILETREES))
    || ($opt_help)
    )
{
    &print_usage;
    exit(1);
}

while ($opt_root =~ /\/$/)
{
    if ($opt_verbose)
    {
	print STDERR "Discarding trailing '/' from \"$opt_root\"\n";
    }
    chop $opt_root;
}

if (defined($opt_tag))
{
    $opt_pkgname = $opt_pkgname . "_" . $opt_tag;
    $tag_cvs = $opt_tag;
    $tag_cvs =~ s/\./_/g;
    $tag_cvs = "SNAP_$tag_cvs";
    $tag_cmd = "-r $tag_cvs";
}
else
{
    $tag_cvs = "";
    $tag_cmd = "-r HEAD";
}

if ($opt_verbose)
{
    print STDERR "tag            : $opt_tag\n";
    print STDERR "cvs tag        : $tag_cvs\n";
    print STDERR "Tree root      : $opt_root\n";
    print STDERR "Package name   : $opt_pkgname\n";
}

foreach $dir (@OPT_FILETREES)
{
    while ($dir =~ /\/$/)
    {
	if ($opt_verbose)
	{
	    print STDERR "Discarding trailing '/' from \"$dir\"\n";
	}
	chop $dir;
    }
    @TREES = (@TREES, "$opt_root/$dir");
}

if (defined($opt_tag))
{
    if ($opt_verbose)
    {
	print STDERR "cvs tag $tag_cvs @TREES\n";
    }
    unless ($opt_noact)
    {
	`cvs tag $tag_cvs @TREES`;
    }
}

if ($opt_verbose)
{
    print STDERR "cvs export $tag_cmd -d $tmpdir @TREES\n";
}
unless ($opt_noact)
{
    `cvs export $tag_cmd -d $tmpdir @TREES`;
}

if ($opt_verbose)
{
    print STDERR "mv $tmpdir/devroot $opt_pkgname\n";
}
unless ($opt_noact)
{
    `mv $tmpdir/devroot $opt_pkgname`;
}

if ($opt_verbose)
{
    print STDERR "rmdir $tmpdir\n";
}
unless ($opt_noact)
{
    `rmdir $tmpdir`;
}

# Find all the files that need the copyright tag expanded.
if ($opt_verbose)
{
    print STDERR "Doing copyright tag substitution:\n";
}
unless ($opt_noact)
{
    finddepth(\&expand_tags, "$opt_pkgname");
}

if ($opt_verbose)
{
    print STDERR "tar cvzf $opt_pkgname.tar.gz $opt_pkgname\n";
}
unless ($opt_noact)
{
    `tar cvzf $opt_pkgname.tar.gz $opt_pkgname`;
}

# End of main execution.

sub print_usage
{
    print <<EOF;
$0 usage:
$0 [-hnv --help --noact --verbose] [--tag=<tag> | -t <tag>]
       {--pkgname=<name> | -p <pkgname>}
       {--root=<treeroot> | -t <treeroot>}
       {--filetree=<filetree> | -f <filetree>}+
EOF
}

sub expand_tags
{
    my ($name) = $_;
    my ($did_subst) = 0;
    my ($ifh, $ofh);

    if (-r $name
	&& (-w $name)
	&& (-f $name)
	&& (-s $name)
	)
    {
	# Okay, we want to do this file.
	# The filename is in $name.
	# The directory is in $File::Find::dir.
	if ($opt_verbose)
	{
	    print STDERR "  $File::Find::dir/$name...";
	}

	$ifh = new FileHandle $name, "r";
	unless (defined $ifh)
	{
	    print STDERR "Error opening $name for reading\n";
	    exit(1);
	}
	$ofh = new FileHandle "$name.tmp", "w";
	unless (defined $ofh)
	{
	    print STDERR "Error opening $name.tmp for writing\n";
	    exit(1);
	}

	while (<$ifh>)
	{
	    if (/^(.*)\<Copyright([ \t]*=[ \t]*([A-Za-z0-9]+))?\>(.*)\n/)
	    {
		$did_subst = 1;
		if (defined($COPYRIGHT{$3, 0}))
		{
		    for ($i = 0; defined($COPYRIGHT{$3, $i}); $i++)
		    {
			print $ofh "$1$COPYRIGHT{$3, $i}$4\n";
		    }
		}
		else
		{
		    for ($i = 0; defined($COPYRIGHT{"jasone", $i}); $i++)
		    {
			print $ofh "$1$COPYRIGHT{\"jasone\", $i}$4\n";
		    }
		}
	    }
	    elsif (/^(.*)\<License\>(.*)\n/)
	    {
		$did_subst = 1;
		foreach (@LICENSE)
		{
		    print $ofh "$1$_$2\n";
		}
	    }
	    elsif (/^(.*)\<Version\>(.*)\n/)
	    {
		$did_subst = 1;
		print $ofh "$1$opt_tag$2\n";
	    }
	    else
	    {
		print $ofh "$_";
	    }
	}
	
	$ifh->close;
	$ofh->close;

	if ($did_subst)
	{
	    `mv $name.tmp $name`;
	}
	else
	{
	    `rm $name.tmp`
	    }

	if ($opt_verbose)
	{
	    if ($did_subst)
	    {
		print STDERR "yes\n";
	    }
	    else
	    {
		print STDERR "no\n";
	    }
	}
    }
    # It seems that this code never gets hit because 'cvs export' doesn't 
    # export empty directories.  
    elsif (-d $name)
    {
	# Try to delete the directory (only succeeds if the directory is empty,
	# which is what we want.
	$rmdir_result = rmdir $name;
	if ($opt_verbose && ($rmdir_result == 1))
	{
	    print STDERR "rmdir $name\n";
	}
    }
}
