#!/bin/sh
#
# Use the following steps in order to create and test a release:

COOK="cook"
COOKPAR="-par 8"

SRCDIR="onyx-latest"
OBJDIR="onyx_obj"

PREFIX=`pwd`/onyx_prefix

#
# Set up.
#
echo "rm -rf $PREFIX"
rm -rf $PREFIX

echo "rm -rf $OBJDIR"
rm -rf $OBJDIR

echo "mkdir $OBJDIR"
mkdir $OBJDIR

echo "cd $OBJDIR"
cd $OBJDIR

#
# Documentation.
#
for d in 0 1 ; do
    case $d in
    0)
        conf_d=""
	clean_target="distclean"
	;;
    1)
        conf_d="--with-docs"
	clean_target="relclean"
	;;
    esac

    conf="$conf_d"

    echo "===> ../$SRCDIR/configure $conf --prefix=$PREFIX"
    ../$SRCDIR/configure $conf --prefix=$PREFIX
    if [ "x$?" != "x0" ] ; then
        echo "===> Error in configure"
        echo "configure options: $conf"
        exit 2
    fi

    # Parallelizable.
    for i in docs ; do
        echo "===> $COOK $COOKPAR $i"
        $COOK $COOKPAR $i
        if [ "x$?" != "x0" ] ; then
            echo "===> Error cooking $i"
            echo "configure options: $conf"
            exit 2
        fi
    done
    # Non-parallelizable.
    for i in docs_install uninstall $clean_target ; do
        echo "===> $COOK $i"
        $COOK $i
        if [ "x$?" != "x0" ] ; then
            echo "===> Error cooking $i"
            echo "configure options: $conf"
            exit 2
        fi
    done
    echo "===> find $PREFIX -type f |grep ."
    find $PREFIX -type f |grep .
    if [ "x$?" = "x0" ] ; then
        echo "===> uninstall didn't clean up well enough"
        echo "configure options: $conf"
        exit 2
    fi
done

libs="libonyx"
bins="onyx"
#
# Test everything with every allowable combination of configure options.
#
for c in 0 1 ; do
    # --disable-threads
    case $c in
    0)
        conf_c=""
        ;;
    1)
        conf_c="--disable-threads"
        ;;
    esac
for d in 0 1 ; do
    # --disable-real
    case $d in
    0)
        conf_d=""
        ;;
    1)
        conf_d="--disable-real"
        ;;
    esac
for e in 0 1 2 ; do
    # --enable-debug, --enable-profile
    case $e in
    0)
        conf_e=""
        ;;
    1)
        conf_e="--enable-debug"
        ;;
    2)
        conf_e="--enable-profile"
        ;;
    esac
for f in 0 1 ; do
    # --disable-libedit
    case $f in
    0)
        conf_f=""
        ;;
    1)
        conf_f="--disable-libedit"
        ;;
    esac
for g in 0 1 2 ; do
    # --disable-posix, --disable-posix-file
    case $g in
    0)
        conf_g=""
        ;;
    1)
        conf_g="--disable-posix"
        ;;
    2)
        conf_g="--disable-posix-file"
        ;;
    esac
for h in 0 1 ; do
    # --disable-inlines
    case $h in
    0)
        conf_h=""
        ;;
    1)
        conf_h="--disable-inlines"
        ;;
    esac

    conf="$conf_c $conf_d $conf_e $conf_f $conf_g $conf_h"

    echo "===> ../$SRCDIR/configure $conf --prefix=$PREFIX"
    ../$SRCDIR/configure $conf --prefix=$PREFIX
    if [ "x$?" != "x0" ] ; then
        echo "===> Error in configure"
        echo "configure options: $conf"
        exit 2
    fi

    # Libraries.
    for i in $libs ; do
        echo "===> $i"
        # Parallelizable.
        for j in $i ; do
            echo "===> $COOK $COOKPAR $j"
            $COOK $COOKPAR $j
            if [ "x$?" != "x0" ] ; then
                echo "===> Error cooking $j"
                echo "configure options: $conf"
                exit 2
            fi
        done
        # Non-parallelizable.
        for j in $i\_libs_install $i\_libs_uninstall clean ; do
            echo "===> $COOK $j"
            $COOK $j
            if [ "x$?" != "x0" ] ; then
                echo "===> Error cooking $j"
                echo "configure options: $conf"
                exit 2
            fi
        done
        echo "===> find $PREFIX -type f |grep ."
        find $PREFIX -type f |grep .
        if [ "x$?" = "x0" ] ; then
            echo "===> uninstall didn't clean up well enough"
            echo "configure options: $conf"
            exit 2
        fi
    done

    # Binaries.
    for i in $bins ; do
        echo "===> $i"
        # Parallelizable.
        for j in $i ; do
            echo "===> $COOK $COOKPAR $j"
            $COOK $COOKPAR $j
            if [ "x$?" != "x0" ] ; then
                echo "===> Error cooking $j"
                echo "configure options: $conf"
                exit 2
            fi
        done
        # Non-parallelizable.
        for j in $i\_bins_install ; do
            echo "===> $COOK $j"
            $COOK $j
            if [ "x$?" != "x0" ] ; then
                echo "===> Error cooking $j"
                echo "configure options: $conf"
                exit 2
            fi
        done

        # Make sure the application runs.
        echo "===> $PREFIX/bin/$i -h"
        $PREFIX/bin/$i -h
        if [ "x$?" != "x0" ] ; then
            echo "===> Error running $i"
            echo "configure options: $conf"
            exit 2
        fi

        for j in uninstall clean ; do
            echo "===> $COOK $j"
            $COOK $j
            if [ "x$?" != "x0" ] ; then
                echo "===> Error cooking $j"
                echo "configure options: $conf"
                exit 2
            fi
        done
        echo "===> find $PREFIX -type f |grep ."
        find $PREFIX -type f |grep .
        if [ "x$?" = "x0" ] ; then
            echo "===> uninstall didn't clean up well enough"
            echo "configure options: $conf"
            exit 2
        fi
    done

    # General targets.
    # Parallelizable.
    for i in bins libs tests check ; do
        echo "===> $COOK $COOKPAR $i"
        $COOK $COOKPAR $i
        if [ "x$?" != "x0" ] ; then
            echo "===> Error cooking $i"
            echo "configure options: $conf"
            exit 2
        fi
    done
    # Non-parallelizable.
    for i in install uninstall distclean ; do
        echo "===> $COOK $i"
        $COOK $i
        if [ "x$?" != "x0" ] ; then
            echo "===> Error cooking $i"
            echo "configure options: $conf"
            exit 2
        fi
    done
    echo "===> find $PREFIX -type f |grep ."
    find $PREFIX -type f |grep .
    if [ "x$?" = "x0" ] ; then
        echo "===> uninstall didn't clean up well enough"
        echo "configure options: $conf"
        exit 2
    fi
done
done
done
done
done
done

cd ..
rm -rf $OBJDIR
rm -rf $PREFIX
