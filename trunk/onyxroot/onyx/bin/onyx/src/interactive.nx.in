################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
# This file is processed by interactive_gen.nx to produce a more compact
# embedded version in interactive_nxcode.c (normal build) and
# interactive_bootstrap.c (development bootstrap).  In order to make changes to
# this file take effect in the bootstrap interpreter, either type:
#
#   cook bootstrap
#
# or
#
#   cat interactive.nx | onyx interactive_gen.nx > interactive_boostrap.c
#
# The end result of executing this file is a procedure (executable array).  In
# order to support output that differs according to configuration options, a
# string is constructed, then evaluated.
#
# The output of running sprints on the procedure must be evaluatable, which
# means that certain language features such as immediate evaluation must be
# avoided.
#
################################################################################


# Initial string with an opening brace to defer execution, to which other
# strings are catenated.
`{'

`
# Define promptstring in systemdict.
systemdict begin
# - promptstring #string
$promptstring {
    count cvs `onyx:' exch cat `> ' cat
} bind def
end

# Define resume in threaddict to continue after an error.
threaddict begin
$resume $stop load def
end

# Do not stop on error.  Instead, recursively evaluate stdin.  File bufferring
# can cause strange behavior, but at least the error will get handled first.
errordict begin
    $stop {
	stdin cvx stopped pop
    } bind def
end
' cat
@enable_modprompt@ 1 eq {
    `
    `modprompt/modprompt.nx' require
    ' cat
} if

# Final closing brace.
`}' cat cvx eval
