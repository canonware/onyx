################################################################################
#
# <Copyright = jasone>
#
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
################################################################################

$s $AF_INET $SOCK_STREAM socket def

[
    $SO_DEBUG
    $SO_REUSEADDR
    # Not always defined.
#    $SO_REUSEPORT
    $SO_KEEPALIVE
    $SO_DONTROUTE
    $SO_BROADCAST
    $SO_OOBINLINE
    $SO_SNDBUF
    $SO_RCVBUF
    $SO_SNDLOWAT
    $SO_RCVLOWAT
    $SO_TYPE
    $SO_ERROR
    $SO_SNDTIMEO
    $SO_RCVTIMEO
]{
    s over sockopt type $integertype ne {
	`Expected integer for flag (1): ' print
	dup 1 sprint
    } if

    s $SOL_SOCKET 2 idup sockopt type $integertype ne {
	`Expected integer for flag (2): ' print
	1 sprint
    }{
	pop
    } ifelse
} foreach

$ldict s $SO_LINGER sockopt def

ldict $on get type $booleantype ne {
    `Expected boolean for $SO_LINGER, $on: ' print
    ldict $on get 1 sprint
} if

ldict $time get type $integertype ne {
    `Expected integer for $SO_LINGER, $time: ' print
    ldict $time get 1 sprint
} if
