################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
################################################################################

#module

`modprompt/modprompt_defs.nx' require

$clopt class systemdict 3 idup :def
clopt vclass setsuper
clopt $clopt setclassname
clopt <
> setdata
clopt <
    # Constructor.
    #
    #class :new #instance
    $new {
	:rnew
	#instance

	<
	    $packing true
	    # Dictionary of the format:
	    #
	    #   `--flag' --> [arg? handler]
	    $handlers dict
	    $index 0
	    $arg null
	> over data copy pop
    } bind

    # Get the packing mode for single character options.
    #
    #instance :packing_get #packing?
    $packing_get {
	data $packing get
    } bind

    # Set the packing mode for single character options.
    #
    #packing? #instance :packing_set -
    $packing_set {
	data $packing dn put
    } bind

    # Add an option handler.
    #
    #opt #arg? #handler #instance :handler_add -
    $handler_add {
	data $handlers get 4 nup
	#handlers #opt #arg? #handler
	[ up ]
	#handlers #opt [#arg? #handler]
	put
    } bind

    # Remove an option handler.
    #
    #opt #instance :handler_remove -
    $handler_remove {
	data $handlers get exch
    } bind

    # Parse #argv.
    #
    #argv #instance :parse #remainder
    $parse {
	# Iterate over #argv (skip element 0).
	1 {dup 3 idup length lt}{
	    #argv #instance #i

	    # Set index.
	    over data $index 2 idup put

	    # Reset arg.
	    over data $arg null put

	    2 idup over get
	    #argv #instance #i #elm

	    dup `^--' match {
		# Long format option.
		dup `=' 2 split
		#argv #instance #i #elm #splitarr
		dup length 2 eq {
		    # Option is of the form: --opt=arg.
		    nip
		    dup 0 get exch 1 get
		    #argv #instance #i #opt #arg
		    3 idup data $arg dn put
		}{
		    # No argument.
		    pop
		} ifelse
		#argv #instance #i #opt

		2 idup data $handlers get
		#argv #instance #i #opt #handlers
		dup 2 idup known {
		    # Handler defined.
		    exch get
		    #argv #instance #i #[arg? handler]
		    1 get 2 idup exch
		    #argv #instance #i #instance #handler
		    eval
		    #argv #instance #i
		}{
		    # No handler defined.
		    pop
		    #argv #instance #i
		    exit
		} ifelse
	    }{
	    dup `^-' match {
		# Short format option.
		# XXX
	    }{
		# Not an option.
		pop
		#argv #instance #i
		exit
	    } ifelse
	    } ifelse
	    #argv #instance #i

	    # Increment index.
	    inc
	} while
	#argv #instance #i
	2 idup length over sub
	#argv #instance #i #remlen
	2 ipop
	getinterval
	#remainder
    } bind

    # Return the current argv index.  This is provided to aid option handlers.
    #
    #instance :index_get #index
    $index_get {
	data $index get
    } bind

    # Return the current option argument.  This is provided to aid option
    # handlers.
    #
    #instance :arg_get #arg
    $arg_get {
	data $arg get
    } bind
> setmethods
