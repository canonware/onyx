dnl
dnl <Copyright = jasone>
dnl <License>
dnl
dnl Version: <Version>
dnl
dnl Process this file with autoconf to produce a configure script.
AC_INIT(Cookfile.in)

abs_srcdir=`cd $srcdir; pwd`
AC_SUBST(abs_srcdir)

objdir=.
AC_SUBST(objdir)
abs_objdir=`pwd`
AC_SUBST(abs_objdir)

cfghdrs=
bins=
libs=

dnl Look for libraries.  Order matters.  They should appear in an order that
dnl works on the link line (-lonyx -ledit -lsock -lstash).
CW_BUILD_LIB(libonyx, lib_onyx)
CW_BUILD_LIB(libedit, lib_edit)
CW_BUILD_LIB(libsock, lib_sock)
CW_BUILD_LIB(libstash, lib_stash)

dnl Look for binaries.
CW_BUILD_BIN(cover, bin_cover)
CW_BUILD_BIN(ncat, bin_ncat)
CW_BUILD_BIN(onyx, bin_onyx)
CW_BUILD_BIN(proxy, bin_proxy)

AC_CONFIG_HEADER($cfghdrs)
AC_SUBST(cfghdrs)
AC_SUBST(bins)
AC_SUBST(libs)

AC_CANONICAL_HOST
case "${host}" in
  i386-*-freebsd*)
	AC_DEFINE(_CW_OS_FREEBSD, )
        ;;
  *-*-linux*)
	AC_DEFINE(_CW_OS_LINUX, )
        ;;
  *-*-solaris2*)
	AC_DEFINE(_CW_OS_SOLARIS, )
	AC_DEFINE(_POSIX_PTHREAD_SEMANTICS)
	LIBS="$LIBS -lposix4 -lsocket -lnsl"
        ;;
esac

dnl Check for programs.

dnl If CFLAGS isn't defined and using gcc, set CFLAGS to something reasonable.
dnl Otherwise, just prevent autoconf from molesting CFLAGS.
CFLAGS=$CFLAGS
AC_PROG_CC
if test "x$CFLAGS" = "x" -a "x$GCC" = "xyes" ; then
	CFLAGS="-Wall -Wno-uninitialized -pipe -g3"
fi

AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PATH_PROG(AR, ar, , $PATH)
AC_PATH_PROG(LD, ld, , $PATH)
AC_PATH_PROG(LN, ln, , $PATH)
AC_PATH_PROG(PERL, perl, , $PATH)
AC_PATH_PROG(BASENAME, basename, , $PATH)
AC_PATH_PROG(CHMOD, chmod, , $PATH)
AC_PATH_PROG(INSTALL, install, , $PATH)
AC_PATH_PROG(CAT, cat, , $PATH)
AC_PATH_PROG(DIFF, diff, , $PATH)
AC_PATH_PROG(ETAGS, etags, , $PATH)
AC_PATH_PROG(LATEX, latex, , $PATH)
AC_PATH_PROG(PDFLATEX, pdflatex, , $PATH)
AC_PATH_PROG(DVIPS, dvips, , $PATH)
AC_PATH_PROG(FIG2DEV, fig2dev, , $PATH)
AC_PATH_PROG(LATEX2HTML, latex2html, , $PATH)
AC_PATH_PROG(MAKEINDEX, makeindex, , $PATH)

VERIFY="$objdir/test/verify"
mkdir -p $objdir/test
AC_SUBST(VERIFY)

dnl Find libraries.
CW_USE_PTHREADS()

dnl Do not build shared libraries by default.
CW_DISABLE_SHARED()

dnl Enable inline functions by default.
CW_ENABLE_INLINES()

dnl Define preprocessor macros.

dnl Check for header files.
dnl AC_HEADER_STDC
AC_CHECK_HEADERS(poll.h, , AC_MSG_ERROR(Cannot build without unistd.h))
AC_CHECK_HEADERS(unistd.h, , AC_MSG_ERROR(Cannot build without poll.h))

dnl Check for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN

if test "x$build_libstash" = "xyes" ; then
  AC_CHECK_SIZEOF(signed char, 1)
  AC_CHECK_SIZEOF(unsigned char, 1)
  AC_CHECK_SIZEOF(signed short, 2)
  AC_CHECK_SIZEOF(unsigned short, 2)
  AC_CHECK_SIZEOF(int, 4) dnl defines SIZEOF_INT
  AC_CHECK_SIZEOF(unsigned, 4)
  AC_CHECK_SIZEOF(long, 4)
  AC_CHECK_SIZEOF(unsigned long, 4)
  AC_CHECK_SIZEOF(long long, 4)
  AC_CHECK_SIZEOF(unsigned long long, 4)
  AC_CHECK_SIZEOF(int *, 4) dnl defines SIZEOF_INT_P
  AC_CHECK_SIZEOF(float, 4)
  AC_CHECK_SIZEOF(double, 8)
  AC_CHECK_SIZEOF(long double, 12)

  dnl Find maximum iovec compatible with readv()/writev().
  AC_MSG_CHECKING(maximum iov for readv()/writev())
  AC_TRY_RUN([
#include <stdio.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <unistd.h>

int
main()
{
	int	i, fd, nwrite;
	char	buf[1024];
	struct	iovec iov[1024];

	for (i = 0; i < 1024; i++) {
		iov[i].iov_base = &buf[i];
		iov[i].iov_len = 1;
	}

	fd = open("_CW_MAX_IOV", O_RDWR | O_CREAT | O_TRUNC, 0644);

	for (i = 1024; i > 16; i >>= 1) {
		if (-1 != writev(fd, iov, i))
			break;
	}

	fprintf(stderr, "iovcnt: %d\n", i);

	ftruncate(fd, 0);
	lseek(fd, 0, SEEK_SET);
	nwrite = sprintf(buf, "%d\n", i);
	write(fd, buf, nwrite);

	close(fd);
	return 0;
}
])
  maxiov=`cat _CW_MAX_IOV`
  AC_MSG_RESULT($maxiov)
  AC_DEFINE_UNQUOTED(_CW_MAX_IOV, $maxiov)
  rm -f _CW_MAX_IOV
fi

if test "x$build_libsock" = "xyes" ; then
  AC_CHECK_FUNCS(poll, , AC_MSG_ERROR(Cannot build without poll))
fi

if test "x$build_proxy" = "xyes" ; then
  AC_CHECK_HEADERS(netinet/ip_nat.h, AC_DEFINE(_CW_IPFILTER))
fi

dnl
dnl Print out the results of configuration.
dnl
AC_MSG_RESULT(===============================================================================)
AC_MSG_RESULT(CFLAGS     : ${CFLAGS})
AC_MSG_RESULT(CPPFLAGS   : ${CPPFLAGS})
AC_MSG_RESULT(LDFLAGS    : ${LDFLAGS})
AC_MSG_RESULT(LIBS       : ${LIBS})
AC_MSG_RESULT()
AC_MSG_RESULT(objdir     : ${objdir})
AC_MSG_RESULT(abs_objdir : ${abs_objdir})
AC_MSG_RESULT(srcdir     : ${srcdir})
AC_MSG_RESULT(abs_srcdir : ${abs_srcdir})
AC_MSG_RESULT(prefix     : ${prefix})
AC_MSG_RESULT()
AC_MSG_RESULT(libs       :${libs})
AC_MSG_RESULT(bins       :${bins})
AC_MSG_RESULT()
AC_MSG_RESULT(shared     : ${enable_shared})
AC_MSG_RESULT(inlines    : ${enable_inlines})
AC_MSG_RESULT(===============================================================================)

dnl Create additional directories that processed files will land in.
mkdir -p $objdir/doc/latex

dnl Process the following files.
AC_OUTPUT(Cookfile \
bin/ncat/doc/latex/manual.tex \
bin/onyx/doc/latex/manual.tex \
bin/proxy/doc/latex/manual.tex \
lib/c/libstash/doc/latex/manual.tex \
lib/c/libsock/doc/latex/manual.tex \
lib/c/libonyx/doc/latex/manual.tex \
doc/latex/manual.tex \
doc/latex/ltx2e \
test/verify \
)

dnl autoconf doesn't keep the execute bit if it's set for the input files, so do
dnl it manually.
echo chmod u+x $objdir/test/verify
chmod u+x $objdir/test/verify

echo chmod u+x $objdir/doc/latex/ltx2e
chmod u+x $objdir/doc/latex/ltx2e
