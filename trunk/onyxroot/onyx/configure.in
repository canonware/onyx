dnl 
dnl <Copyright = jasone>
dnl <License>
dnl 
dnl Version: <Version>
dnl 
dnl Process this file with autoconf to produce a configure script.
AC_INIT(Cookfile.in)

dnl 
dnl Version requirements for external software we depend on.
dnl 
GTK_VERSION_REQUIRED=1.3.12

srcroot=$srcdir
AC_SUBST(srcroot)
abs_srcroot=`cd "$srcdir"; pwd`
AC_SUBST(abs_srcroot)

objroot=.
AC_SUBST(objroot)
abs_objroot=`pwd`
AC_SUBST(abs_objroot)

cfgoutputs="Cookfile Cookfile.inc bin/Cookfile.inc doc/Cookfile.inc"
cfgoutputs="$cfgoutputs examples/Cookfile.inc lib/Cookfile.inc mod/Cookfile.inc"
cfgoutputs="$cfgoutputs test/Cookfile.inc test/verify"
cfghdrs="config.stamp"
bins=
mods=
libs=
docs=

dnl If CFLAGS isn't defined and using gcc, set CFLAGS to something reasonable.
dnl Otherwise, just prevent autoconf from molesting CFLAGS.
CFLAGS=$CFLAGS
AC_PROG_CC
if test "x$CFLAGS" = "x" ; then
  no_CFLAGS="yes"
fi
if test "x$no_CFLAGS" = "xyes" -a "x$GCC" = "xyes" ; then
	CFLAGS="-Wall -Wno-uninitialized -pipe -g3"
fi
AC_PROG_CPP

dnl Use threads by default.
CW_ENABLE_THREADS

dnl Enable ral support by default.
CW_ENABLE_REAL

dnl Support POSIX file operations by default.
CW_ENABLE_POSIX_FILE

dnl Support POSIX by default.
CW_ENABLE_POSIX

dnl Enable inline functions by default.
CW_ENABLE_INLINES

dnl Build libonyx by default.
CW_ENABLE_LIBONYX

dnl Use libedit by default.
CW_ENABLE_LIBEDIT

dnl Build onyx by default.
CW_ENABLE_ONYX

dnl Build slate by default.
CW_ENABLE_SLATE
if test "x$enable_slate" = "x1" ; then
  if test "x$enable_threads" = "x0" -o "x$enable_real" = "x0" \
     -o "x$enable_posix" = "x0" -o "x$enable_posix_file" = "x0" ; then
    AC_MSG_RESULT(Missing configuration options necessary for slate)
    enable_slate=0
  fi
fi

dnl Do not compile with debugging by default.
CW_DISABLE_DEBUG

dnl Do not compile with profiling by default.
CW_DISABLE_PROFILE

dnl Only optimize if not debugging.
if test "x$enable_debug" = "x0" -a "x$no_CFLAGS" = "xyes" ; then
  CFLAGS="$CFLAGS -O"
fi

if test "x$enable_profile" = "x1" -a "x$no_CFLAGS" = "xyes" ; then
  CFLAGS="$CFLAGS -pg"
fi

dnl Look for libraries.  Order matters.  They should appear in an order that
dnl works on the link line (-lonyx -ledit).
if test "x$enable_onyx" = "x1" ; then
  CW_BUILD_LIB(libonyx, lib_onyx)
fi
if test "x$enable_libedit" = "x1" ; then
  CW_BUILD_LIB(libedit, lib_edit)
fi

dnl Look for modules.
enable_modules="yes"
AC_CHECK_FUNCS(dlopen, AC_DEFINE(HAVE_DLOPEN), \
  AC_CHECK_LIB(dl, dlopen, LIBS="$LIBS -ldl" ; AC_DEFINE(HAVE_DLOPEN), \
    [enable_modules="no"
    AC_MSG_RESULT(Modules disabled since dlopen is missing)]))

if test "x$enable_modules" = "xyes" -a "x$enable_threads" = "x1" \
     -a "x$enable_real" = "x1" -a "x$enable_posix" = "x1" \
     -a "x$enable_posix_file" = "x1" ; then
  dnl modgtk.
  PKG_CHECK_MODULES(GTK, gtk+-2.0 >= $GTK_VERSION_REQUIRED, \
    CW_BUILD_MOD(modgtk, mod_gtk), \
    AC_MSG_RESULT(gtk+ $GTK_VERSION_REQUIRED or newer not found))
else
  AC_MSG_RESULT(Missing configuration options necessary for modgtk)
fi

dnl Look for binaries.
if test "x$enable_onyx" = "x1" ; then
  CW_BUILD_BIN(onyx, bin_onyx)
fi
if test "x$enable_slate" = "x1" ; then
  CW_BUILD_BIN(slate, bin_slate)
fi

AC_SUBST(bins)
AC_SUBST(mods)
AC_SUBST(libs)
AC_SUBST(docs)

dnl Platform-specific settings.  abi and RPATH can probably be determined
dnl programmatically, but doing so is error-prone, which makes it generally
dnl not worth the trouble.
AC_CANONICAL_HOST
case "${host}" in
  *-*-darwin*)
	CFLAGS="$CFLAGS -fno-common -no-cpp-precomp"
	abi="macho"
	RPATH=""
	;;
  *-*-freebsd*)
	abi="elf"
	RPATH="-Wl,-rpath,"
	;;
  *-*-linux*)
	abi="elf"
	RPATH="-Wl,-rpath,"
	;;
  *-*-netbsd*)
	AC_MSG_CHECKING(ABI)
	AC_EGREP_CPP(yes,
[#ifdef __ELF__
  yes
#endif
],
		     abi="elf",
		     abi="aout")
	AC_MSG_RESULT($abi)
	RPATH="-Wl,-rpath,"
	;;
  *-*-solaris2*)
	abi="elf"
	AC_DEFINE(_POSIX_PTHREAD_SEMANTICS)
	LIBS="$LIBS -lposix4"
	;;
  *)
	AC_MSG_RESULT(Unsupported operating system: ${host})
	abi="elf"
	RPATH="-Wl,-rpath,"
	;;
esac
AC_SUBST(abi)
AC_SUBST(RPATH)

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PATH_PROG(AR, ar, , $PATH)
AC_PATH_PROG(LD, ld, , $PATH)
AC_PATH_PROG(PERL, perl, , $PATH)
AC_PATH_PROG(ACLOCAL, aclocal, , $PATH)
AC_PATH_PROG(AUTOCONF, , autoconf, , $PATH)
AC_PATH_PROG(AUTOHEADER, , autoheader, , $PATH)

dnl Do not build documentaion by default; instead use the prebuilt
dnl documentation.
CW_WITHOUT_DOCS()
dnl Include rules for building/installing documents, if the docs are included.
dnl These tests are orthogonal to the tests in CW_WITHOUT_DOCS.
CW_BUILD_DOC(onyx, doc_onyx)
CW_BUILD_DOC(slate, doc_slate)

VERIFY="$objroot/test/verify"
mkdir -p "$objroot/test"
AC_SUBST(VERIFY)

dnl Find libraries.

dnl Define preprocessor macros.

dnl Check for header files.
if test "x$enable_posix_file" = "x1" ; then
  dnl Make sure that poll() and/or select() is available.
  can_poll=0
  AC_CHECK_FUNCS(poll select, can_poll=1)
  if test "x$can_poll" = "x0" ; then
    AC_MSG_ERROR(Cannot build without poll() or select())
  fi

  AC_CHECK_FUNCS(readdir_r)
fi
if test "x$enable_posix" = "x1" ; then
  AC_CHECK_HEADERS(unistd.h, , AC_MSG_ERROR(Cannot build without unistd.h))
fi

dnl Check for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN

dnl 
dnl libonyx configuration.
dnl 
if test "x$lib_onyx" = "x1" ; then
  AC_CHECK_SIZEOF(signed char, 1)
  AC_CHECK_SIZEOF(unsigned char, 1)
  AC_CHECK_SIZEOF(signed short, 2)
  AC_CHECK_SIZEOF(unsigned short, 2)
  AC_CHECK_SIZEOF(int, 4) dnl defines SIZEOF_INT
  AC_CHECK_SIZEOF(unsigned, 4)
  AC_CHECK_SIZEOF(long, 4)
  AC_CHECK_SIZEOF(unsigned long, 4)
  AC_CHECK_SIZEOF(long long, 4)
  AC_CHECK_SIZEOF(unsigned long long, 4)
  AC_CHECK_SIZEOF(int *, 4) dnl defines SIZEOF_INT_P
  AC_CHECK_SIZEOF(float)
  AC_CHECK_SIZEOF(double)
  AC_CHECK_SIZEOF(long double)

  if test "x$enable_posix" = "x1" ; then
    if test "x$prefix" = "xNONE" ; then
      rpath_post="\`/usr/local/share/onyx-$onyx_version/nx'"
      mpath_post="\`/usr/local/share/onyx-$onyx_version/nxm'"
    else
      rpath_post="\`$prefix/share/onyx-$onyx_version/nx'"
      mpaath_post="\`$prefix/share/onyx-$onyx_version/nxm'"
    fi
    AC_SUBST(rpath_post)
    AC_SUBST(mpath_post)

    dnl Try to figure out which field of struct dirent contains the entry string
    dnl length.
    AC_MSG_CHECKING(for (struct dirent).d_namlen)
    AC_TRY_LINK([
#include <sys/types.h>
#include <dirent.h>
], [
    struct dirent ent;

    ent.d_namlen = 0;
], AC_MSG_RESULT(yes), AC_MSG_RESULT(no)

    dnl d_namlen doesn't exist, so try d_reclen.
    AC_MSG_CHECKING(for (struct dirent).d_reclen)
    AC_TRY_LINK([
#include <sys/types.h>
#include <dirent.h>
], [
    struct dirent ent;

    ent.d_reclen = 0;
], AC_MSG_RESULT(yes)
   AC_DEFINE(CW_LIBONYX_USE_DIRENT_RECLEN),
   AC_MSG_RESULT(no)
   AC_MSG_ERROR(struct dirent too deviant)))

    dnl Look for nanosecond resolution of atime in struct stat.
    AC_MSG_CHECKING(for (struct stat).st_atimespec)
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
], [
    struct stat st;

    st.st_atimespec.tv_nsec = 0;
], AC_MSG_RESULT(yes)
   AC_DEFINE(CW_LIBONYX_USE_STAT_ATIMESPEC),
   AC_MSG_RESULT(no))

    dnl Look for nanosecond resolution of mtime in struct stat.
    AC_MSG_CHECKING(for (struct stat).st_mtimespec)
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
], [
    struct stat st;

    st.st_mtimespec.tv_nsec = 0;
], AC_MSG_RESULT(yes)
   AC_DEFINE(CW_LIBONYX_USE_STAT_MTIMESPEC),
   AC_MSG_RESULT(no))

    dnl Look for nanosecond resolution of ctime in struct stat.
    AC_MSG_CHECKING(for (struct stat).st_ctimespec)
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
], [
    struct stat st;

    st.st_ctimespec.tv_nsec = 0;
], AC_MSG_RESULT(yes)
   AC_DEFINE(CW_LIBONYX_USE_STAT_CTIMESPEC),
   AC_MSG_RESULT(no))

    AC_CHECK_FUNCS(unsetenv)
  fi
fi

dnl 
dnl onyx configuration.
dnl 
if test "x$bin_onyx" = "x1" ; then
  AC_DEFINE_UNQUOTED(CW_TONYX_ONYX, "$abs_objroot/bin/onyx/bin/onyx")

  tmpath=ONYX_MPATH=
  trpath=ONYX_RPATH=
  for i in $mods ; do
    tmpath=$tmpath:$abs_objroot/mod/$i/nxm
    trpath=$trpath:$abs_objroot/mod/$i/nx
  done
  dnl XXX Leading ":" should be removed.
  AC_DEFINE_UNQUOTED(CW_TONYX_RPATH, "$trpath")
  AC_DEFINE_UNQUOTED(CW_TONYX_MPATH, "$tmpath")
fi

dnl 
dnl slate configuration.
dnl 
if test "x$bin_slate" = "x1" ; then
  if test "x$prefix" = "xNONE" ; then
    CW_SLATE_RPATH="/usr/local/share/slate-$slate_version/nx:/usr/local/share/onyx-$onyx_version/nx"
    CW_SLATE_MPATH="/usr/local/share/slate-$slate_version/nxm:/usr/local/share/onyx-$onyx_version/nxm"
  else
    CW_SLATE_RPATH="$prefix/share/slate-$slate_version/nx:$prefix/share/onyx-$onyx_version/nx"
    CW_SLATE_MPATH="$prefix/share/slate-$slate_version/nxm:$prefix/share/onyx-$onyx_version/nxm"
  fi
  AC_DEFINE_UNQUOTED(CW_SLATE_RPATH, "$CW_SLATE_RPATH")
  AC_DEFINE_UNQUOTED(CW_SLATE_MPATH, "$CW_SLATE_MPATH")

  AC_DEFINE_UNQUOTED(CW_TSLATE_SLATE, "$abs_objroot/bin/slate/bin/slate")

  tmpath=SLATE_MPATH=:.
  trpath=SLATE_RPATH=:.
  for i in $mods ; do
    tmpath=$tmpath:$abs_objroot/mod/$i/nxm
    trpath=$trpath:$abs_objroot/mod/$i/nx
  done
  AC_DEFINE_UNQUOTED(CW_TSLATE_RPATH, "$trpath")
  AC_DEFINE_UNQUOTED(CW_TSLATE_MPATH, "$tmpath")
fi

dnl 
dnl modgtk configuration.
dnl 
if test "x$mod_gtk" = "x1" ; then
  cfgoutputs="$cfgoutputs mod/modgtk/nx/modgtk/modgtk_defs.nx"
fi

dnl 
dnl Print out the results of configuration.
dnl 
AC_MSG_RESULT(===============================================================================)
if test "x$bin_onyx" = "x1" ; then
AC_MSG_RESULT(Onyx version  : $onyx_version)
fi
if test "x$bin_slate" = "x1" ; then
AC_MSG_RESULT(Slate version : $slate_version)
fi
AC_MSG_RESULT()
AC_MSG_RESULT(CFLAGS        : ${CFLAGS})
AC_MSG_RESULT(CPPFLAGS      : ${CPPFLAGS})
AC_MSG_RESULT(LDFLAGS       : ${LDFLAGS})
AC_MSG_RESULT(LIBS          : ${LIBS})
AC_MSG_RESULT()
AC_MSG_RESULT(srcroot       : ${srcroot})
AC_MSG_RESULT(abs_srcroot   : ${abs_srcroot})
AC_MSG_RESULT(objroot       : ${objroot})
AC_MSG_RESULT(abs_objroot   : ${abs_objroot})
AC_MSG_RESULT(prefix        : ${prefix})
AC_MSG_RESULT()
AC_MSG_RESULT(libs          :${libs})
AC_MSG_RESULT(mods          :${mods})
AC_MSG_RESULT(bins          :${bins})
AC_MSG_RESULT(docs          :${docs})
AC_MSG_RESULT()
AC_MSG_RESULT(threads       : ${enable_threads})
AC_MSG_RESULT(real          : ${enable_real})
AC_MSG_RESULT(posix         : ${enable_posix})
AC_MSG_RESULT(posix-file    : ${enable_posix_file})
AC_MSG_RESULT(inlines       : ${enable_inlines})
AC_MSG_RESULT(libedit       : ${enable_libedit})
AC_MSG_RESULT(libonyx       : ${enable_libonyx})
AC_MSG_RESULT(debug         : ${enable_debug})
AC_MSG_RESULT(profile       : ${enable_profile})
AC_MSG_RESULT(docs          : ${with_docs})
AC_MSG_RESULT(===============================================================================)

dnl Process .in files.
AC_SUBST(cfghdrs)
AC_SUBST(cfgoutputs)
AC_CONFIG_HEADER($cfghdrs)
AC_OUTPUT($cfgoutputs)

dnl autoconf doesn't keep the execute bit if it's set for the input files, so do
dnl it manually.
echo chmod u+x "$objroot/test/verify"
chmod u+x "$objroot/test/verify"
