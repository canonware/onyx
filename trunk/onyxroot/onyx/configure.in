dnl 
dnl <Copyright = jasone>
dnl <License>
dnl 
dnl Version: <Version>
dnl 
dnl Process this file with autoconf to produce a configure script.
AC_INIT(Cookfile.in)

dnl 
dnl Version requirements for external software we depend on.
dnl 
PCRE_VERSION_MIN=3.7
LIBEDIT_VERSION_MIN=2.6

srcroot=$srcdir
AC_SUBST(srcroot)
abs_srcroot=`cd "$srcdir"; pwd`
AC_SUBST(abs_srcroot)

objroot=.
AC_SUBST(objroot)
abs_objroot=`pwd`
AC_SUBST(abs_objroot)

cfgoutputs="Cookfile Cookfile.inc bin/Cookfile.inc doc/Cookfile.inc"
cfgoutputs="$cfgoutputs examples/Cookfile.inc lib/Cookfile.inc mod/Cookfile.inc"
cfgoutputs="$cfgoutputs test/Cookfile.inc"
cfghdrs="config.stamp"
bins=
mods=
libs=
docs=

dnl If CFLAGS isn't defined and using gcc, set CFLAGS to something reasonable.
dnl Otherwise, just prevent autoconf from molesting CFLAGS.
CFLAGS=$CFLAGS
AC_PROG_CC
if test "x$CFLAGS" = "x" ; then
  no_CFLAGS="yes"
fi
if test "x$no_CFLAGS" = "xyes" -a "x$GCC" = "xyes" ; then
	CFLAGS="-Wall -Wno-uninitialized -pipe -g3"
fi
AC_PROG_CPP

dnl Platform-specific settings.  abi and RPATH can probably be determined
dnl programmatically, but doing so is error-prone, which makes it generally
dnl not worth the trouble.
AC_CANONICAL_HOST
case "${host}" in
  *-*-darwin*)
	CFLAGS="$CFLAGS -fno-common -no-cpp-precomp"
	abi="macho"
	RPATH=""
	;;
  *-*-freebsd*)
	abi="elf"
	RPATH="-Wl,-rpath,"
	;;
  *-*-linux*)
	abi="elf"
	AC_DEFINE(_GNU_SOURCE)
	RPATH="-Wl,-rpath,"
	;;
  *-*-netbsd*)
	AC_MSG_CHECKING(ABI)
	AC_EGREP_CPP(yes,
[#ifdef __ELF__
  yes
#endif
],
		     abi="elf",
		     abi="aout")
	AC_MSG_RESULT($abi)
	RPATH="-Wl,-rpath,"
	;;
  *-*-solaris2*)
	abi="elf"
	RPATH="-Wl,-R,"
	AC_DEFINE(_POSIX_PTHREAD_SEMANTICS)
	LIBS="$LIBS -lposix4"
	;;
  *)
	AC_MSG_RESULT(Unsupported operating system: ${host})
	abi="elf"
	RPATH="-Wl,-rpath,"
	;;
esac
AC_SUBST(abi)
AC_SUBST(RPATH)

case "${host_cpu}" in
  i[[3456]]86)
	AC_DEFINE(CW_CPU_IA32)
	;;
  powerpc)
	AC_DEFINE(CW_CPU_PPC)
	;;
  *)
	AC_MSG_RESULT(Unsupported CPU "${host_cpu}"; very slow mb_write())
	;;
esac

dnl Use threads by default.
AC_ARG_ENABLE(threads, [  --disable-threads       Disable threads],
if test "x$enable_threads" = "xyes" ; then
  enable_threads="1"
else
  enable_threads="0"
fi
,
enable_threads="1"
)
if test "x$enable_threads" = "x1" ; then
  dnl Look for Mach threads.
  have_mthreads="1"
  AC_CHECK_HEADERS(mach/task.h, , have_mthreads="0")
  AC_CHECK_FUNCS(mach_thread_self, , have_mthreads="0")
  if test "x$have_mthreads" = "x1" ; then
    AC_DEFINE(CW_MTHREADS)
  fi

  dnl Look for Solaris threads.
  have_sthreads="1"
  AC_CHECK_HEADERS(thread.h, , have_sthreads="0")
  AC_CHECK_LIB(thread, thr_suspend, , have_sthreads="0")
  AC_CHECK_LIB(thread, thr_continue, , have_sthreads="0")
  if test "x$have_sthreads" = "x1" ; then
    LIBS="$LIBS -lthread"
    AC_DEFINE(CW_STHREADS)
  fi

  dnl Look for pthreads.
  AC_CHECK_HEADERS(pthread.h, , enable_threads="0")
  AC_CHECK_LIB(pthread, pthread_create, LIBS="$LIBS -lpthread", \
    AC_CHECK_LIB(c_r, pthread_create, \
      LIBS="$LIBS -pthread", enable_threads="0"))
  if test "x$enable_threads" = "x1" ; then
    AC_DEFINE(CW_THREADS)
    AC_DEFINE(CW_PTHREADS)
  fi

  dnl Look for FreeBSD's non-portable suspend/resume API (libc_r).
  have_fthreads="1"
  AC_CHECK_FUNCS(pthread_suspend_np, , have_fthreads="0")
  AC_CHECK_FUNCS(pthread_resume_np, , have_fthreads="0")
  if test "x$have_fthreads" = "x1" ; then
    AC_DEFINE(CW_FTHREADS)
  fi
fi
AC_SUBST(enable_threads)

dnl Enable real support by default.
AC_ARG_ENABLE(real, [  --disable-real          Disable real number support],

if test "x$enable_real" = "xyes" ; then
  enable_real="1"
else
  enable_real="0"
fi
,
enable_real="1"
)
AC_SUBST(enable_real)
if test "x$enable_real" = "x1" ; then
  AC_DEFINE(CW_REAL)
  LIBS="$LIBS -lm"
  AC_CHECK_FUNCS(asprintf)
fi

dnl Support POSIX file operations by default.
AC_ARG_ENABLE(posix-file, [  --disable-posix-file    Disable POSIX file support],
if test "x$enable_posix_file" = "xyes" ; then
  enable_posix_file="1"
else
  enable_posix_file="0"
fi
,
enable_posix_file="1"
)
AC_SUBST(enable_posix_file)
if test "x$enable_posix_file" = "x1" ; then
  AC_DEFINE(CW_POSIX_FILE)
fi

dnl Support POSIX by default.
AC_ARG_ENABLE(posix, [  --disable-posix         Disable POSIX support],
if test "x$enable_posix" = "xyes" ; then
  enable_posix="1"
else
  enable_posix="0"
fi
,
enable_posix="1"
)
dnl posix depends on posix-file.
if test "x$enable_posix_file" = "x0" ; then
  enable_posix="0"
fi

AC_SUBST(enable_posix)
if test "x$enable_posix" = "x1" ; then
  AC_DEFINE(CW_POSIX)
fi

dnl Enable inline functions by default.
AC_ARG_ENABLE(inlines, [  --disable-inlines       Do not use inline functions],
if test "x$enable_inlines" = "xno" ; then
  enable_inlines="0"
else
  enable_inlines="1"
fi
,
enable_inlines="1"
)
if test "x$enable_inlines" = "x1" ; then
  AC_DEFINE(CW_USE_INLINES)
fi

dnl Build libonyx by default.
AC_ARG_ENABLE(libonyx, [  --disable-libonyx       Do not build libonyx],
if test "x$enable_libonyx" = "xno" ; then
  enable_libonyx="0"
else
  enable_libonyx="1"
fi
,
enable_libonyx="1"
)
if test "x$enable_libonyx" = "x0" ; then
  AC_CHECK_HEADERS(libonyx/libonyx.h, , \
    AC_MSG_ERROR(Cannot find libonyx/libonyx.h))
  AC_CHECK_LIB(onyx, libonyx_init, LIBS="$LIBS", \
    AC_MSG_ERROR(Cannot find libonyx))
fi

AC_SUBST(enable_libonyx)
if test "x$enable_libonyx" = "x1" ; then
  cfgoutputs="$cfgoutputs lib/libonyx/src/nx.nx lib/libonyx/src/nxo_thread.nx"
  AC_DEFINE(CW_USE_LIBONYX)
fi

dnl Check if modules can be used.
enable_modules="yes"
AC_CHECK_FUNCS(dlopen, AC_DEFINE(HAVE_DLOPEN), \
  AC_CHECK_LIB(dl, dlopen, LIBS="$LIBS -ldl" ; AC_DEFINE(HAVE_DLOPEN), \
    [enable_modules="no"
    AC_MSG_RESULT(Modules disabled since dlopen is missing)]))

dnl Check for libpcre.
AC_ARG_WITH(libpcre-prefix, [  --with-libpcre-prefix   Prefix for libpcre],
if test "x$with_libpcre_prefix" = "xno" ; then
  LIBPCRE_PREFIX=
else
  LIBPCRE_PREFIX="$with_libpcre_prefix"
fi
,
LIBPCRE_PREFIX=
)
AC_SUBST(LIBPCRE_PREFIX)

if test "x$LIBPCRE_PREFIX" = "x" ; then
  AC_PATH_PROG(PCRE_CONFIG, pcre-config, , $PATH)
else
  AC_PATH_PROG(PCRE_CONFIG, pcre-config, , "$LIBPCRE_PREFIX/bin")
fi
if test "x$PCRE_CONFIG" != "x" ; then
  dnl Make sure the version of pcre found is sufficient.
  AC_MSG_CHECKING(for pcre >= $PCRE_VERSION_MIN)
  PCRE_MAJOR=`$PCRE_CONFIG --version | tr . " " | awk '{print $1}'`
  PCRE_MINOR=`$PCRE_CONFIG --version | tr . " " | awk '{print $2}'`
  PCRE_MAJOR_MIN=`echo $PCRE_VERSION_MIN | tr . " " | awk '{print $1}'`
  PCRE_MINOR_MIN=`echo $PCRE_VERSION_MIN | tr . " " | awk '{print $2}'`
  if test $PCRE_MAJOR -gt $PCRE_MAJOR_MIN \
       -o $PCRE_MAJOR -eq $PCRE_MAJOR_MIN \
       -a $PCRE_MINOR -ge $PCRE_MINOR_MIN ; then
    AC_MSG_RESULT($PCRE_MAJOR.$PCRE_MINOR)
    LIBPCRE_CPPFLAGS=`$PCRE_CONFIG --cflags`
    LIBPCRE_LDFLAGS=`$PCRE_CONFIG --libs`
    AC_SUBST(LIBPCRE_CPPFLAGS)
    AC_SUBST(LIBPCRE_LDFLAGS)
    have_libpcre="1"
  else
    AC_MSG_RESULT(no)
    have_libpcre="0"
  fi
else
  have_libpcre="0"
fi

dnl Build onyx by default.
if echo "<Version = onyx>" | grep Version >/dev/null ; then
  onyx_version=devel
else
  onyx_version="<Version = onyx>"
fi
AC_SUBST(onyx_version)

AC_ARG_ENABLE(onyx, [  --disable-onyx          Do not build onyx],
if test "x$enable_onyx" = "xno" ; then
  enable_onyx="0"
else
  enable_onyx="1"
fi
,
enable_onyx="1"
)
if test "x$enable_onyx" = "x0" ; then
  AC_PATH_PROG(ONYX, onyx-$onyx_version, , $PATH)
  if test "x$ONYX" = "x" ; then
    AC_MSG_ERROR(Cannot find onyx-$onyx_version)
  fi
  TONYX="$ONYX"
else
  if test "x$prefix" = "xNONE" ; then
    ONYX="/usr/local/bin/onyx-$onyx_version"
  else
    ONYX="$prefix/bin/onyx-$onyx_version"
  fi
  AC_SUBST(ONYX)
  TONYX="$abs_objroot/bin/onyx/bin/tonyx"
fi
AC_SUBST(TONYX)

AC_SUBST(enable_onyx)
if test "x$enable_onyx" = "x1" ; then
  cfgoutputs="$cfgoutputs bin/onyx/src/batch.nx bin/onyx/src/interactive.nx"
  AC_DEFINE(CW_USE_ONYX)
fi

dnl Build slate by default.
AC_ARG_ENABLE(slate, [  --disable-slate         Do not build slate],
if test "x$enable_slate" = "xno" ; then
  enable_slate="0"
else
  enable_slate="1"
fi
,
enable_slate="1"
)

if echo "<Version = slate>" | grep Version >/dev/null ; then
  slate_version=devel
else
  slate_version="<Version = slate>"
fi
AC_SUBST(slate_version)

if test "x$enable_slate" = "x1" ; then
  if test "x$enable_threads" = "x0" -o "x$enable_real" = "x0" \
     -o "x$enable_posix" = "x0" -o "x$enable_posix_file" = "x0" \
     -o "x$enable_modules" = "x0" ; then
    AC_MSG_RESULT(Missing features or configuration options necessary for slate)
    enable_slate=0
  else
    CW_BUILD_MOD(modslate, enable_slate)
    if test "x$enable_slate" = "x1" ; then
      cfgoutputs="$cfgoutputs bin/slate/src/slate.nx.in"
      AC_DEFINE(CW_USE_SLATE)
      MODSLATE_CPPFLAGS="$LIBPCRE_CPPFLAGS"
      MODSLATE_LDFLAGS="$LIBPCRE_CPPFLAGS"
      AC_SUBST(MODSLATE_CPPFLAGS)
      AC_SUBST(MODSLATE_LDFLAGS)
    fi
  fi
fi
AC_SUBST(enable_slate)

dnl Disable rules that do automatic regeneration of configure output by default.
AC_ARG_ENABLE(autogen, [  --enable-autogen        Automatically regenerate configure output],
if test "x$enable_autogen" = "xno" ; then
  enable_autogen="0"
else
  enable_autogen="1"
fi
,
enable_autogen="0"
)
AC_SUBST(enable_autogen)

dnl Do not compile with debugging by default.
AC_ARG_ENABLE(debug, [  --enable-debug          Build debugging code],
if test "x$enable_debug" = "xno" ; then
  enable_debug="0"
else
  enable_debug="1"
fi
,
enable_debug="0"
)
if test "x$enable_debug" = "x1" ; then
  AC_DEFINE(CW_DBG)
  AC_DEFINE(CW_ASSERT)
fi

dnl Only optimize if not debugging.
if test "x$enable_debug" = "x0" -a "x$no_CFLAGS" = "xyes" ; then
  CFLAGS="$CFLAGS -O"
fi

dnl Look for libraries.
if test "x$enable_onyx" = "x1" ; then
  CW_BUILD_LIB(libonyx, lib_onyx)
fi

dnl Look for modules.
if test "x$enable_modules" = "xyes" ; then
  dnl modpcre.
  if test "x$enable_posix" = "x1" ; then
    AC_ARG_ENABLE(modpcre, [  --disable-modpcre       Do not use modpcre],
    if test "x$enable_modpcre" = "xno" ; then
      enable_modpcre="0"
    else
      enable_modpcre="1"
    fi
    ,
    enable_modpcre="1"
    )
    if test "x$enable_modpcre" = "x1" -a "x$have_libpcre" = "x1" ; then
      MODPCRE_CPPFLAGS="$LIBPCRE_CPPFLAGS"
      MODPCRE_LDFLAGS="$LIBPCRE_LDFLAGS"
      AC_SUBST(MODPCRE_CPPFLAGS)
      AC_SUBST(MODPCRE_LDFLAGS)
      CW_BUILD_MOD(modpcre, enable_modpcre)
    else
      enable_modpcre="0"
    fi
    if test "x$enable_modpcre" = "x1" ; then
      AC_DEFINE(CW_USE_MODPCRE)
    fi
  else
    enable_modpcre="0"
  fi
else
  enable_modpcre="0"
fi
AC_SUBST(enable_modpcre)

if test "x$enable_modules" = "xyes" ; then
  dnl modprompt.
  if test "x$enable_posix" = "x1" ; then
    AC_ARG_WITH(libedit-prefix, [  --with-libedit-prefix   Prefix for libedit],
    if test "x$with_libedit_prefix" = "xno" ; then
      LIBEDIT_PREFIX=
    else
      LIBEDIT_PREFIX="$with_libedit_prefix"
    fi
    ,
    LIBEDIT_PREFIX=
    )
    if test "x$LIBEDIT_PREFIX" != "x" ; then
      LIBEDIT_CPPFLAGS="-I$LIBEDIT_PREFIX/include"
      LIBEDIT_LDFLAGS="-L$LIBEDIT_PREFIX/lib"
    else
      LIBEDIT_CPPFLAGS=
      LIBEDIT_LDFLAGS=
    fi
    AC_SUBST(LIBEDIT_PREFIX)
    AC_SUBST(LIBEDIT_LDFLAGS)
    AC_SUBST(LIBEDIT_CPPFLAGS)

    AC_ARG_ENABLE(modprompt, [  --disable-modprompt     Do not use modprompt],
    if test "x$enable_modprompt" = "xno" ; then
      enable_modprompt="0"
    else
      enable_modprompt="1"
    fi
    ,
    enable_modprompt="1"
    )
    if test "x$enable_modprompt" = "x1" ; then
      MODPROMPT_CPPFLAGS=

      TEMP_CPPFLAGS="$CPPFLAGS"
      CPPFLAGS="$LIBEDIT_CPPFLAGS $CPPFLAGS"
      AC_CHECK_HEADERS(histedit.h, , enable_modprompt="0")
      dnl Check if this version of libedit is known to be compatible.
      LIBEDIT_MAJOR_MIN=`echo $LIBEDIT_VERSION_MIN | tr . " " | awk '{print $1}'`
      LIBEDIT_MINOR_MIN=`echo $LIBEDIT_VERSION_MIN | tr . " " | awk '{print $2}'`
      AC_MSG_CHECKING(for libedit >= $LIBEDIT_MAJOR_MIN.$LIBEDIT_MINOR_MIN)
      AC_EGREP_CPP(bad_libedit,
[#include <histedit.h>
#if (defined(LIBEDIT_MAJOR) && defined(LIBEDIT_MINOR))
#if (LIBEDIT_MAJOR > $LIBEDIT_MAJOR_MIN || LIBEDIT_MAJOR == $LIBEDIT_MAJOR_MIN && LIBEDIT_MINOR >= $LIBEDIT_MINOR_MIN)
  good_libedit
#else
  bad_libedit
#endif
#else
  unknown_libedit
#endif
], [enable_modprompt="0" ; AC_MSG_RESULT(Obsolete libedit found)], \
        AC_EGREP_CPP(unknown_libedit,
[#include <histedit.h>
#if (defined(LIBEDIT_MAJOR) && defined(LIBEDIT_MINOR))
#if (LIBEDIT_MAJOR > $LIBEDIT_MAJOR_MIN || LIBEDIT_MAJOR == $LIBEDIT_MAJOR_MIN && LIBEDIT_MINOR >= $LIBEDIT_MINOR_MIN)
  good_libedit
#else
  bad_libedit
#endif
#else
  unknown_libedit
#endif
], AC_MSG_RESULT(Unknown libedit; modprompt build may fail), \
   AC_MSG_RESULT(yes)))
      CPPFLAGS="$TEMP_CPPFLAGS"

      TEMP_LIBS="$LIBS"
      LIBS="$LIBEDIT_LDFLAGS $LIBS"
      AC_CHECK_LIB(termcap, tgetent, MODPROMPT_LDFLAGS="-ltermcap", \
        AC_CHECK_LIB(tinfo, tgetent, MODPROMPT_LDFLAGS="-ltinfo", \
          AC_CHECK_LIB(curses, tgetent, MODPROMPT_LDFLAGS="-lcurses", \
            AC_CHECK_LIB(ncurses, tgetent, MODPROMPT_LDFLAGS="-lncurses"))), \
        enable_modprompt="0")
      LIBS="$LIBS $MODPROMPT_LDFLAGS"
      AC_CHECK_LIB(edit, el_init, \
        MODPROMPT_LDFLAGS="$MODPROMPT_LDFLAGS -ledit", enable_modprompt="0")
      LIBS="$TEMP_LIBS"
      AC_SUBST(MODPROMPT_CPPFLAGS)
      AC_SUBST(MODPROMPT_LDFLAGS)
      if test "x$enable_modprompt" = "x1" ; then
        CW_BUILD_MOD(modprompt, enable_modprompt)
      fi
    fi
    if test "x$enable_modprompt" = "x1" ; then
      AC_DEFINE(CW_USE_MODPROMPT)
    fi
  else
    enable_modprompt="0"
  fi
else
  enable_modprompt="0"
fi
AC_SUBST(enable_modprompt)

dnl Look for binaries.
if test "x$enable_onyx" = "x1" ; then
  CW_BUILD_BIN(onyx, bin_onyx)
fi
if test "x$enable_slate" = "x1" ; then
  CW_BUILD_BIN(slate, bin_slate)
fi

AC_SUBST(bins)
AC_SUBST(mods)
AC_SUBST(libs)
AC_SUBST(docs)

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PATH_PROG(AR, ar, , $PATH)
AC_PATH_PROG(LD, ld, , $PATH)
AC_PATH_PROG(PERL, perl, , $PATH)
AC_PATH_PROG(ACLOCAL, aclocal, , $PATH)
AC_PATH_PROG(AUTOCONF, , autoconf, , $PATH)
AC_PATH_PROG(AUTOHEADER, , autoheader, , $PATH)

dnl Do not build documentaion by default; instead use the prebuilt
dnl documentation.
AC_ARG_WITH(docs, [  --with-docs             Build documentation],
if test "x$with_docs" = "xno" ; then
  with_docs="0"
else
  with_docs="1"
fi
,
with_docs="0"
)
if test "x$with_docs" = "x1" ; then
  AC_PATH_PROG(LATEX, latex, , $PATH)
  AC_PATH_PROG(PDFLATEX, pdflatex, , $PATH)
  AC_PATH_PROG(DVIPS, dvips, , $PATH)
  AC_PATH_PROG(FIG2DEV, fig2dev, , $PATH)
  AC_PATH_PROG(LATEX2HTML, latex2html, , $PATH)
  AC_PATH_PROG(MAKEINDEX, makeindex, , $PATH)

  if test "x$LATEX" = "x" -o "x$PDFLATEX" = "x" -o "x$DVIPS" = "x" \
     -o "x$FIG2DEV" = "x" -o "x$LATEX2HTML" = "x" -o "x$MAKEINDEX" = "x" ; then
    AC_MSG_ERROR(Missing one or more programs necessary for documentation build)
  fi
fi
AC_SUBST(with_docs)
dnl Include rules for building/installing documents, if the docs are included.
dnl These tests are orthogonal to the tests above.
CW_BUILD_DOC(onyx, doc_onyx)
CW_BUILD_DOC(slate, doc_slate)

VERIFY="$objroot/test/verify"
AC_SUBST(VERIFY)

dnl Find libraries.

dnl Define preprocessor macros.

dnl Check for header files.
if test "x$enable_posix_file" = "x1" ; then
  dnl Make sure that poll() and/or select() is available.
  can_poll=0
  AC_CHECK_FUNCS(poll select, can_poll=1)
  if test "x$can_poll" = "x0" ; then
    AC_MSG_ERROR(Cannot build without poll() or select())
  fi

  AC_CHECK_FUNCS(readdir_r)
fi
if test "x$enable_posix" = "x1" ; then
  AC_CHECK_HEADERS(unistd.h, , AC_MSG_ERROR(Cannot build without unistd.h))
fi

dnl Check for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN

dnl 
dnl libonyx configuration.
dnl 
if test "x$lib_onyx" = "x1" ; then
  AC_CHECK_SIZEOF(signed char, 1)
  AC_CHECK_SIZEOF(unsigned char, 1)
  AC_CHECK_SIZEOF(signed short, 2)
  AC_CHECK_SIZEOF(unsigned short, 2)
  AC_CHECK_SIZEOF(int, 4) dnl defines SIZEOF_INT
  AC_CHECK_SIZEOF(unsigned, 4)
  AC_CHECK_SIZEOF(long, 4)
  AC_CHECK_SIZEOF(unsigned long, 4)
  AC_CHECK_SIZEOF(long long, 4)
  AC_CHECK_SIZEOF(unsigned long long, 4)
  AC_CHECK_SIZEOF(int *, 4) dnl defines SIZEOF_INT_P
  AC_CHECK_SIZEOF(float, 4)
  AC_CHECK_SIZEOF(double, 8)
  AC_CHECK_SIZEOF(long double, 12)

  AC_CHECK_HEADERS(sys/socket.h netinet/in.h arpa/inet.h machine/endian.h)

  if test "x$enable_posix" = "x1" ; then
    if test "x$prefix" = "xNONE" ; then
      rpath_post="\`/usr/local/share/onyx-$onyx_version/nx'"
      mpath_post="\`/usr/local/share/onyx-$onyx_version/nxm'"
    else
      rpath_post="\`$prefix/share/onyx-$onyx_version/nx'"
      mpath_post="\`$prefix/share/onyx-$onyx_version/nxm'"
    fi
    AC_SUBST(rpath_post)
    AC_SUBST(mpath_post)

    dnl Try to figure out which field of struct dirent contains the entry string
    dnl length.
    AC_MSG_CHECKING(for (struct dirent).d_namlen)
    AC_TRY_LINK([
#include <sys/types.h>
#include <dirent.h>
], [
    struct dirent ent;

    ent.d_namlen = 0;
], AC_MSG_RESULT(yes)
   AC_DEFINE(CW_HAVE_DIRENT_NAMLEN),
   AC_MSG_RESULT(no))

    dnl Look for nanosecond resolution of atime in struct stat.
    AC_MSG_CHECKING(for (struct stat).st_atimespec)
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
], [
    struct stat st;

    st.st_atimespec.tv_nsec = 0;
], AC_MSG_RESULT(yes)
   AC_DEFINE(CW_LIBONYX_USE_STAT_ATIMESPEC),
   AC_MSG_RESULT(no))

    dnl Look for nanosecond resolution of mtime in struct stat.
    AC_MSG_CHECKING(for (struct stat).st_mtimespec)
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
], [
    struct stat st;

    st.st_mtimespec.tv_nsec = 0;
], AC_MSG_RESULT(yes)
   AC_DEFINE(CW_LIBONYX_USE_STAT_MTIMESPEC),
   AC_MSG_RESULT(no))

    dnl Look for nanosecond resolution of ctime in struct stat.
    AC_MSG_CHECKING(for (struct stat).st_ctimespec)
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
], [
    struct stat st;

    st.st_ctimespec.tv_nsec = 0;
], AC_MSG_RESULT(yes)
   AC_DEFINE(CW_LIBONYX_USE_STAT_CTIMESPEC),
   AC_MSG_RESULT(no))

    AC_CHECK_FUNCS(unsetenv)
  fi
fi

dnl 
dnl onyx configuration.
dnl 
if test "x$bin_onyx" = "x1" ; then
  AC_DEFINE_UNQUOTED(CW_TONYX_ONYX, "$abs_objroot/bin/onyx/bin/onyx")

  tmpath=ONYX_MPATH=
  trpath=ONYX_RPATH=
  for i in $mods ; do
    tmpath=$tmpath:$abs_objroot/mod/$i/nxm
    trpath=$trpath:$abs_objroot/mod/$i/nx
  done
  dnl XXX Leading ":" should be removed.
  AC_DEFINE_UNQUOTED(CW_TONYX_RPATH, "$trpath")
  AC_DEFINE_UNQUOTED(CW_TONYX_MPATH, "$tmpath")
fi

dnl 
dnl slate configuration.
dnl 
if test "x$bin_slate" = "x1" ; then
  AC_DEFINE_UNQUOTED(CW_TSLATE_SLATE, "$abs_objroot/bin/slate/bin/slate")

  if test "x$prefix" = "xNONE" ; then
    slate_rpath_post="\`/usr/local/share/slate-$slate_version/nx'"
    slate_mpath_post="\`/usr/local/share/slate-$slate_version/nxm'"
  else
    slate_rpath_post="\`$prefix/share/slate-$slate_version/nx'"
    slate_mpath_post="\`$prefix/share/slate-$slate_version/nxm'"
  fi
  AC_SUBST(slate_rpath_post)
  AC_SUBST(slate_mpath_post)

  tmpath=SLATE_MPATH=
  trpath=SLATE_RPATH=
  for i in $mods ; do
    tmpath=$tmpath:$abs_objroot/mod/$i/nxm
    trpath=$trpath:$abs_objroot/mod/$i/nx
  done
  dnl XXX Leading ":" should be removed.
  AC_DEFINE_UNQUOTED(CW_TSLATE_RPATH, "$trpath")
  AC_DEFINE_UNQUOTED(CW_TSLATE_MPATH, "$tmpath")
fi

dnl Process .in files.
AC_SUBST(cfghdrs)
AC_CONFIG_HEADER($cfghdrs)

dnl verify is handled separately, since it must be executable.
AC_CONFIG_FILES($cfgoutputs, chmod +x $objroot/test/verify)
AC_CONFIG_FILES(test/verify, chmod +x test/verify)
cfgoutputs="$cfgoutputs test/verify"
AC_SUBST(cfgoutputs)
AC_OUTPUT

dnl 
dnl Print out the results of configuration.
dnl 
AC_MSG_RESULT(===============================================================================)
if test "x$bin_onyx" = "x1" ; then
AC_MSG_RESULT(Onyx version  : $onyx_version)
fi
if test "x$bin_slate" = "x1" ; then
AC_MSG_RESULT(Slate version : $slate_version)
fi
AC_MSG_RESULT()
AC_MSG_RESULT(CFLAGS        : ${CFLAGS})
AC_MSG_RESULT(CPPFLAGS      : ${CPPFLAGS})
AC_MSG_RESULT(LDFLAGS       : ${LDFLAGS})
AC_MSG_RESULT(LIBS          : ${LIBS})
AC_MSG_RESULT()
AC_MSG_RESULT(srcroot       : ${srcroot})
AC_MSG_RESULT(abs_srcroot   : ${abs_srcroot})
AC_MSG_RESULT(objroot       : ${objroot})
AC_MSG_RESULT(abs_objroot   : ${abs_objroot})
AC_MSG_RESULT(prefix        : ${prefix})
AC_MSG_RESULT()
AC_MSG_RESULT(libs          :${libs})
AC_MSG_RESULT(mods          :${mods})
AC_MSG_RESULT(bins          :${bins})
AC_MSG_RESULT(docs          :${docs})
AC_MSG_RESULT()
AC_MSG_RESULT(threads       : ${enable_threads})
AC_MSG_RESULT(real          : ${enable_real})
AC_MSG_RESULT(posix         : ${enable_posix})
AC_MSG_RESULT(posix-file    : ${enable_posix_file})
AC_MSG_RESULT(inlines       : ${enable_inlines})
AC_MSG_RESULT(libonyx       : ${enable_libonyx})
AC_MSG_RESULT(autogen       : ${enable_autogen})
AC_MSG_RESULT(debug         : ${enable_debug})
AC_MSG_RESULT(docs          : ${with_docs})
AC_MSG_RESULT(===============================================================================)
