################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
# Usage: nx_thread_gen.nx [<options>]
#
#   Option: -B : Not bootstrapping.
#           -b : Bootstrapping.
#           -C : Do not compact.
#           -c : Compact.
#
# Read onyx code from stdin and output a compacted version to stdout.  The
# output code defines the C function nxo_p_thread_nxcode().
#
# This program is run by the 'bootstrap' build system target.
#
################################################################################

# Parse the command line.
$opt_bootstrap false def
$opt_compact true def

$opt_dict <
    `-B' {
	$opt_bootstrap false def
    }
    `-b' {
	$opt_bootstrap true def
    }
    `-C' {
	$opt_compact false def
    }
    `-c' {
	$opt_compact true def
    }
> def

argv length 1 gt {
    argv 1 over length dec getinterval {
	opt_dict over known {
	    opt_dict exch get eval
	}{
	    # Unknown option.
	    `nx_gen.nx: Unknown option '
	    exch 1 sprints cat
	    `\n' cat

	    stderr exch write pop
	    1 die
	} ifelse
    } foreach
}{
    $opt_bootstrap false def
} ifelse

# Output the header.
`/* -*- mode: c ; c-file-style: "canonware-c-style" -*-
 * This file is automatically generated.
 ******************************************************************************
 *
 * <Copyright = jasone>
 * <License>
 *
 ******************************************************************************
 *
 * Version: Onyx <Version = onyx>
 *
 ******************************************************************************/

#include "libonyx/libonyx.h"

void
nxo_p_thread_nxcode(cw_nxo_t *a_thread)
{
    cw_onyx_code(a_thread, "' print

# Read in the code.
stdin cvx eval

# Output the procedure, using a recursion depth large enough to meet or exceed
# the depth of nested braces in the code.
1000 sprints print

# Output the footer.
`eval");
}
' print
