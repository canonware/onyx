################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
# This file is processed by nxo_thread_gen.nx to produce a more compact
# embedded version in nxo_thread_nxcode.c (normal build) and
# nxo_thread_bootstrap.c (development bootstrap).  In order to make changes to
# this file take effect in the bootstrap interpreter, either type:
#
#   cook bootstrap
#
# or
#
#   cat nxo_thread.nx | onyx nxo_thread_gen.nx > nxo_thread_boostrap.c
#
# The end result of executing this file is a procedure (executable array).  In
# order to support output that differs according to configuration options, a
# string is constructed, then evaluated.
#
# The output of running sprints on the procedure must be evaluable, which
# means that certain language features such as immediate evaluation must be
# avoided.
#
################################################################################

# Initial string with an opening brace to defer execution, to which other
# strings are catenated.
`{'

`
# userdict does not exist yet.  This code pushes it onto dstack, then defines it
# in threaddict.
dict begin
$userdict currentdict
dstack dup sbdup dup spop begin pop
$threaddict currentdict def
def

# Define and initialize currenterror.
$currenterror <
    $newerror	false
    $errorname	`'
    $estack	stack
    $istack	stack
    $ostack	stack
    $dstack	stack
' cat
@enable_oop@ 1 eq opt_bootstrap not and {
    `
    $cstack	stack
    ' cat
} if
`
    $origin	null
    $line	1
    $column	0
> def

# Define and initialize errordict.
$errordict <
    $stop $stop load

    # - handleerror -
    $handleerror {
	!currenterror begin

	# If this is a syntaxerror, print the line and column numbers.
	!errorname $syntaxerror eq {
	    `At '
	    !origin null ne {
		!origin
		`:'
		3 ncat
	    } if
	    !line cvs
	    `:'
	    !column cvs
	    `: '
	    5 ncat
	    
	    {stderr exch write}{} until
	} if

	# Print the errorname.
	`Error ' {stderr exch write}{} until
	!errorname 1 sprints {stderr exch write}{} until

	# Print ostack using sprint.
	`\nostack: ' {stderr exch write}{} until
	!ostack 1 sprints {stderr exch write}{} until
	# Print dstack using sprint.
	`\ndstack: ' {stderr exch write}{} until
	!dstack 1 sprints {stderr exch write}{} until
' cat
@enable_oop@ 1 eq opt_bootstrap not and {
    `
	# Print cstack using sprint.
	`\ncstack: ' {stderr exch write}{} until
	!cstack 1 sprints {stderr exch write}{} until
    ' cat
} if
`
	`\n' {stderr exch write}{} until

	# Print a stack trace that depicts the currently executing element of
	# arrays.
	!estack scount 1 sub dup 0 gt {
	    `estack/istack trace (0..' {stderr exch write}{} until
	    dup cvs {stderr exch write}{} until
	    `):\n' {stderr exch write}{} until
	} if

	# For each element in estack:
	0 1 dn {
	    #edepth
	    # If this element is an array, print it specially.
	    dup cvs {stderr exch write}{} until
	    dup !estack dup dn sidup spop
	    #edepth #array

	    dup type $arraytype eq {
		# Array.
		dup origin {
		    # Print origin of array.
		    `:' up
		    `:' exch
		    cvs
		    4 ncat

		    {stderr exch write}{} until
		} if
		`: {\n' {stderr exch write}{} until
		#edepth #array
		dup length 1 sub 0 1 dn {
		    #edepth #array #aindex
		    2 idup !istack
		    dup dn sidup spop
		    #edepth #array #aindex #iindex
		    over
		    #edepth #array #aindex #iindex #aindex
		    eq {
			dup <$w 3> outputs
			{stderr exch write}{} until
			`:--> '
		    }{
			`\t'
		    } ifelse
		    {stderr exch write}{} until
		    #edepth #array #aindex
		    over exch get 1 sprints
		    {stderr exch write}{} until
		    `\n' {stderr exch write}{} until
		    #edepth #array
		} for
		`}\n' {stderr exch write}{} until
		#edepth #array
		pop
		#edepth
	    }{
		# Non-array.
		`:\t' {stderr exch write}{} until
		#edepth #array
		1 sprints {stderr exch write}{} until
		`\n' {stderr exch write}{} until
		#edepth
	    } ifelse
	    #edepth
	    pop
	} for

	end # currenterror.

	# Make sure the output gets written before stop.
	flush
    } bind
> def

end # threaddict.
' cat

# Final closing brace.
`}' cat cvx eval
