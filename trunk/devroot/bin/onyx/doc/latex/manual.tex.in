%-*-mode:latex-*-
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% <Copyright = jasone>
% <License>
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Version: Onyx <Version = onyx>
%
% Onyx portion of Onyx Manual.
%              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\clearemptydoublepage
\chapter{The onyx program}
\label{onyxprog}

\binname{onyx} is a stand-alone Onyx interpreter, with an integrated command
line editor.  The Onyx language is documented in a separate
\htmlref{chapter}{onyxlang}, so this chapter documents only the differences from
the main Onyx language documentation.

\section{Usage}
\binname{onyx} -h

\binname{onyx} -V

\binname{onyx} -e {\lt}expr{\gt}

\binname{onyx} [-i {\lt}init{\gt}]*

\binname{onyx} {\lt}file{\gt} [{\lt}args{\gt}]

\subsection{Options}
\begin{description}
\item[-h: ] Display usage information and exit.
\item[-V: ] Display the version number and exit.
\item[-e {\lt}expr{\gt}: ] Execute {\lt}expr{\gt} as Onyx code.
\item[-i {\lt}file{\gt}: ] Execute initialization {\lt}file{\gt}.
\end{description}

\section{Environment variables}
\begin{description}
\item[ONYX\_EDITOR: ] By default, the command line editor uses emacs key
bindings.  Use this variable to explicitly set the key bindings to either
``emacs'' or ``vi''.
\item[ONYXRC: ] If this variable is set to the name of a file, that file will be
executed as part of the initialization of interactive onyx sessions.  A typical
setting for this would be ``{\twid}/.onyxrc''.
\end{description}

\section{Language differences}
\label{sec:onyx_lang_diffs}
If \binname{onyx} is being run interactively:
\begin{itemize}
\label{onyx_interactive:stop}
\index{stop@\onyxop{}{stop}{}}
\item{The name ``stop'' is redefined in the initial thread's errordict to
recursively execute the stdin file in a stopped context in order to keep the
interpreter from exiting on error.  It is possible (though generally unlikely,
since the user must type a very long line of code) for buffering of stdin to
cause strange things to occur; any additional program execution after an error
is a result of this.}
\label{onyx_interactive:resume}
\index{resume@\onyxop{}{resume}{}}
\item{The name ``resume'' is defined in the initial thread's threaddict as an
alias to the stop operator.  Thus, when an error occurs, when the user is ready
to continue running after addressing any issues the error caused, resume can be
called as a more intuitive name for resuming.}
\label{onyx_interactive:promptstring}
\index{promptstring@\onyxop{}{promptstring}{}}
\item{The name ``promptstring'' is defined in systemdict; it takes no arguments
and returns a string.  The return string is used as the interactive prompt.}
\end{itemize}

If \binname{onyx} is being run non-interactively:
\begin{itemize}
\label{onyx_batch:stop}
\index{stop@\onyxop{}{stop}{}}
\item{The name ``stop'' in errordict is redefined to call the die operator
with an argument of 1.}
\end{itemize}
