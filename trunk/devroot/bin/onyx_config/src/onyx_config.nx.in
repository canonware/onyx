################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
# This file is processed by [o]onyx_config_gen.nx to create [o]onyx_config.
#
################################################################################

`\
# This file is automatically generated.
################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
# Script that provides the build flags to use with libonyx.
#
################################################################################

# Define usage string.
#
# - usage_string #string
$usage_string
`\
Usage: onyx_config [--help] [--version] [--features]\n\
                   [--prefix] [--onyx-path]\n\
                   [--cppflags] [--cflags] [--ldflags] [--libs]\n'
def

# Print usage to stderr.
#
# - usage -
$usage {
    stderr
    usage_string
    write pop
} def

# Print a string, after stripping off leading, trailing, and extra internal
# whitespace.
#
#string strip_print -
'
@enable_regex@ 1 eq {
    `\
    $strip_print {
	`^\s*(\S.*\S)\s*$' `\1' <$s true> subst pop
	`\s+' ` ' <$s true> subst pop
	print
    } def
' cat
}{
    `\
    $strip_print $print load def
' cat
} ifelse
`

# Dictionary of procedures associated with command line flags.
$flags <
    `--help' {
	usage_string print flush
	0 die
    }
    `--prefix' {
	`@prefix@' strip_print
    }
' cat
opt_dstdir {
    `\
    `--onyx-path' {
	`@BINDIR@/onyx-@onyx_version@' strip_print
    }
' cat
}{
    `\
    `--onyx-path' {
	`@abs_objroot@/bin/onyx/bin/oonyx' strip_print
    }
' cat
} ifelse
`\
    `--version' {
	`Canonware Onyx, version <Version = onyx>.' strip_print
    }
    `--features' {
	mark # Use for counting number of feature strings on stack.
' cat
@enable_oop@ 1 eq {
    `\
	    ` oop'
' cat
} if
@enable_handle@ 1 eq {
    `\
	    ` handle'
' cat
} if
@enable_threads@ 1 eq {
    `\
	    ` threads'
' cat
} if
@enable_real@ 1 eq {
    `\
	    ` real'
' cat
} if
@enable_regex@ 1 eq {
    `\
	    ` regex'
' cat
} if
@enable_posix@ 1 eq {
    `\
	    ` posix'
' cat
} if
@enable_posix_file@ 1 eq {
    `\
	    ` posix_file'
' cat
} if
@enable_socket@ 1 eq {
    `\
	    ` socket'
' cat
} if
@enable_modules@ 1 eq {
    `\
	    ` modules'
' cat
} if
@enable_inlines@ 1 eq {
    `\
	    ` inlines'
' cat
} if
@enable_debug@ 1 eq {
    `\
	    ` debug'
' cat
} if
`\
	counttomark dup 0 gt {
	    ncat strip_print
	} if
	pop # Remove mark.
    }
' cat
opt_dstdir {
    `\
    `--cppflags' {
	`@CPPFLAGS@'
' cat
@enable_regex@ 1 eq {
    `@CPPFLAGS' `-I@prefix@/include\\b' match not {
	`\
	`-I@prefix@/include ' exch cat
' cat
    } if
}{
    `\
	`-I@prefix@/include ' exch cat
' cat
} ifelse
`\
	strip_print
    }
' cat
}{
    `\
    `--cppflags' {
	`@CPPFLAGS@'
' cat
@enable_regex@ 1 eq {
    `@CPPFLAGS@' `-I@abs_srcroot@/lib/libonyx/include' match {
	`\
	`-I@abs_srcroot@/lib/libonyx/include ' exch cat
' cat
    } unless
    `@CPPFLAGS@' `-I@abs_objroot@/lib/libonyx/include' match not
    `@abs_srcroot@' `@abs_objroot@' ne
    and {
	`\
	`-I@abs_objroot@/lib/libonyx/include ' exch cat
' cat
    } if
    `@CPPFLAGS@' `-I@abs_objroot@/lib/libonyx/include/libonyx' match {
	`\
	`-I@abs_objroot@/lib/libonyx/include/libonyx ' exch cat
' cat
    } unless
}{
    `\
	`-I@abs_srcroot@/lib/libonyx/include ' exch cat
	`-I@abs_objroot@/lib/libonyx/include ' exch cat
' cat
} ifelse
`\
	strip_print
    }
' cat
} ifelse
`\
    `--cflags' {
	`@CFLAGS@' strip_print
    }
' cat
opt_dstdir {
    `\
    `--ldflags' {
	`@LDFLAGS@'
' cat
@enable_regex@ 1 eq {
    `@LDFLAGS@' `-L@prefix@/lib\\b' match not {
	`\
	`-L@prefix@/lib ' exch cat
' cat
    } if
}{
    `\
	`-L@prefix@/lib ' exch cat
' cat
} ifelse
`@RPATH@' length 0 gt {
    `\
	`@RPATH@@LIBDIR@ ' exch cat
' cat
} if
`\
	strip_print
    }
' cat
}{
    `\
    `--ldflags' {
	`@LDFLAGS@'
' cat
@enable_regex@ 1 eq {
    dup `-L@abs_objroot@/lib/libonyx/lib\\b' match not {
	`\
	`-L@abs_objroot@/lib/libonyx/lib ' exch cat
' cat
    } if
}{
    `\
	`-L@abs_objroot@/lib/libonyx/lib ' exch cat
' cat
} ifelse
`@RPATH@' length 0 gt {
    `\
	`@RPATH@@abs_objroot@/lib/libonyx/lib ' exch cat
' cat
} if
`\
	strip_print
    }
' cat
} ifelse
opt_dstdir {
    `\
    `--libs' {
	`-lonyx @LIBS@' strip_print
    }
' cat
}{
    `\
    `--libs' {
	`-loonyx @LIBS@' strip_print
    }
' cat
} ifelse
`\
> def

# Make sure at least one argument was specified.
argv length 2 lt {
    # No arguments specified.
    usage
    1 die
} if

# Iteratively process command line arguments.
argv dup length dec 1 exch getinterval
0 1 2 idup length dec {
    #args #index
    dup 0 gt {
	# Print a spacer between iterations.
	` ' print
    } if
    under get
    #args #arg
    flags over known {
	# Call procedure associated with flag.
	flags exch get eval
    }{
	# Unknown flag.
	usage
	1 die
    } ifelse
} for

# Finish up with a newline.
`\n' print
' cat
