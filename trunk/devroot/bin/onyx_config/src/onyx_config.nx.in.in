# -*- mode: onyx -*-
################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
# Script that provides the build flags to use with libonyx.
#
################################################################################

# Define usage string.
#
# - usage_string #string
$usage_string
`\
Usage: onyx_config [--help] [--version] [--features] [--prefix]\n\
                   [--cppflags] [--cflags] [--ldflags] [--libs]\n'
def

# Print usage to stderr.
#
# - usage -
$usage {
    stderr
    usage_string
    write pop
} def

# Print a string, after stripping off leading, trailing, and extra internal
# whitespace.
#
#string strip_print -
@enable_regex@ 1 eq {
    $strip_print {
	`^\s*(\S.*\S)\s*$' `\1' <$s true> subst pop
	`\s+' ` ' <$s true> subst pop
	print
    } def
}{
    $strip_print $print load def
} ifelse

# Dictionary of procedures associated with command line flags.
$flags <
    `--help' {
	usage_string print flush
	0 die
    }
    `--prefix' {
	`@prefix@' strip_print
    }
    `--version' {
	`Canonware Onyx, version <Version = onyx>.' strip_print
    }
    `--features' {
	mark # Use for counting number of feature strings on stack.
	@enable_threads@ 1 eq {
	    ` threads'
	} if
	@enable_real@ 1 eq {
	    ` real'
	} if
	@enable_regex@ 1 eq {
	    ` regex'
	} if
	@enable_posix@ 1 eq {
	    ` posix'
	} if
	@enable_posix_file@ 1 eq {
	    ` posix_file'
	} if
	@enable_socket@ 1 eq {
	    ` socket'
	} if
	@enable_modprompt@ 1 eq {
	    ` modprompt'
	} if
	@enable_inlines@ 1 eq {
	    ` inlines'
	} if
	@enable_debug@ 1 eq {
	    ` debug'
	} if
	counttomark dup 0 gt {
	    ncat strip_print
	} if
	pop # Remove mark.
    }
    `--cppflags' {
	`@CPPFLAGS@'
	@enable_regex@ 1 eq {
	    dup `-I@prefix@/include\\b' match not {
		`-I@prefix@/include ' exch cat
	    } if
	}{
	    `-I@prefix@/include ' exch cat
	} ifelse
	strip_print
    }
    `--cflags' {
	`@CFLAGS@' strip_print
    }
    `--ldflags' {
	`@LDFLAGS@'
	@enable_regex@ 1 eq {
	    dup `-L@prefix@/lib\\b' match not {
		`-L@prefix@/lib ' exch cat
	    } if
	}{
	    `-L@prefix@/lib ' exch cat
	} ifelse
	strip_print
    }
    `--libs' {
	`-lonyx @LIBS@' strip_print
    }
> def

# Make sure at least one argument was specified.
argv length 2 lt {
    # No arguments specified.
    usage
    1 die
} if

# Iteratively process command line arguments.
argv dup length dec 1 exch getinterval
0 1 2 idup length dec {
    #args #index
    dup 0 gt {
	# Print a spacer between iterations.
	` ' print
    } if
    under get
    #args #arg
    flags over known {
	# Call procedure associated with flag.
	flags exch get eval
    }{
	# Unknown flag.
	usage
	1 die
    } ifelse
} for

# Finish up with a newline.
`\n' print
