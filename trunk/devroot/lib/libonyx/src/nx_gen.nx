################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
# Read onyx code from stdin and output a compacted version to stdout.  The
# output code defines the C function nx_p_nxcode().
#
# This program is run by the 'bootstrap' build system target.
#
################################################################################

# Create an encoding dictionary for various operators.  The values must not
# correspond to an existing name in dstack.
$_encdict <
	$begin		$/	# 4
	$cat		$a	# 19
	$cvx		$b	# 13
	$def		$c	# ~21
	$dup		$d	# ~37
	$eval		$e	# 14
	$exch		$f	# ~57
	$false		$g	# 5
	$flush		$h	# 3
	$getinterval	$i	# 4
	$ifelse		$j	# 20
	$idup		$k	# ~66
	$known		$l	# 8
	$length		$m	# 16
	$load		$n	# 9
	$ostack		$o	# 3
	$pop		$p	# ~69
	$putinterval	$q	# 3
	$scount		$r	# 3
	$spop		$s	# 7
	$stderr		$t	# 10
	$sub		$u	# 15
	$systemdict	$v	# 3
	$true		$w	# 4
	$type		$x	# >= 17
	$write		$y	# 10
	$xcheck		$z	# 3
> def

# #proc _encarr -
$_encarr {
	0 1 2 idup length 1 sub {
		# #proc #i
		1 idup 1 idup get
		# #proc #i #el
		dup type $nametype eq {
			dup xcheck {
				# Executable Name.  Try to replace.
				_encdict 1 idup known {
					_encdict exch get cvx
					# #proc #i #e
					2 idup 3 1 roll
					# #proc #proc #i #e
					put
				}{
					pop pop
				} ifelse
			}{
				pop pop
			} ifelse
		}{
		dup type $arraytype eq {
			# Array.  Recurse.
			_encarr
			pop
		}{
			# Other.  Do nothing.
			pop pop
		} ifelse
		} ifelse
		# #proc
	} for
	pop
} def

# Output the header.
`/* -*- mode: c ; c-file-style: "canonware-c-style" -*-
 * This file is automatically generated.
 ******************************************************************************
 *
 * <Copyright = jasone>
 * <License>
 *
 ******************************************************************************
 *
 * Version: Onyx <Version = onyx>
 *
 ******************************************************************************/

#include "libonyx/libonyx.h"

void
nx_p_nxcode(cw_nx_t *a_nx)
{
    cw_nxo_t thread;

    nxo_thread_new(&thread, a_nx);
    cw_onyx_code(&thread, "' print

# Output the translation dictionary.
`<' print
_encdict {
	1 sprints print
	`$' print 1 sprints print
} foreach
`>begin' print

# Read in the code.
stdin cvx eval

# We now have an array of code.  Recursively iterate through the elements of
# the array and replace executable names with their equivalents in the
# temporary shorthand dictionary.
dup _encarr

# Output the procedure, using a recursion depth large enough to meet or exceed
# the depth of nested braces in the code.
1000 sprints print
`bind eval end");
    nxo_thread_exit(&thread);
}
' print
