%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% <Copyright = jasone>
% <License>
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Version: <Version>
%
% Read onyx code from stdin and output a compacted version to stdout.  The
% output code defines the C function nx_p_nxcode().
%
% This program is run by the 'bootstrap' build system target.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Create an encoding dictionary for various operators.  The values must not
% correspond to an existing name in dstack.
/_encdict <
	/catenate	/a	% 19
	/cvx		/b	% 13
	/def		/c	% ~21
	/dup		/d	% ~37
	/eval		/e	% 14
	/exch		/f	% ~57
	/false		/g	% 5
	/flush		/h	% 3
	/getinterval	/i	% 4
	/ifelse		/j	% 20
	/index		/k	% ~57
	/known		/l	% 8
	/load		/m	% 9
	/pop		/n	% ~69
	/putinterval	/o	% 3
	/roll		/p	% 16
	/scount		/q	% 3
	/spop		/r	% 7
	/sub		/s	% 15
	/true		/t	% 4
	/type		/u	% >= 17
	/xcheck		/v	% 3
	/ostack		/w	% 3
> def

% %proc _encarr -
/_encarr {
	0 1 2 index length 1 sub {
		% %proc %i
		1 index 1 index get
		% %proc %i %el
		dup type /nametype eq {
			dup xcheck {
				% Executable Name.  Try to replace.
				_encdict 1 index known {
					_encdict exch get cvx
					% %proc %i %e
					2 index 3 1 roll
					% %proc %proc %i %e
					put
				}{
					pop pop
				} ifelse
			}{
				pop pop
			} ifelse
		}{
		dup type /arraytype eq {
			% Array.  Recurse.
			_encarr
			pop
		}{
			% Other.  Do nothing.
			pop pop
		} ifelse
		} ifelse
		% %proc
	} for
	pop
} def

% Output the header.
`/* This file is automatically generated.
 ******************************************************************************
 *
 * <Copyright = jasone>
 * <License>
 *
 ******************************************************************************
 *
 * Version: <Version>
 *
 ******************************************************************************/

#ifdef CW_USE_INLINES
CW_INLINE void
#else
static void
#endif
nx_p_nxcode(cw_nx_t *a_nx)
{
	cw_nxo_t	thread;

	nxo_thread_new(&thread, a_nx);
	cw_onyx_code(&thread, "' print

% Output the translation dictionary.
`<' print
_encdict {
	1 sprints print
	`/' print 1 sprints print
} foreach
`>begin' print

% Read in the code.
stdin cvx eval

% We now have an array of code.  Recursively iterate through the elements of
% the array and replace executable names with their equivalents in the
% temporary shorthand dictionary.
dup _encarr

% Output the procedure, using a recursion depth large enough to meet or exceed
% the depth of nested braces in the code.
1000 sprints print
`bind eval end");
	nxo_thread_exit(&thread);
}
' print
