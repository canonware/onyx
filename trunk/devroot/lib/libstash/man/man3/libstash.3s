.ig \" -*-mode:nroff-*-

<Copyright = jasone>
<License>

Version: <Version>
..
.TH libstash 3s "libstash, version <Version>"
.hy 1
.SH NAME
libstash - Library of algorithms and data structures.
.SH SYNOPSIS
cc
.I file
-lstash -lpthread
.br
cc -g -D_LIBSTASH_DEBUG
.I file
-lstash_d -lpthread
.br
cc -pg
.I file
-lstash_p -lpthread
.PP
\fB#include <libstash/libstash.h>\fR
.PP
.SS General
.I cw_bool_t
.br
.B libstash_init
.RI ( void )
.PP
.I void
.br
.B libstash_shutdown
.RI ( void )
.PP
.SS Preprocessor macros
.I void
.br
.B _cw_assert
.RI ( "<expression>" )
.PP
.I void
.br
.B _cw_check_ptr
.RI ( "void *a_ptr" )
.PP
.I void
.br
.B _cw_not_reached
.RI ( "void" )
.PP
.I void
.br
.B _cw_error
.RI ( "const char *a_str" )
.PP
.I cw_uint64_t
.br
.B _cw_ntohq
.RI ( "cw_uint64_t a_val" )
.PP
.I cw_uint64_t
.br
.B _cw_htonq
.RI ( "cw_uint64_t a_val" )
.SH DESCRIPTION
The \fBlibstash\fR library defines a number of algorithms and data structures
that are useful for many purposes.
.PP
\fBlibstash\fR is designed to run on *nix platforms, and is known to work on
FreeBSD, Linux, and Solaris.  The \fBpthreads\fR library is required for the
multi-threaded versions of \fBlibstash\fR.
.SH USAGE
Detailed usage of the various available classes is discussed in detail in other
man pages.  Regardless of what classes are used, at least the following minimal
shell of C code should be used.
.PP
.RS
.nf
#include <libstash/libstash.h>

int
main()
{
.in +8
libstash_init();

/* Do stuff. */

libstash_shutdown();
return 0;
.in -8
}
.fi
.RE
.PP
\fBlibstash_init\fR() must be called in order for things to work properly.
.PP
.I void
.br
.B libstash_init
.RI ( void )
.RS
Input(s):
.RS
None.
.RE
Output(s):
.RS
None.
.RE
Exception(s):
.RS
_CW_XEPV_OOM.
.RE
Description:
.RS
Initialize various global variables.  In particular, initialize cw_g_mem,
cw_g_dbg, and cw_g_out.
.RE
.RE
.PP
.I void
.br
.B libstash_shutdown
.RI ( void )
.RS
Input(s):
.RS
None.
.RE
Output(s):
.RS
None.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Clean up the global variables that are initialized by \fBlibstash_init\fR().
.RE
.RE
.PP
.I void
.br
.B _cw_assert
.RI ( "<expression>" )
.RS
Input(s):
.RS
.IR <expression> :
.RS
A C language expression that evaluates to zero or non-zero.
.RE
.RE
Output(s):
.RS
Possible error message printed to \fIcw_g_out\fR.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
If \fI<expression>\fR evaluates to zero, print an error message to
\fIcw_g_out\fR and \fIabort\fR().
.PP
Note: This macro is optimized out of the non-debug versions of the library.
.RE
.RE
.PP
.I void
.br
.B _cw_check_ptr
.RI ( "void *a_ptr" )
.RS
Input(s):
.RS
.IR a_ptr :
.RS
Pointer.
.RE
.RE
Output(s):
.RS
Possible error message printed to \fIcw_g_out\fR.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
if \fIa_ptr\fR is NULL, print an error message to \fIcw_g_out\fR and
\fIabort\fR().
.PP
Note: This macro is optimized out of the non-debug versions of the library.
.RE
.RE
.PP
.I void
.br
.B _cw_not_reached
.RI ( "void" )
.RS
Input(s):
.RS
None.
.RE
Output(s):
.RS
None.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Abort with an error message, if a debugging version of \fBlibstash\fR.
.RE
.RE
.PP
.I void
.br
.B _cw_error
.RI ( "const char *a_str" )
.RS
Input(s):
.RS
.IR a_str :
.RS
Pointer to a NULL-terminated character array.
.RE
.RE
Output(s):
.RS
Contents of \fIa_str\fR printed to \fIcw_g_out\fR.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Print the contents of \fIa_str\fR to \fIcw_g_out\fR.
.RE
.RE
.PP
.I cw_uint64_t
.br
.B _cw_ntohq
.RI ( "cw_uint64_t a_val" )
.RS
Input(s):
.RS
.IR a_val :
.RS
64 bit integer.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
64 bit integer.
.RE
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Convert \fIa_val\fR from network byte order to host byte order and return the
result.
.RE
.RE
.PP
.I cw_uint64_t
.br
.B _cw_htonq
.RI ( "cw_uint64_t a_val" )
.RS
Input(s):
.RS
.IR a_val :
.RS
64 bit integer.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
64 bit integer.
.RE
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Convert \fIa_val\fR from host byte order to network byte order and return the
result.
.RE
.RE
\"  .SH RETURN VALUES
\"  .SH EXIT STATUS
\"  .SH FILES
.SH CODE STRUCTURE
.SS Object-oriented C
The algorithms and data structures in \fBlibstash\fR are architected in an
object-oriented manner, though all the actual code is C.  Since C doesn't
directly support object-oriented design, a number of stylistic conventions
are used.
.PP
Each class is referred to by a name, which is used as a prefix for all member
methods.  For example, dynamic chained hashing is implemented by the \fBdch\fR
class, and member methods of \fBdch\fR are named \fBdch_new()\fR,
\fBdch_delete()\fR, \fBdch_insert()\fR, etc.
.SS Variable types
\fBlibstash\fR is careful to use the following data types rather than the
built-in types (other than when using system library functions and string
pointers (char *)) to allow easy porting and explicit knowledge of variable
sizes.
.PP
.TS
center box linesize(6) tab(@);
cb s s.
C data types
_
.T&
lb | rb | lb.
 Type name@sizeof@Description
_
.T&
l | r | l.
 cw_bool_t@4@Boolean, either FALSE or TRUE.
 cw_sint8_t@1@Signed 8 bit variable.  
 cw_uint8_t@1@Unsigned 8 bit variable.
 cw_sint16_t@2@Signed 16 bit variable.  
 cw_uint16_t@2@Unsigned 16 bit variable.
 cw_sint32_t@4@Signed 32 bit variable.  
 cw_uint32_t@4@Unsigned 32 bit variable.
 cw_sint64_t@8@Signed 64 bit variable.  
 cw_uint64_t@8@Unsigned 64 bit variable.
.TE
.SS Object instantiation
Many classes provide a means for external memory allocation, and in some cases
for automatic cleanup during destruction.  This feature enables improved
performance and cache locality, but if misunderstood, can result in mysterious
memory corruption and leaks.
.SS Variable naming
Though the variable naming conventions used in \fBlibstash\fR are far short of
what Hungarian and other naming conventions attempt, there are a few to take
note of.
.TS
center box linesize(6) tab(@);
cb s s.
Variable prefixes
_
.T&
lb | lb.
 Prefix@Description
_
.T&
l | l.
 cw_g_@Global variable.
 a_@Function argument.
 t_@Temporary variable.
.TE
.SH SEE ALSO
.TS H
center box linesize(6) tab(@);
cb s s.
Classes built into libstash
_
.T&
lb | lb | lb.
 Name@Man page@Description
_
.T&
l | l | l.
 bhp@libstash_bhp(3s)@Binomial heap.
 bhpi@libstash_bhp(3s)@Binomial heap node.
 buf@libstash_buf(3s)@Extensible buffer.
 bufc@libstash_buf(3s)@Reference-counted memory buffer.
 ch@libstash_ch(3s)@Chained hashing.
 cnd@libstash_cnd(3s)@Condition.
 dbg@libstash_dbg(3s)@Runtime debugging symbol lookup.
 dch@libstash_dch(3s)@Dynamic chained hashing.
 mem@libstash_mem(3s)@Memory allocation (malloc(3) wrapper).
 mq@libstash_mq(3s)@Message queue.
 mtx@libstash_mtx(3s)@Mutex.
 out@libstash_out(3s)@Output (printf(3) replacement).
 pezz@libstash_pezz(3s)@Cached memory allocation.
 pool@libstash_pool(3s)@Cached memory allocation.
 ql@libstash_ql(3s)@List macros.
 qr@libstash_ql(3s)@Ring macros.
 qs@libstash_ql(3s)@Stack macros.
 res@libstash_res(3s)@Resource (name/value pairs).
 rwl@libstash_rwl(3s)@Read/write lock.
 sema@libstash_sema(3s)@Semaphore.
 thd@libstash_thd(3s)@Thread.
 treen@libstash_treen(3s)@Arbitrary tree.
 tsd@libstash_tsd(3s)@Thread-specific data.
 xep@libstash_xep(3s)@Exception handling.
.TE
\"  .SH DIAGNOSTICS
\"  .SH BUGS
.SH HISTORY
Written by Jason Evans <jasone@canonware.com>.
