.ig \" -*-mode:nroff-*-

<Copyright = jasone>
<License>

Version: <Version>
..
.TH libstash_bhp 3s "libstash, version <Version>"
.Nm libstash_bhp
.hy 1
.SH NAME
bhp, bhpi - Binomial heap.
.SH SYNOPSIS
.SS Single-threaded
#define _LIBSTASH_USE_BHP
.br
\fB#include <libstash/libstash.h>\fR

.SS Multi-threaded
#define _LIBSTASH_USE_BHP
.br
\fB#include <libstash/libstash_r.h>\fR

.I cw_bhp_t *
.br
.B bhp_new_r
.RI ( "cw_bhp_t * a_bhp" ", " "bhp_prio_comp_t * a_prio_comp" )

.SS General
.I cw_bhpi_t *
.br
.B bhpi_new
.RI ( "cw_bhpi_t * a_bhpi" ", " "const void * a_priority" ", "
.IR "const void * a_data" ", " 
.IR "void (*a_dealloc_func)(void * dealloc_arg, void * bhpi)" ", " 
.IR "void * a_dealloc_arg" )

.I void
.br
.B bhpi_delete
.RI ( "cw_bhpi_t * a_bhpi" )

.I cw_bhp_t *
.br
.B bhp_new
.RI ( "cw_bhp_t * a_bhp" ", " "bhp_prio_comp_t * a_prio_comp" )

.I void
.br
.B bhp_delete
.RI ( "cw_bhp_t * a_bhp" )

.I void
.br
.B bhp_dump
.RI ( "cw_bhp_t * a_bhp" )

.I void
.br
.B bhp_insert
.RI ( "cw_bhp_t * a_bhp" ", " "cw_bhpi_t * a_bhpi" )

.I cw_bool_t
.br
.B bhp_find_min
.RI ( "cw_bhp_t * a_bhp" ", " "void ** r_priority" ", " "void ** r_data" )

.I cw_bool_t
.br
.B bhp_del_min
.RI ( "cw_bhp_t * a_bhp" ", " "void ** r_priority" ", " "void ** r_data" )

.I cw_uint64_t
.br
.B bhp_get_size
.RI ( "cw_bhp_t * a_bhp" )

.I void
.br
.B bhp_union
.RI ( "cw_bhp_t * a_a" ", " "cw_bhp_t * a_b" )

.I cw_sint32_t
.br
.B bhp_priority_compare_uint32
.RI ( "const void * a_a" ", " "const void * a_b" )

.I cw_sint32_t
.br
.B bhp_priority_compare_sint32
.RI ( "const void * a_a" ", " "const void * a_b" )

.I cw_sint32_t
.br
.B bhp_priority_compare_uint64
.RI ( "const void * a_a" ", " "const void * a_b" )

.SS Debugging (dbg) symbols
None.

.SH DESCRIPTION
The bhp and bhpi classes implement binomial heaps.  The bhpi class encapsulates
the internal nodes of bhp instances.  Pointer casting is used to allow arbitrary
data types to be used.  A priority comparison function must be specified during
creation of a bhp.  libstash includes priority comparison functions for
cw_uint32_t, cw_sint32_t, and cw_uint64_t.

.SH USAGE
.I cw_bhpi_t *
.br
.B bhpi_new
.RI ( "cw_bhpi_t * a_bhpi" ", " "const void * a_priority" ", "
.IR "const void * a_data" ", " 
.IR "void (*a_dealloc_func)(void * dealloc_arg, void * bhpi)" ", " 
.IR "void * a_dealloc_arg" )
.RS
Input(s):
.RS
.IR a_bhpi :
.RS
Pointer to space for a bhpi, or NULL.
.RE
.RE
.RS
.IR a_priority :
.RS
Pointer to a priority object.
.RE
.RE
.RS
.IR a_data :
.RS
Pointer to a data object.
.RE
.RE
.RS
.IR a_dealloc_func :
.RS
Pointer to a memory deallocation function, or NULL.  Ignored if (NULL ==
a_bhpi).
.RE
.RE
.RS
.IR a_dealloc_arg :
.RS
Pointer to first argument to a_dealloc_func, or NULL.  Ignored if (NULL ==
a_dealloc_func), or (NULL == a_bhpi).
.RE
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a bhpi.
.br
NULL: Memory allocation error.  Can only occur if (NULL == a_bhpi).
.RE
.RE
Description:
.RS
Constructor.
.RE
.RE

.I void
.br
.B bhpi_delete
.RI ( "cw_bhpi_t * a_bhpi" )
.RS
Input(s):
.RS
.IR a_bhpi :
.RS
Pointer to a bhpi.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Destructor.  If the bhpi has been inserted into a bhp, do not call this method,
since the bhp code will eventually do it.

Note: No attempt is made to free data pointed to by the priority or data
pointers.
.RE
.RE

.I cw_bhp_t *
.br
.B bhp_new
.RI ( "cw_bhp_t * a_bhp" ", " "bhp_prio_comp_t * a_prio_comp" )
.br
.I cw_bhp_t *
.br
.B bhp_new_r
.RI ( "cw_bhp_t * a_bhp" ", " "bhp_prio_comp_t * a_prio_comp" )
.RS
Input(s):
.RS
.IR a_bhp :
.RS
Pointer to space for a bhp, or NULL.
.RE
.RE
.RS
.IR a_prio_comp :
.RS
Pointer to a priority comparison function.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a bhp.
.br
NULL: Memory allocation error.  Can only occur if (NULL == a_bhp).
.RE
.RE
Description:
.RS
Non-thread-safe and thread-safe constructors.
.RE
.RE

.I void
.br
.B bhp_delete
.RI ( "cw_bhp_t * a_bhp" )
.RS
Input(s):
.RS
.IR a_bhp :
.RS
Pointer to a bhp.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Destructor.
.RE
.RE

.I void
.br
.B bhp_dump
.RI ( "cw_bhp_t * a_bhp" )
.RS
Input(s):
.RS
.IR a_bhp :
.RS
Pointer to a bhp.
.RE
.RE
Output(s):
.RS
Output printed to cw_g_out.
.RE
Description:
.RS
Print the internal tree to cw_g_out.
.RE
.RE

.I void
.br
.B bhp_insert
.RI ( "cw_bhp_t * a_bhp" ", " "cw_bhpi_t * a_bhpi" )
.RS
Input(s):
.RS
.IR a_bhp :
.RS
Pointer to a bhp.
.RE
.IR a_bhpi :
.RS
Pointer to a bhpi.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Insert an item into a_bhp.
.RE
.RE

.I cw_bool_t
.br
.B bhp_find_min
.RI ( "cw_bhp_t * a_bhp" ", " "void ** r_priority" ", " "void ** r_data" )
.RS
Input(s):
.RS
.IR a_bhp :
.RS
Pointer to a bhp.
.RE
.IR r_priority :
.RS
Pointer to a pointer, or NULL.
.RE
.IR r_data :
.RS
Pointer to a pointer, or NULL.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Empty heap.
.RE
.IR *r_priority :
.RS
Pointer to the priority object.
.RE
.IR *r_data :
.RS
Pointer to the data object.
.RE
.RE
Description:
.RS
Set *r_priority and *r_data to point to a minimum node in a_bhp.
.RE
.RE

.I cw_bool_t
.br
.B bhp_del_min
.RI ( "cw_bhp_t * a_bhp" ", " "void ** r_priority" ", " "void ** r_data" )
.RS
Input(s):
.RS
.IR a_bhp :
.RS
Pointer to a bhp.
.RE
.IR r_priority :
.RS
Pointer to a pointer, or NULL.
.RE
.IR r_data :
.RS
Pointer to a pointer, or NULL.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Empty heap.
.RE
.IR *r_priority :
.RS
Pointer to the priority object.
.RE
.IR *r_data :
.RS
Pointer to the data object.
.RE
.RE
Description:
.RS
Set *r_priority and *r_data to point to a minimum node in a_bhp and remove the
item from a_bhp.
.RE
.RE

.I cw_uint64_t
.br
.B bhp_get_size
.RI ( "cw_bhp_t * a_bhp" )
.RS
Input(s):
.RS
.IR a_bhp :
.RS
Pointer to a bhp.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
Number of items in a_bhp.
.RE
.RE
Description:
.RS
Return the number of items in a_bhp.
.RE
.RE

.I void
.br
.B bhp_union
.RI ( "cw_bhp_t * a_a" ", " "cw_bhp_t * a_b" )
.RS
Input(s):
.RS
.IR a_a :
.RS
Pointer to a bhp.
.RE
.IR a_b :
.RS
Pointer to a bhp.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Merge a_b into a_a.  a_b is invalid after this call, and does not need to be
deleted.
.RE
.RE

.I cw_sint32_t
.br
.B bhp_priority_compare_uint32
.RI ( "const void * a_a" ", " "const void * a_b" )
.RS
Input(s):
.RS
.IR a_a :
.RS
Pointer to a cw_uint32_t.
.RE
.IR a_b :
.RS
Pointer to a cw_uint32_t.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
-1: *a_a < *a_b.
.br
0: *a_a == *a_b.
.br
1: *a_a > *a_b.
.RE
.RE
Description:
.RS
Compare *a_a and *a_b as unsigned 32 bit integers.
.RE
.RE

.I cw_sint32_t
.br
.B bhp_priority_compare_sint32
.RI ( "const void * a_a" ", " "const void * a_b" )
.RS
Input(s):
.RS
.IR a_a :
.RS
Pointer to a cw_sint32_t.
.RE
.IR a_b :
.RS
Pointer to a cw_sint32_t.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
-1: *a_a < *a_b.
.br
0: *a_a == *a_b.
.br
1: *a_a > *a_b.
.RE
.RE
Description:
.RS
Compare *a_a and *a_b as signed 32 bit integers.
.RE
.RE

.I cw_sint32_t
.br
.B bhp_priority_compare_uint64
.RI ( "const void * a_a" ", " "const void * a_b" )
.RS
Input(s):
.RS
.IR a_a :
.RS
Pointer to a cw_uint64_t.
.RE
.IR a_b :
.RS
Pointer to a cw_uint64_t.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
-1: *a_a < *a_b.
.br
0: *a_a == *a_b.
.br
1: *a_a > *a_b.
.RE
.RE
Description:
.RS
Compare *a_a and *a_b as unsigned 64 bit integers.
.RE
.RE

.SH SEE ALSO
libstash(3s).

.SH HISTORY
Written by Jason Evans <jasone@canonware.com>.
