.ig \" -*-mode:nroff-*-

<Copyright = jasone>
<License>

Version: <Version>
..
.TH libstash_out 3s "libstash, version <Version>"
.Nm libstash_out
.hy 1
.SH NAME
out, spec - Formatted output (printf(3) replacement) and format specifier
helpers.
.SH SYNOPSIS
.SS Single-threaded
\fB#include <libstash/libstash.h>\fR

.SS Multi-threaded
\fB#include <libstash/libstash_r.h>\fR

.SS General
.I typedef cw_sint32_t
.br
.B cw_out_metric_t
.RI ( "const char * a_format" ", " "cw_uint32_t a_format_len" ", " 
.IR "const void * a_arg" )

.I typedef char *
.br
.B cw_out_render_t
.RI ( "const char * a_format" ", " "cw_uint32_t a_format_len" ", " 
.IR "const void * a_arg" ", " "char * r_str" )

.I cw_out_t *
.br
.B out_new
.RI ( "cw_out_t * a_out" )

.I void
.br
.B out_delete
.RI ( "cw_out_t * a_out" )

.I cw_bool_t
.br
.B out_register
.RI ( "cw_out_t * a_out" ", " "const char * a_type" ", " "cw_uint32_t a_size"
.RI ", " "cw_out_metric_t * a_metric_func" ", "
.IR "cw_out_render_t * a_render_func" )

.I cw_bool_t
.br
.B out_merge
.RI ( "cw_out_t * a_a" ", " "cw_out_t * a_b" )

.I cw_sint32_t
.br
.B out_get_default_fd
.RI ( "cw_out_t * a_out" )

.I void
.br
.B out_set_default_fd
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" )

.I cw_sint32_t
.br
.B out_put
.RI ( "cw_out_t * a_out" ", " "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_e
.RI ( "cw_out_t * a_out" ", " "const char * a_file_name" ", "
.IR "cw_uint32_t a_line_num" ", " "const char * a_func_name" ", "
.IR "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_l
.RI ( "cw_out_t * a_out" ", " "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_le
.RI ( "cw_out_t * a_out" ", " "const char * a_file_name" ", "
.IR "cw_uint32_t a_line_num" ", " "const char * a_func_name" ", "
.IR "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_n
.RI ( "cw_out_t * a_out" ", " "cw_uint32_t a_size" ", "
.IR "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_f
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_fe
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_file_name" ", " "cw_uint32_t a_line_num" ", "
.IR "const char * a_func_name" ", " "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_fl
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_fle
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_file_name" ", " "cw_uint32_t a_line_num" ", "
.IR "const char * a_func_name" ", " "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_fn
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", " "cw_uint32_t a_size"
.RI ", " "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_fv
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_format" ", " "va_list a_p" )

.I cw_sint32_t
.br
.B out_put_s
.RI ( "cw_out_t * a_out" ", " "char * a_str" ", " "const char * a_format"
.RI ", " "..." )

.I cw_sint32_t
.br
.B out_put_sa
.RI ( "cw_out_t * a_out" ", " "char ** r_str" ", " "const char * a_format"
.RI ", " "..." )

.I cw_sint32_t
.br
.B out_put_sn
.RI ( "cw_out_t * a_out" ", " "char * a_str" ", " "cw_uint32_t a_size" ", "
.IR "const char * a_format" ", " "..." )

.I cw_sint32_t
.br
.B out_put_sv
.RI ( "cw_out_t * a_out" ", " "char * a_str" ", " "const char * a_format"
.RI ", " "va_list a_p" )

.I cw_sint32_t
.br
.B out_put_sva
.RI ( "cw_out_t * a_out" ", " "char ** r_str" ", " "const char * a_format"
.RI ", " "va_list a_p" )

.I cw_sint32_t
.br
.B out_put_svn
.RI ( "cw_out_t * a_out" ", " "char * a_str" ", " "cw_uint32_t a_size" ", "
.IR "const char * a_format" ", " "va_list a_p" )

.I cw_sint32_t
.br
.B spec_get_type
.RI ( "const char * a_spec" ", " "cw_uint32_t a_spec_len" ", "
.IR "const char ** r_val" )

.I cw_sint32_t
.br
.B spec_get_val
.RI ( "const char * a_spec" ", " "cw_uint32_t a_spec_len" ", "
.IR "const char * a_name" ", " "cw_uint32_t a_name_len" ", "
.IR "const char ** r_val" )

.SS Debugging (dbg) symbols
None.

.SH DESCRIPTION
The out class provides functionality similar to the printf family of functions,
with the additional capability of dynamically adding handlers for non-builtin
types.

The syntax of formatting specifiers is significantly different than what printf
uses, since arbitrary flags must be supported.  Formatting specifiers are
delimited by `[' and `]'.  Following are some examples of formatting strings,
followed by explanations.

\*(lq[[\*(rq
Print a `[' character.  Due to the way C strings and `\' protection work,
it is necessary to use a different escape character (`[').

\*(lq[s]\*(rq
Print a string.

\*(lq[s|w:10]\*(rq
 Print a string, padded to be at least 10 bytes long.

\*(lq[i|b:16|p:0|w:8]\*(rq
Print a 32 bit integer in base 16.  Pad the output to 8 bytes, using `0' for
the padding character.

As can be seen above, flags are specified as name/value pairs.  Each name and
value is separated by `:', and name/value pairs are separated from each other
(and the type specifier) by `|'.  Names and values can be of arbitrary length
(nonzero for names), and can contain any characters except (in some cases)
`]', `|', `:', and `\0'.  The parser may let these characters slip through in
some cases, but such behavior should not be relied on.  Some or all of the
following flags are supported for the builtin types:

.IR \*(lqw\*(rq : 
Minimum number of bytes of output.

.IR \*(lqj\*(rq :
Justification.  Legal values:
.RS
.IR \*(lqr\*(rq :
Right.
.br
.IR \*(lql\*(rq :
Left.
.br
.IR \*(lqc\*(rq :
Center.
.RE

.IR \*(lqp\*(rq :
Padding character.

.IR \*(lqb\*(rq :
Numerical base.  Legal bases are (2 <= base <= 36).

.IR \*(lqs\*(rq :
Signed/unsigned.  Legal values:
.RS
.IR \*(lqu\*(rq :
Unsigned.
.br
.IR \*(lqs\*(rq :
Signed.
.RE

.IR \*(lq+\*(rq :
Show sign.  Legal values:
.RS
.IR \*(lq-\*(rq :
Only print sign if output is negative.
.br
.IR \*(lq+\*(rq :
Always print sign.
.RE

Below is a matrix of the builtin output types, supported flags, and flag
defaults:

.TS
center box linesize(6) tab(@);
cb.
Field key
_
.T&
l.
 Supported?
 Default value
.TE

.TS H
center box linesize(6) tab(@);
cb s s s s s s.
Formatting names/values
_
.T&
lb | lb | lb | lb | lb | lb | lb.
 Type@w@j@p@b@s@+
-
.T&
l | l | l | l | l | l | l.
 i@Yes@Yes@Yes@Yes@Yes@Yes
  @Fit@Right@` '@10@Unsigned@Negative only
_
.T&
l | l | l | l | l | l | l.
 q@Yes@Yes@Yes@Yes@Yes@Yes
  @Fit@Right@` '@10@Unsigned@Negative only
_
.T&
l | l | l | l | l | l | l.
 c@Yes@Yes@Yes@No@No@No
  @Fit@Right@` '@@@
_
.T&
l | l | l | l | l | l | l.
 s@Yes@Yes@Yes@No@No@No
  @Fit@Right@` '@@@
_
.T&
l | l | l | l | l | l | l.
 p@Yes@Yes@Yes@Yes@Yes@Yes
  @Fit@Right@` '@16@Unsigned@Negative only
_
.T&
l | l | l | l | l | l | l.
 b@Yes@Yes@Yes@No@No@No
  @Fit@Right@` '@@@
.TE

.SH USAGE
.I typedef cw_sint32_t
.br
.B cw_out_metric_t
.RI ( "const char * a_format" ", " "cw_uint32_t a_format_len" ", " 
.IR "const void * a_arg" )
.br
Input(s):
.RS
.IR a_format :
.RS
Pointer to a format specifier.
.RE
.IR a_format_len :
.RS
Length in bytes of a_format.
.RE
.IR a_arg :
.RS
Pointer to object to be output.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes of output space that the corresponding rendering function
needs.
.br
-1: Memory allocation error.
.br
-2: Other error.
.RE
.RE
Description:
.RS
Return the number of bytes needed to output a_arg, given the specification
pointed to by a_format.
.RE
.RE

.I typedef char *
.br
.B cw_out_render_t
.RI ( "const char * a_format" ", " "cw_uint32_t a_format_len" ", " 
.IR "const void * a_arg" ", " "char * r_str" )
.br
Input(s):
.RS
.IR a_format :
.RS
Pointer to a format specifier.
.RE
.IR a_format_len :
.RS
Length in bytes of a_format.
.RE
.IR a_arg :
.RS
Pointer to object to be output.
.RE
.IR r_str :
.RS
Pointer to space to render to.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes of output space that the corresponding rendering function
needs.
.br
-1: Memory allocation error.
.br
-2: Other error.
.RE
.RE
Description:
.RS
Print a_arg, given the specification pointed to by a_format.
.RE
.RE

.I cw_out_t *
.br
.B out_new
.RI ( "cw_out_t * a_out" )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to space for an out, or NULL.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to an out.
.br
NULL: Memory allocation error.  Can only occur if (NULL == a_out).
.RE
.RE
Description:
.RS
Constructor.
.RE
.RE

.I void
.br
.B out_delete
.RI ( "cw_out_t * a_out" )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Destructor.
.RE
.RE

.I cw_bool_t
.br
.B out_register
.RI ( "cw_out_t * a_out" ", " "const char * a_type" ", " "cw_uint32_t a_size"
.RI ", " "cw_out_metric_t * a_metric_func" ", "
.IR "cw_out_render_t * a_render_func" )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR a_type :
.RS
Pointer to a NULL-terminated string that represents a data type specifier.  The
string length (not including the NULL terminator) must be _LIBSTASH_OUT_MAX_TYPE
bytes or less.
.RE
.IR a_size :
.RS
sizeof(<data type>).  In almost all cases this will be sizeof(<data type> *).
a_size must be 1, 2, 4, or 8.
.RE
.IR a_metric_func :
.RS
Pointer to a metric function.
.RE
.IR a_render_func :
.RS
Pointer to a rendering function.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Memory allocation error.
.RE
.RE
Description:
.RS
Register a new type with a_out, so that non-builtin type specifiers can be
embedded in formatting strings.
.RE
.RE

.I cw_bool_t
.br
.B out_merge
.RI ( "cw_out_t * a_a" ", " "cw_out_t * a_b" )
.br
Input(s):
.RS
.IR a_a :
.RS
Pointer to an out.
.RE
.IR a_b :
.RS
Pointer to an out.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Memory allocation error.
.RE
.RE
Description:
.RS
Merge a_b's extended type handlers into a_a.
.RE
.RE

.I cw_sint32_t
.br
.B out_get_default_fd
.RI ( "cw_out_t * a_out" )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
File descriptor number.
.RE
.RE
Description:
.RS
Return a_out's default file descriptor.
.RE
.RE

.I void
.br
.B out_set_default_fd
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR a_fd :
.RS
File descriptor number.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Set a_out's default file descriptor number.
.RE
.RE

.I cw_sint32_t
.br
.B out_put
.RI ( "cw_out_t * a_out" ", " "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
Output printed to a_out's default file descriptor (2 if (NULL == a_out)).
.RE
Description:
.RS
Print formatted output.
.RE
.RE

.I cw_sint32_t
.br
.B out_put_e
.RI ( "cw_out_t * a_out" ", " "const char * a_file_name" ", "
.IR "cw_uint32_t a_line_num" ", " "const char * a_func_name" ", "
.IR "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR a_file_name :
.RS
Pointer to a string that represents the source file name, or NULL.
.RE
.IR a_line_num :
.RS
Source file line number.  Ignored if (NULL == a_file_name).
.RE
.IR a_func_name :
.RS
Pointer to a string that represents the source function name, or NULL.
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
Output printed to a_out's default file descriptor (2 if (NULL == a_out)).
.RE
Description:
.RS
Print formatted output, with optional
.br
\*(lqAt <file>, line <line>: <function>(): \*(rq
.br
prepended to the output.
.RE
.RE

.I cw_sint32_t
.br
.B out_put_l
.RI ( "cw_out_t * a_out" ", " "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
Output printed to a_out's default file descriptor (2 if (NULL == a_out)).
.RE
Description:
.RS
Print formatted output, with \*(lq[yy/mm/dd hh:mm:ss (zz)]: \*(rq prepended to
the output.
.RE
.RE

.I cw_sint32_t
.br
.B out_put_le
.RI ( "cw_out_t * a_out" ", " "const char * a_file_name" ", "
.IR "cw_uint32_t a_line_num" ", " "const char * a_func_name" ", "
.IR "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR a_file_name :
.RS
Pointer to a string that represents the source file name, or NULL.
.RE
.IR a_line_num :
.RS
Source file line number.  Ignored if (NULL == a_file_name).
.RE
.IR a_func_name :
.RS
Pointer to a string that represents the source function name, or NULL.
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
Output printed to a_out's default file descriptor (2 if (NULL == a_out)).
.RE
Description:
.RS
Print formatted output, with "[yy/mm/dd hh:mm:ss (zz)]: "
and optional "At <file>, line <line>: <function>(): " prepended to the
output.
.RE
.RE

.I cw_sint32_t
.br
.B out_put_n
.RI ( "cw_out_t * a_out" ", " "cw_uint32_t a_size" ", "
.IR "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR a_size :
.RS
Maximum number of characters to output.
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
Output printed to a_out's default file descriptor (2 if (NULL == a_out)).
.RE
Description:
.RS
Print at most a_size bytes of formatted output.
.RE
.RE

.I cw_sint32_t
.br
.B out_put_f
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_fe
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_file_name" ", " "cw_uint32_t a_line_num" ", "
.IR "const char * a_func_name" ", " "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.IR a_file_name :
.RS
Pointer to a string that represents the source file name, or NULL.
.RE
.IR a_line_num :
.RS
Source file line number.  Ignored if (NULL == a_file_name).
.RE
.IR a_func_name :
.RS
Pointer to a string that represents the source function name, or NULL.
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_fl
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_fle
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_file_name" ", " "cw_uint32_t a_line_num" ", "
.IR "const char * a_func_name" ", " "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.IR a_file_name :
.RS
Pointer to a string that represents the source file name, or NULL.
.RE
.IR a_line_num :
.RS
Source file line number.  Ignored if (NULL == a_file_name).
.RE
.IR a_func_name :
.RS
Pointer to a string that represents the source function name, or NULL.
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_fn
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", " "cw_uint32_t a_size"
.RI ", " "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_fv
.RI ( "cw_out_t * a_out" ", " "cw_sint32_t a_fd" ", "
.IR "const char * a_format" ", " "va_list a_p" )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_s
.RI ( "cw_out_t * a_out" ", " "char * a_str" ", " "const char * a_format"
.RI ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_sa
.RI ( "cw_out_t * a_out" ", " "char ** r_str" ", " "const char * a_format"
.RI ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_sn
.RI ( "cw_out_t * a_out" ", " "char * a_str" ", " "cw_uint32_t a_size" ", "
.IR "const char * a_format" ", " "..." )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.IR a_format :
.RS
Pointer to a formatting specifier string.
.RE
.IR ... :
.RS
Arguments that correspond to the specifiers in a_format.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_sv
.RI ( "cw_out_t * a_out" ", " "char * a_str" ", " "const char * a_format"
.RI ", " "va_list a_p" )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_sva
.RI ( "cw_out_t * a_out" ", " "char ** r_str" ", " "const char * a_format"
.RI ", " "va_list a_p" )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B out_put_svn
.RI ( "cw_out_t * a_out" ", " "char * a_str" ", " "cw_uint32_t a_size" ", "
.IR "const char * a_format" ", " "va_list a_p" )
.br
Input(s):
.RS
.IR a_out :
.RS
Pointer to an out.
.RE
.IR <input> :
.RS
<input description>
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
>= 0: Number of bytes output.
.br
-1: Memory allocation error.
.br
-2: Parse error.
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B spec_get_type
.RI ( "const char * a_spec" ", " "cw_uint32_t a_spec_len" ", "
.IR "const char ** r_val" )
.br
Input(s):
.RS
.IR a_spec :
.RS
Pointer to a specifier string.
.RE
.IR <input> :
.RS
<input description>
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
<retval description>
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.I cw_sint32_t
.br
.B spec_get_val
.RI ( "const char * a_spec" ", " "cw_uint32_t a_spec_len" ", "
.IR "const char * a_name" ", " "cw_uint32_t a_name_len" ", "
.IR "const char ** r_val" )
.br
Input(s):
.RS
.IR a_spec :
.RS
Pointer to a specifier string.
.RE
.IR <input> :
.RS
<input description>
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
<retval description>
.RE
.RE
Description:
.RS
<description>
.RE
.RE

.SH SEE ALSO
libstash(3s).

.SH HISTORY
Written by Jason Evans <jasone@canonware.com>.
