.ig \" -*-mode:nroff-*-

<Copyright = jasone>
<License>

Version: <Version>
..
.TH libstash_sem 3s "libstash, version <Version>"
.Nm libstash_sem
.hy 1
.SH NAME
sem - Semaphore.
.SH SYNOPSIS
\fB#include <libstash/libstash.h>\fR

.I cw_sem_t *
.br
.B sem_new
.RI ( "cw_sem_t *a_sem" ", " "cw_sint32_t a_count" )

.I void
.br
.B sem_delete
.RI ( "cw_sem_t *a_sem" )

.I void
.br
.B sem_post
.RI ( "cw_sem_t *a_sem" )

.I void
.br
.B sem_wait
.RI ( "cw_sem_t *a_sem" )

.I cw_bool_t
.br
.B sem_timedwait
.RI ( "cw_sem_t *a_sem" ", " "struct timespec *a_timeout" )

.I cw_bool_t
.br
.B sem_trywait
.RI ( "cw_sem_t *a_sem" )

.I cw_sint32_t
.br
.B sem_getvalue
.RI ( "cw_sem_t *a_sem" )

.I void
.br
.B sem_adjust
.RI ( "cw_sem_t *a_sem" ", " "cw_sint32_t a_adjust" )

.SS Debugging (dbg) symbols
None.

.SH DESCRIPTION
\fBsem\fR implements semaphores.  This implementation is a bit different than
normal, in that it is possible to decrement the count to less than zero.  This
allows dynamic modification of resource pools locked by semaphores.

.SH USAGE
.I cw_sem_t *
.br
.B sem_new
.RI ( "cw_sem_t *a_sem" ", " "cw_sint32_t a_count" )
.RS
Input(s):
.RS
.IR a_sem :
.RS
Pointer to space for a sem, or NULL.
.RE
.IR a_count :
.RS
Initial value of semaphore.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a sem.
.br
NULL: Memory allocation error.  Can only occur if (NULL == a_sem).
.RE
.RE
Description:
.RS
Constructor.
.RE
.RE

.I void
.br
.B sem_delete
.RI ( "cw_sem_t *a_sem" )
.RS
Input(s):
.RS
.IR a_sem :
.RS
Pointer to a sem.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Destructor.
.RE
.RE

.I void
.br
.B sem_post
.RI ( "cw_sem_t *a_sem" )
.RS
Input(s):
.RS
.IR a_sem :
.RS
Pointer to a sem.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Post (increment) a_sem.
.RE
.RE

.I void
.br
.B sem_wait
.RI ( "cw_sem_t *a_sem" )
.RS
Input(s):
.RS
.IR a_sem :
.RS
Pointer to a sem.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Wait on (block until able to decrement) a_sem.
.RE
.RE

.I cw_bool_t
.br
.B sem_timedwait
.RI ( "cw_sem_t *a_sem" ", " "struct timespec *a_timeout" )
.RS
Input(s):
.RS
.IR a_sem :
.RS
Pointer to a sem.
.RE
.IR a_timeout :
.RS
Timeout, specified as an absolute time interval.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Failure.
.RE
.RE
Description:
.RS
Try to wait on (decrement) a_sem, but return immediately instead of blocking if
unable to.
.RE
.RE

.I cw_bool_t
.br
.B sem_trywait
.RI ( "cw_sem_t *a_sem" )
.RS
Input(s):
.RS
.IR a_sem :
.RS
Pointer to a sem.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Failure.
.RE
.RE
Description:
.RS
Try to wait on (decrement) a_sem, but return immediately instead of blocking if
unable to.
.RE
.RE

.I cw_sint32_t
.br
.B sem_getvalue
.RI ( "cw_sem_t *a_sem" )
.RS
Input(s):
.RS
.IR a_sem :
.RS
Pointer to a sem.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
Value of semaphore.
.RE
.RE
Description:
.RS
Get value of a_sem.
.RE
.RE

.I void
.br
.B sem_adjust
.RI ( "cw_sem_t *a_sem" ", " "cw_sint32_t a_adjust" )
.RS
Input(s):
.RS
.IR a_sem :
.RS
Pointer to a sem.
.RE
.IR a_adjust :
.RS
Amount to adjust the value of a_sem by.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Adjust a_sem by a_adjust.
.RE
.RE

.SH SEE ALSO
libstash(3s).

.SH HISTORY
Written by Jason Evans <jasone@canonware.com>.
