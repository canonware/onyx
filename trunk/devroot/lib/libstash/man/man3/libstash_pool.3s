.ig \" -*-mode:nroff-*-

<Copyright = jasone>
<License>

Version: <Version>
..
.TH libstash_pool 3s "libstash, version <Version>"
.Nm libstash_pool
.hy 1
.SH NAME
pool - Cached memory allocation of equal-size buffers.
.SH SYNOPSIS
\fB#include <libstash/libstash.h>\fR

.I cw_pool_t *
.br
.B pool_new
.RI ( "cw_pool_t *a_pool" ", " "cw_mem_t *a_mem" ", "
.IR "cw_uint32_t a_buffer_size" )

.I void
.br
.B pool_delete
.RI ( "cw_pool_t *a_pool" )

.I cw_uint32_t
.br
.B pool_buffer_size_get
.RI ( "cw_pool_t *a_pool" )

.I void
.br
.B pool_drain
.RI ( "cw_pool_t *a_pool" )

.I void *
.br
.B pool_get
.RI ( "cw_pool_t *a_pool" ", " "const char *a_filename" ", " 
.IR "cw_uint32_t a_line_num" )
.br
.I void *
.br
.B _cw_pool_get
.RI ( "cw_pool_t *a_pool" )

.I void
.br
.B pool_put
.RI ( "cw_pool_t *a_pool" ", " "void *a_buffer" ", " 
.IR "const char *a_filename" ", " "cw_uint32_t a_line_num" )
.br
.I void
.br
.B _cw_pool_put
.RI ( "cw_pool_t *a_pool" ", " "void *a_buffer" )

.I void
.br
.B pool_dump
.RI ( "cw_pool_t *a_pool" ", " "const char *a_prefix" )

.SS Debugging (dbg) symbols
.TP
\*(lqpool_verbose\*(rq
In the debug versions of libstash, print out full tracking information for every
allocation and deallocation.
.TP
\*(lqpool_error\*(rq
In the debug versions of libstash, print out information about memory leaks and
other detectable errors or inconsistencies.

.SH DESCRIPTION
The \fBpool\fR class provides cached allocation for equal-size buffers.  Each allocation is done via \fBmalloc\fR(), and deallocated buffers are cached.  The cache can be discarded via \fBpool_drain\fR().

.SH USAGE
.I cw_pool_t *
.br
.B pool_new
.RI ( "cw_pool_t *a_pool" ", " "cw_mem_t *a_mem" ", "
.IR "cw_uint32_t a_buffer_size" )
.RS
Input(s):
.RS
.IR a_pool :
.RS
Pointer to space for a pool, or NULL.
.RE
.IR a_mem :
.RS
Pointer to the allocator to use internally.
.RE
.IR a_buffer_size :
.RS
Size of buffers to allocate and return from pool_get().
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
Pointer to a pool.
.RE
.RE
Exception(s):
.RS
_CW_XEPV_OOM.
.RE
Description:
.RS
Constructor.
.RE
.RE

.I void
.br
.B pool_delete
.RI ( "cw_pool_t *a_pool" )
.RS
Input(s):
.RS
.IR a_pool :
.RS
Pointer to a pool.
.RE
.RE
Output(s):
.RS
None.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Destructor.
.RE
.RE

.I cw_uint32_t
.br
.B pool_buffer_size_get
.RI ( "cw_pool_t *a_pool" )
.RS
Input(s):
.RS
.IR a_pool :
.RS
Pointer to a pool.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
Size of buffers that a_pool is using.
.RE
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Return the size of the buffers that a_pool is using.
.RE
.RE

.I void
.br
.B pool_drain
.RI ( "cw_pool_t *a_pool" )
.RS
Input(s):
.RS
.IR a_pool :
.RS
Pointer to a pool.
.RE
.RE
Output(s):
.RS
None.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Discard internally cached buffers, if any.
.RE
.RE

.I void *
.br
.B pool_get
.RI ( "cw_pool_t *a_pool" ", " "const char *a_filename" ", " 
.IR "cw_uint32_t a_line_num" )
.br
.I void *
.br
.B _cw_pool_get
.RI ( "cw_pool_t *a_pool" )
.RS
Input(s):
.RS
.IR a_pool :
.RS
Pointer to a pool.
.RE
.IR a_filename :
.RS
Should be __FILE__.
.RE
.IR a_line_num :
.RS
Should be __LINE__.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
Pointer to a memory buffer.
.RE
.RE
Exception(s):
.RS
_CW_XEPV_OOM.
.RE
Description:
.RS
Allocate a memory buffer and return a pointer to it.
.RE
.RE

.I void
.br
.B pool_put
.RI ( "cw_pool_t *a_pool" ", " "void *a_buffer" ", " 
.IR "const char *a_filename" ", " "cw_uint32_t a_line_num" )
.br
.I void
.br
.B _cw_pool_put
.RI ( "cw_pool_t *a_pool" ", " "void *a_buffer" )
.RS
Input(s):
.RS
.IR a_pool :
.RS
Pointer to a pool.
.RE
.IR a_buffer :
.RS
Pointer to a memory buffer.
.RE
.IR a_filename :
.RS
Should be __FILE__.
.RE
.IR a_line_num :
.RS
Should be __LINE__.
.RE
.RE
Output(s):
.RS
None.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Put back (deallocate) a_buffer.
.RE
.RE

.I void
.br
.B pool_dump
.RI ( "cw_pool_t *a_pool" ", " "const char *a_prefix" )
.RS
Input(s):
.RS
.IR a_pool :
.RS
Pointer to a pool.
.RE
.IR a_prefix :
.RS
Pointer to a string which is used as a prefix for all output.
.RE
.RE
Output(s):
.RS
Output printed to cw_g_out.
.RE
Exception(s):
.RS
_CW_XEPV_OOM.
.RE
Description:
.RS
Dump the internal state of a_pool to cw_g_out.
.RE
.RE

.SH SEE ALSO
libstash(3s).

.SH HISTORY
Written by Jason Evans <jasone@canonware.com>.
