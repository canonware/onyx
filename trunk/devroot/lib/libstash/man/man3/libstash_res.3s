.ig \" -*-mode:nroff-*-

<Copyright = jasone>
<License>

Version: <Version>
..
.TH libstash_res 3s "libstash, version <Version>"
.hy 1
.SH NAME
res - Simple resource class.
.SH SYNOPSIS
\fB#include <libstash/libstash.h>\fR
.PP
.I cw_res_t *
.br
.B res_new
.RI ( "cw_res_t *a_res" ", " "cw_mem_t *a_mem" )
.PP
.I void
.br
.B res_delete
.RI ( "cw_res_t *a_res" )
.PP
.I void
.br
.B res_clear
.RI ( "cw_res_t *a_res" )
.PP
.I cw_bool_t
.br
.B res_is_equal
.RI ( "cw_res_t *a_a" ", " "cw_res_t *a_b" )
.PP
.I cw_bool_t
.br
.B res_file_merge
.RI ( "cw_res_t *a_res" ", " "const char *a_filename" )
.PP
.I cw_bool_t
.br
.B res_list_merge
.RI ( "cw_res_t *a_res" ", " "..." )
.PP
.I const char *
.br
.B res_res_val_get
.RI ( "cw_res_t *a_res" ", " "const char *a_res_name" )
.PP
.I cw_bool_t
.br
.B res_res_extract
.RI ( "cw_res_t *a_res" ", " "const char *a_res_key" ", " 
.IR "char **r_res_name" ", " "char **r_res_val" )
.PP
.I cw_bool_t
.br
.B res_dump
.RI ( "cw_res_t *a_res" ", " "const char *a_filename" )
.SS Debugging (dbg) symbols
.TP
\*(lqres_state\*(rq
Print internal parsing state machine information.
.SH DESCRIPTION
\fBres\fR implements resources, also known as name/value pairs.  Following is a
BNF specification of a resource:
.PP
<resource> ::=
.RS
<^> <whitespaces> <name> <whitespaces> <linebreaks> <colon> <whitespaces>
<linebreaks> <value> <comment>
.br
| <^> <whitespaces> <comment>
.RE
.PP
<name> ::=
.RS
{ <caps> | <lower> | <numbers> | <under> | <period> }+
.RE
.PP
<value> ::=
.RS
{ <caps> | <lower> | <numbers> | <under> | <period>
.br
| <backslash> <hash> | <whitespace> | <colon>
.br
| <backslash> <backslash> | <backslash> <n>
.br
| <legal_in_name> | <linebreak> }+
.br
| <e>
.RE
.PP
<comment> ::=
.RS
<hash> { <caps> | <lower> | <numbers> | <under> | <period> }
.br
| <hash> | <whitespace> | <colon>
.br
| <backslash> | <legal_in_name> }+
.br
| <hash> <e>
.RE
.PP
<linebreak> ::= 
.RS
<backslash> <whitespaces> <newline>
.RE
.PP
<linebreaks> ::=
.RS
<linebreak> <linebreaks>
.br
| <e>
.RE
.PP
<^> ::=
.RS
Bound to beginning of line.
.RE
.PP
<e> ::=
.RS
Epsilon.
.RE
.PP
<n> ::=
.RS
[n]
.RE
.PP
<caps> ::=
.RS
[A-Z]
.RE
.PP
<lower> ::=
.RS
[a-z]
.RE
.PP
<numbers> ::=
.RS
[0-9]
.RE
.PP
<under> ::=
.RS
[_]
.RE
.PP
<period> ::=
.RS
[.]
.RE
.PP
<hash> ::=
.RS
[#]
.RE
.PP
<whitespace> ::=
.RS
[ \\t] 
.br
| <whitespace> [ \\t]
.RE
.PP
<whitespaces> ::=
.RS
<whitespace> <whitespaces>
.br
| <e>
.RE
.PP
<colon> ::=
.RS
[:]
.RE
.PP
<backslash> ::=
.RS
[\\]
.RE
.PP
<legal_in_name> ::=
.RS
[!\\*(rq$%&'()*+,-/;<=>?@[]^`{|}~]
.RE
.PP
<newline> ::=
.RS
[\\n]
.RE
.PP
<null> ::=
.RS
[\\0]
.RE
.PP
`\\' is a special character within <name>.  `\\' protects [#\\\\\\n] and
[ ]+[\\n], but a `\\' followed by anything else is an error.
.SH USAGE
.I cw_res_t *
.br
.B res_new
.RI ( "cw_res_t *a_res" ", " "cw_mem_t *a_mem" )
.RS
Input(s):
.RS
.IR a_res :
.RS
Pointer to space for a res, or NULL.
.RE
.IR a_mem :
.RS
Pointer to the allocator to use internally.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
Pointer to a res.
.RE
.RE
Exception(s):
.RS
_CW_XEPV_OOM.
.RE
Description:
.RS
Constructor.
.RE
.RE
.PP
.I void
.br
.B res_delete
.RI ( "cw_res_t *a_res" )
.RS
Input(s):
.RS
.IR a_res :
.RS
Pointer to a res.
.RE
.RE
Output(s):
.RS
None.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Destructor.
.RE
.RE
.PP
.I void
.br
.B res_clear
.RI ( "cw_res_t *a_res" )
.RS
Input(s):
.RS
.IR a_res :
.RS
Pointer to a res.
.RE
.RE
Output(s):
.RS
None.
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Clear all resources.
.RE
.RE
.PP
.I cw_bool_t
.br
.B res_is_equal
.RI ( "cw_res_t *a_a" ", " "cw_res_t *a_b" )
.RS
Input(s):
.RS
.IR a_a :
.RS
Pointer to a res.
.RE
.IR a_b :
.RS
Pointer to a res.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Not equal.
.br
TRUE: Equal.
.RE
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
If a_res and a_other are equivalent, return TRUE, otherwise FALSE.
.RE
.RE
.PP
.I cw_bool_t
.br
.B res_file_merge
.RI ( "cw_res_t *a_res" ", " "const char *a_filename" )
.RS
Input(s):
.RS
.IR a_res :
.RS
Pointer to a res.
.RE
.IR a_filename :
.RS
Pointer to a string that represents a resource filename.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Error.
.RE
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Merge the resources contained in a_filename into the resource database.
.RE
.RE
.PP
.I cw_bool_t
.br
.B res_list_merge
.RI ( "cw_res_t *a_res" ", " "..." )
.RS
Input(s):
.RS
.IR a_res :
.RS
Pointer to a res.
.RE
.IR ... :
.RS
NULL-terminated list of resource name/value pair strings.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Error.
.RE
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Merge the resources (...) into the resource database (a_res).
.RE
.RE
.PP
.I const char *
.br
.B res_res_val_get
.RI ( "cw_res_t *a_res" ", " "const char *a_res_name" )
.RS
Input(s):
.RS
.IR a_res :
.RS
Pointer to a res.
.RE
.IR a_res_name :
.RS
Pointer to a string that represents a resource name.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a string that represents a resource value.
.br
NULL: Resource does not exist.
.RE
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Return the value associoted with a_res_name if it exists.
.RE
.RE
.PP
.I cw_bool_t
.br
.B res_res_extract
.RI ( "cw_res_t *a_res" ", " "const char *a_res_key" ", " 
.IR "char **r_res_name" ", " "char **r_res_val" )
.RS
Input(s):
.RS
.IR a_res :
.RS
Pointer to a res.
.RE
.IR a_res_key :
.RS
Pointer to a string that represents a resource key.
.RE
.IR r_res_name :
.RS
Pointer to a pointer to a string that represents a resource key that is set by
this function.
.RE
.IR r_res_val :
.RS
Pointer to a pointer to a string that represents a resource value that is set by
this function.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Key not found.
.RE
.IR *r_res_name :
.RS
Pointer to a string that represents a resource key, or undefined if (TRUE ==
retval).
.RE
.IR *r_res_val :
.RS
Pointer to a string that represents a resource value, or undefined if (TRUE ==
retval).
.RE
.RE
Exception(s):
.RS
None.
.RE
Description:
.RS
Find a resource name/value pair, remove it from the resource database, and set
*r_res_name and *r_res_val to point it.  If the resource isn't found, return
TRUE.
.RE
.RE
.PP
.I cw_bool_t
.br
.B res_dump
.RI ( "cw_res_t *a_res" ", " "const char *a_filename" )
.RS
Input(s):
.RS
.IR a_res :
.RS
Pointer to a res.
.RE
.IR a_filename :
.RS
Pointer to a string that represents a file to dump to, or NULL.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
FALSE: Success.
.br
TRUE: Error opening output file.
.RE
Output printed to a file or to cw_g_out.
.RE
Exception(s):
.RS
_CW_XEPV_OOM.
.RE
Description:
.RS
Dump the resource database.  If a_filename is non-NULL, attempt to open the
specified file and write to it.  Otherwise, use cw_g_out.
.RE
.RE
.SH SEE ALSO
libstash(3s).
.SH HISTORY
Written by Jason Evans <jasone@canonware.com>.
