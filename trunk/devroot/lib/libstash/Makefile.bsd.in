# -*-mode:makefile-*-
# @configure_input@
#############################################################################
#
# <Copyright = jasone>
# <License>
#
#############################################################################
#
# Version: <Version>
#
# Description: Master BSD-compatible Makefile for libstash.
#              
##############################################################################

#
# File lists.
#

# Include files that _are_ installed.
INCS := libstash.h libstash_defs.h libstash_incs.h bhp.h buf.h dbg.h lex.h \
	list.h log.h matrix.h mem.h mq.h oh.h pezz.h res.h ring.h treen.h

INCS_R := libstash_r.h locks.h thread.h

# Include files that are _not_ installed.
PRIV_INCS := bhp_p.h buf_p.h lex_p.h list_p.h log_p.h mem_l.h mem_p.h oh_p.h \
	res_p.h

PRIV_INCS_R := locks_p.h

# Source files.
SRCS := libstash.c bhp.c buf.c dbg.c lex.c list.c log.c matrix.c mem.c mq.c \
	oh.c pezz.c res.c ring.c treen.c

SRCS_R := locks.c thread.c

# Simple tests.  Output is diff'ed with the expected (.exp file) output.
CTESTS := c_bhp_a.c c_buf_a.c c_buf_b.c c_buf_c.c c_cnd_a.c \
	c_jtl_a.c c_list_a.c c_log_a.c c_matrix_a.c c_mq_a.c \
	c_mtx_a.c c_oh_a.c c_oh_b.c c_oh_c.c c_pezz_a.c c_res_a.c c_ring_a.c \
	c_rwl_a.c c_sem_a.c c_thd_a.c c_treen_a.c

# Perl scripts that drive the BTESTS.
PTESTS := p_res_a.pl.in

# Backend test programs that are driven by the PTESTS.
BTESTS := b_res_a.c

# Munge the filename lists so that they are prefixed by the directory they're
# in, relative to @top_srcdir@.  Also, convert the test names to their final
# names.
INCS := $(INCS:S/^/include\/libstash\/&/)
INCS_R := $(INCS_R:S/^/include\/libstash\/&/)
PRIV_INCS := $(PRIV_INCS:S/^/include\/libstash\/&/)
PRIV_INCS_R := $(PRIV_INCS_R:S/^/include\/libstash\/&/)

SRCS := $(SRCS:S/^/src\/&/)
SRCS_R := $(SRCS_R:S/^/src\/&/)

CTESTS := $(CTESTS:R:S/^/test\/&/)
BTESTS := $(BTESTS:R:S/^/test\/&/)
PTESTS := $(PTESTS:R:S/^/test\/&/)

#
# Library names.
#

LIB := stash

LIB_REV := 0.0

LIB_ST_D := $(LIB:S/^/lib\/lib&/:S/$/&_d.a/)
LIB_ST_O := $(LIB:S/^/lib\/lib&/:S/$/&.a/)
LIB_SH_O := $(LIB:S/^/lib\/lib&/:S/$/&.so.$(LIB_REV)/)
LIB_ST_P := $(LIB:S/^/lib\/lib&/:S/$/&_p.a/)
LIB_ST_R_D := $(LIB:S/^/lib\/lib&/:S/$/&_r_d.a/)
LIB_ST_R_O := $(LIB:S/^/lib\/lib&/:S/$/&_r.a/)
LIB_SH_R_O := $(LIB:S/^/lib\/lib&/:S/$/&_r.so.$(LIB_REV)/)
LIB_ST_R_P := $(LIB:S/^/lib\/lib&/:S/$/&_r_p.a/)

#
# Standard definitions.
#

SHELL   := /bin/sh
CC	:= @CC@
AR	:= @AR@
RANLIB	:= @RANLIB@
INSTALL	:= @INSTALL@
CAT     := @CAT@
PERL    := @PERL@
BASENAME:= @BASENAME@
DIFF    := @DIFF@
VERIFY  := test/verify
#PMERGE  := test/pmerge
#PSTUB   := test/pstub

#
# Compiler flags.
#

LIBPATH := -Llib
EXTRALIBS := @LDFLAGS@ @LIBS@
INCPATH := -Iinclude @CPPFLAGS@

DEFINES := @DEFS@
ST_DEFINES := 
SH_DEFINES := 
D_DEFINES := -D_LIBSTASH_DBG
O_DEFINES := 
P_DEFINES := 
R_DEFINES := -D_CW_REENTRANT
TEST_DEFINES := -D_LIBSTASH_DEBUG

CFLAGS := -Wall -pipe @CFLAGS@
ST_CFLAGS := 
SH_CFLAGS := -fPIC -DPIC
D_CFLAGS := -g3
O_CFLAGS := -O3
P_CFLAGS := -O3 -pg
R_CFLAGS :=

# Clear out all paths, then set just one (default path) for the main build
# directory.
.PATH :
.PATH : .

# Need this here since the includes have dependencies in them, but there's
# stuff in the includes that we need to see before using $(TARGETS).
all : all_s @without_threads@all_r

#
# Common rules
#
.SUFFIXES :
.SUFFIXES : .a .c .h .o .d .pl.in .pl \
	.o_st_d .o_st_o .o_sh_o .o_st_p \
	.o_st_r_d .o_st_r_o .o_sh_r_o .o_st_r_p \
	.d_st_d .d_st_o .d_sh_o .d_st_p \
	.d_st_r_d .d_st_r_o .d_sh_r_o .d_st_r_p

#
# Build rules.
#

# This rule is used to build the tests.
.for bin in $(CTESTS) $(BTESTS)
$(bin) : $(LIB_ST_R_D) $(bin:S/$/&.c/)
	$(CC) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(R_CFLAGS) $(INCPATH) $(DEFINES) $(R_DEFINES) $(TEST_DEFINES) -c $(bin:S/$/&.c/) -o $(@:S/$/&.o/)
	$(CC) -o $@ $(@:S/$/&.o/) $(LIB_ST_R_D) $(LIBPATH) -dynamic $(EXTRALIBS)
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(INCPATH) $(bin:S/$/&.c/) | sed \"s/\($(bin:T)\)\.o\([ :]*\)/$(bin:H:S!/!\\/!g)\/\1.o \2/g\" > $(@:R:S/$/&.d/)"
.endfor

.for srcfile in $(SRCS)
$(srcfile:R:S/$/&.o_st_d/) : $(srcfile)
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(DEFINES) $(ST_DEFINES) $(D_DEFINES) -c $(srcfile) -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(INCPATH) $(srcfile) | sed \"s/\($(srcfile:T:R)\)\.o\([ :]*\)/$(srcfile:H:S!/!\\/!g)\/\1.o_st_d \2/g\" > $(@:R:S/$/&.d_st_d/)"

$(srcfile:R:S/$/&.o_st_o/) : $(srcfile)
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(O_CFLAGS) $(DEFINES) $(ST_DEFINES) $(O_DEFINES) -c $(srcfile) -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(O_DEFINES) $(INCPATH) $(srcfile) | sed \"s/\($(srcfile:T:R)\)\.o\([ :]*\)/$(srcfile:H:S!/!\\/!g)\/\1.o_st_o \2/g\" > $(@:R:S/$/&.d_st_o/)"

$(srcfile:R:S/$/&.o_sh_o/) : $(srcfile)
	$(CC) $(INCPATH) $(CFLAGS) $(SH_CFLAGS) $(O_CFLAGS) $(DEFINES) $(SH_DEFINES) $(O_DEFINES) -c $(srcfile) -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(SH_DEFINES) $(O_DEFINES) $(INCPATH) $(srcfile) | sed \"s/\($(srcfile:T:R)\)\.o\([ :]*\)/$(srcfile:H:S!/!\\/!g)\/\1.o_sh_o \2/g\" > $(@:R:S/$/&.d_sh_o/)"

$(srcfile:R:S/$/&.o_st_p/) : $(srcfile)
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(P_CFLAGS) $(DEFINES) $(ST_DEFINES) $(P_DEFINES) -c $(srcfile) -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(P_DEFINES) $(INCPATH) $(srcfile) | sed \"s/\($(srcfile:T:R)\)\.o\([ :]*\)/$(srcfile:H:S!/!\\/!g)\/\1.o_st_p \2/g\" > $(@:R:S/$/&.d_st_p/)"
.endfor

.for srcfile in $(SRCS) $(SRCS_R)
$(srcfile:R:S/$/&.o_st_r_d/) : $(srcfile)
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(R_CFLAGS) $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(R_DEFINES) -c $(srcfile) -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(R_DEFINES) $(INCPATH) $(srcfile) | sed \"s/\($(srcfile:T:R)\)\.o\([ :]*\)/$(srcfile:H:S!/!\\/!g)\/\1.o_st_r_d \2/g\" > $(@:R:S/$/&.d_st_r_d/)"

$(srcfile:R:S/$/&.o_st_r_o/) : $(srcfile)
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(O_CFLAGS) $(R_CFLAGS) $(DEFINES) $(ST_DEFINES) $(O_DEFINES) $(R_DEFINES) -c $(srcfile) -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(O_DEFINES) $(R_DEFINES) $(INCPATH) $(srcfile) | sed \"s/\($(srcfile:T:R)\)\.o\([ :]*\)/$(srcfile:H:S!/!\\/!g)\/\1.o_st_r_o \2/g\" > $(@:R:S/$/&.d_st_r_o/)"

$(srcfile:R:S/$/&.o_sh_r_o/) : $(srcfile)
	$(CC) $(INCPATH) $(CFLAGS) $(SH_CFLAGS) $(O_CFLAGS) $(R_CFLAGS) $(DEFINES) $(SH_DEFINES) $(O_DEFINES) $(R_DEFINES) -c $(srcfile) -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(SH_DEFINES) $(O_DEFINES) $(R_DEFINES) $(INCPATH) $(srcfile) | sed \"s/\($(srcfile:T:R)\)\.o\([ :]*\)/$(srcfile:H:S!/!\\/!g)\/\1.o_sh_r_o \2/g\" > $(@:R:S/$/&.d_sh_r_o/)"

$(srcfile:R:S/$/&.o_st_r_p/) : $(srcfile)
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(P_CFLAGS) $(R_CFLAGS) $(DEFINES) $(ST_DEFINES) $(P_DEFINES) $(R_DEFINES) -c $(srcfile) -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(P_DEFINES) $(R_DEFINES) $(INCPATH) $(srcfile) | sed \"s/\($(srcfile:T:R)\)\.o\([ :]*\)/$(srcfile:H:S!/!\\/!g)\/\1.o_st_r_p \2/g\" > $(@:R:S/$/&.d_st_r_p/)"
.endfor

.pl.in.pl :
	echo "#!$(PERL) -w" > $@
	$(CAT) $< >> $@
	chmod u+x $@

#
# Dependencies (not rules).
#

.for depfile in $(SRCS:R:S/$/&.d_st_d/) \
	$(SRCS:R:S/$/&.d_st_o/) \
	$(SRCS:R:S/$/&.d_sh_o/) \
	$(SRCS:R:S/$/&.d_st_p/)
.if exists($(depfile))
.include "$(depfile)"
.endif
.endfor

#@without_threads@WITH_THREADS=yes
#.ifdef WITHTHREADS
@without_threads@.for depfile in $(SRCS:R:S/$/&.d_st_r_d/) \
@without_threads@	$(SRCS_R:R:S/$/&.d_st_r_d/) \
@without_threads@	$(SRCS:R:S/$/&.d_st_r_o/) \
@without_threads@	$(SRCS_R:R:S/$/&.d_st_r_o/) \
@without_threads@	$(SRCS:R:S/$/&.d_sh_r_o/) \
@without_threads@	$(SRCS_R:R:S/$/&.d_sh_r_o/) \
@without_threads@	$(SRCS:R:S/$/&.d_st_r_p/) \
@without_threads@	$(SRCS_R:R:S/$/&.d_st_p_d/)
@without_threads@.if exists($(depfile))
@without_threads@.include "$(depfile)"
@without_threads@.endif
@without_threads@.endfor
#.endif

.for depfile in $(CTESTS:R:S/$/&.d/) $(BTESTS:R:S/$/&.d/)
.if exists($(depfile))
.include "$(depfile)"
.endif
.endfor

$(LIB_ST_D) : $(SRCS:R:S/$/&.o_st_d/)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_O) : $(SRCS:R:S/$/&.o_st_o/)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_SH_O) : $(SRCS:R:S/$/&.o_sh_o/)
	$(CC) -shared -o $@ $>

$(LIB_ST_P) : $(SRCS:R:S/$/&.o_st_p/)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_R_D) : $(SRCS:R:S/$/&.o_st_r_d/) $(SRCS_R:R:S/$/&.o_st_r_d/)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_R_O) : $(SRCS:R:S/$/&.o_st_r_o/) $(SRCS_R:R:S/$/&.o_st_r_o/)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_SH_R_O) : $(SRCS:R:S/$/&.o_sh_r_o/) $(SRCS_R:R:S/$/&.o_sh_r_o/)
	$(CC) -shared -o $@ $>

$(LIB_ST_R_P) : $(SRCS:R:S/$/&.o_st_r_p/) $(SRCS:R:S/$/&.o_st_r_p/)
	$(AR) cru $@ $?
	$(RANLIB) $@

stat_dbg : $(LIB_ST_D)
stat_opt : $(LIB_ST_O)
shar_opt : $(LIB_SH_O)
stat_prof : $(LIB_ST_P)
stat_dbg_r : $(LIB_ST_R_D)
stat_opt_r : $(LIB_ST_R_O)
shar_opt_r : $(LIB_SH_R_O)
stat_prof_r : $(LIB_ST_R_P)

FORCE :

#
# user 'make'ables
#

all_s : stat_dbg stat_opt stat_prof @disable_shared@shar_opt

all_r : stat_dbg_r stat_opt_r stat_prof_r @disable_shared@shar_opt_r

libs : all

bins :

tests : $(CTESTS) $(PTESTS) $(BTESTS)

check : tests
	@$(VERIFY) -- -d $(CTESTS) -s $(PTESTS)

install : install_s @without_threads@install_r

install_s : install_stat_dbg install_stat_opt install_stat_prof \
	@disable_shared@install_shar_opt

install_r : install_stat_dbg_r install_stat_opt_r install_stat_prof_r \
	@disable_shared@install_shar_opt_r

install_common : all
	$(SHELL) -c \
	'@INSTALL@ -d @prefix@/include/libstash; \
	@INSTALL@ -d @prefix@/include/libstash; \
	for i in $(INCS); do \
	@INSTALL@ -m 0644 $$i @prefix@/include/libstash/; \
	@INSTALL@ -d @prefix@/lib; \
	done; \
	'

install_common_r : install_common
	$(SHELL) -c \
	'for i in $(INCS_R); do \
	@INSTALL@ -m 0644 $$i @prefix@/include/libstash/; \
	done; \
	'

install_stat_dbg : stat_dbg install_common
	@INSTALL@ -m 0444 $(LIB_ST_D) @prefix@/lib

install_stat_opt : stat_opt install_common
	@INSTALL@ -m 0444 $(LIB_ST_O) @prefix@/lib

install_shar_opt : shar_opt install_common
	@INSTALL@ -m 0444 $(LIB_SH_O) @prefix@/lib

install_stat_prof : stat_prof install_common
	@INSTALL@ -m 0444 $(LIB_ST_P) @prefix@/lib

install_stat_dbg_r : stat_dbg_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_ST_R_D) @prefix@/lib

install_stat_opt_r : stat_opt_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_ST_R_O) @prefix@/lib

install_shar_opt_r : shar_opt_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_SH_R_O) @prefix@/lib

install_stat_prof_r : stat_prof_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_ST_R_P) @prefix@/lib

uninstall :
	rm -f @prefix@/lib/lib$(LIB)*
	rm -rf @prefix@/include/libstash

doc :

clean : FORCE
	rm -f *~ */*~ */*/*~
	rm -f *.bak *.BAK
	rm -f core test/core
	rm -f *.core test/*.core
	rm -f test/*.o test/*.out
	rm -f test/*.diff test/*.pl
	rm -f $(CTESTS) $(PTESTS) $(BTESTS)
	rm -f src/*.[do]_*
	rm -f lib/lib*
	rm -f test/*.d
	rm -f test/*.diff

distclean : clean
	rm -f "#"*"#" bin/"#"*"#"
	rm -f src/"#"*"#" include/"#"*"#"
	rm -f Makefile Makefile.bsd Makefile.gnu
	rm -f config.cache config.log 
	rm -f config.status
	rm -f include/libstash/libstash_defs.h
	rm -f TAGS
	rm -f $(VERIFY) test/*.perf

etags : $(INCS) $(INCS_R) $(PRIV_INCS) $(PRIV_INCS_R) $(SRCS) $(SRCS_R)
	@ETAGS@ $(INCS) $(INCS_R) $(PRIV_INCS) $(PRIV_INCS_R) $(SRCS) $(SRCS_R)
