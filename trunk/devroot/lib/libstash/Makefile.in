# -*-mode:makefile-*-
# @configure_input@
#############################################################################
#
# <Copyright = "jasone">
# <License>
#
#############################################################################
#
# Version: <Version>
#
# Description: Master Makefile for libstash.
#              
##############################################################################

#
# File lists.
#

# Include files that _are_ installed.
INCS := libstash.h stash_incs.h bhp.h buf.h dbg.h lex.h list.h log.h matrix.h \
	mem.h oh.h res.h treen.h

INCS_R := libstash_r.h locks.h thread.h

# Include files that are _not_ installed.
PRIV_INCS := bhp_priv.h lex_priv.h list_priv.h log_priv.h mem_priv.h oh_priv.h \
	res_priv.h

PRIV_INCS_R := locks_priv.h

# Source files.
SRCS := libstash.c bhp.c buf.c dbg.c lex.c list.c log.c matrix.c mem.c oh.c \
	res.c treen.c

SRCS_R := locks.c thread.c

# Simple tests.  Output is diff'ed with the expected (.exp file) output.
CTESTS := c_buf_a.c c_cnd_a.c c_jtl_a.c c_list_a.c c_log_a.c c_matrix_a.c \
	c_mtx_a.c c_oh_a.c c_oh_b.c c_res_a.c c_rwl_a.c c_sem_a.c c_thd_a.c \
	c_treen_a.c

# Hopelessly broken.
# c_bhp_a.c 

# Perl scripts that drive the BTESTS.
PTESTS := p19980828a.pl.in

# Backend test programs that are driven by the PTESTS.
BTESTS := b19980828a.c

# Munge the filename lists so that they are prefixed by the directory they're
# in, relative to @top_srcdir@.  Also, convert the test names to their final
# names.
INCS := $(addprefix include/libstash/,$(INCS))
INCS_R := $(addprefix include/libstash/,$(INCS_R))
PRIV_INCS := $(addprefix include/libstash/,$(PRIV_INCS))
PRIV_INCS_R := $(addprefix include/libstash/,$(PRIV_INCS_R))
SRCS := $(addprefix src/,$(SRCS))
SRCS_R := $(addprefix src/,$(SRCS_R))
override CTESTS := $(addprefix test/,$(CTESTS:.c=))
override BTESTS := $(addprefix test/,$(BTESTS:.c=))
override PTESTS := $(addprefix test/,$(PTESTS:.pl.in=.pl))

#
# Library names.
#

LIB := stash

LIB_REV := 0.0

LIB_ST_D := lib/lib$(strip $(LIB))_d.a
LIB_ST_O := lib/lib$(strip $(LIB)).a
LIB_SH_O := lib/lib$(strip $(LIB)).so.$(strip $(LIB_REV))
LIB_ST_P := lib/lib$(strip $(LIB))_p.a
LIB_ST_R_D := lib/lib$(strip $(LIB))_r_d.a
LIB_ST_R_O := lib/lib$(strip $(LIB))_r.a
LIB_SH_R_O := lib/lib$(strip $(LIB))_r.so.$(strip $(LIB_REV))
LIB_ST_R_P := lib/lib$(strip $(LIB))_r_p.a

#
# Standard definitions.
#

SHELL   := /bin/sh
CC	:= @CC@
AR	:= @AR@
RANLIB	:= @RANLIB@
INSTALL	:= @INSTALL@
CAT     := @CAT@
PERL    := @PERL@
BASENAME:= @BASENAME@
DIFF    := @DIFF@
PMERGE  := @top_srcdir@/bin/pmerge
PSTUB   := @top_srcdir@/bin/pstub

#
# Compiler flags.
#

LIBPATH := -L@top_srcdir@/lib
EXTRALIBS := @LIBS@
INCPATH := -I@top_srcdir@/include @CPPFLAGS@

DEFINES := @DEFS@
ST_DEFINES := 
SH_DEFINES := 
D_DEFINES := -D_STASH_DBG
O_DEFINES := 
P_DEFINES := 
R_DEFINES := -D_CW_REENTRANT
TEST_DEFINES := -D_STASH_DEBUG

CFLAGS := -Wall -pipe @CFLAGS@
ST_CFLAGS := 
SH_CFLAGS := -fPIC -DPIC
D_CFLAGS := -g3
O_CFLAGS := -O3
P_CFLAGS := -O3 -pg
R_CFLAGS :=

# Clear out all vpaths, then set just one (default vpath) for the main build
# directory.
vpath
vpath % .

# Need this here since the includes have dependencies in them, but there's
# stuff in the includes that we need to see before using $(TARGETS).
all : all_s @without_threads@all_r

#
# Common rules
#

.SUFFIXES :
.SUFFIXES : .a .c .h .o .d .pl.in .pl \
	.o_st_d .o_st_o .o_sh_o .o_st_p \
	.o_st_r_d .o_st_r_o .o_sh_r_o .o_st_r_p \
	.d_st_d .d_st_o .d_sh_o .d_st_p \
	.d_st_r_d .d_st_r_o .d_sh_r_o .d_st_r_p

#
# Build rules.
#

# This rule is used to build the tests.
% : %.c $(LIB_ST_R_D)
	$(CC) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(R_CFLAGS) $(INCPATH) $(DEFINES) $(R_DEFINES) $(TEST_DEFINES) -c $< -o $(@:=.o)
	$(CC) -o $@ $(@:=.o) $(LIB_ST_R_D) $(LIBPATH) -dynamic $(EXTRALIBS)
	$(SHELL) -ec "$(CC) -M $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o \2/g\" > $(@:%=%.o)"

obj/st_d/%.o_st_d : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(DEFINES) $(ST_DEFINES) $(D_DEFINES) -c $< -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_d \2/g\" > $(@:%.o_st_d=%.d_st_d)"

obj/st_o/%.o_st_o : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(O_CFLAGS) $(DEFINES) $(ST_DEFINES) $(O_DEFINES) -c $< -o $@		
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(O_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_o \2/g\" > $(@:%.o_st_o=%.d_st_o)"

obj/sh_o/%.o_sh_o : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(SH_CFLAGS) $(O_CFLAGS) $(DEFINES) $(SH_DEFINES) $(O_DEFINES) -c $< -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(SH_DEFINES) $(O_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_sh_o \2/g\" > $(@:%.o_sh_o=%.d_sh_o)"

obj/st_p/%.o_st_p : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(P_CFLAGS) $(DEFINES) $(ST_DEFINES) $(P_DEFINES) -c $< -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(P_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_p \2/g\" > $(@:%.o_st_p=%.d_st_p)"

obj/st_r_d/%.o_st_r_d : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(R_CFLAGS) $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(R_DEFINES) -c $< -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(R_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_r_d \2/g\" > $(@:%.o_st_r_d=%.d_st_r_d)"

obj/st_r_o/%.o_st_r_o : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(O_CFLAGS) $(R_CFLAGS) $(DEFINES) $(ST_DEFINES) $(O_DEFINES) $(R_DEFINES) -c $< -o $@		
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(O_DEFINES) $(R_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_r_o \2/g\" > $(@:%.o_st_r_o=%.d_st_r_o)"

obj/sh_r_o/%.o_sh_r_o : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(SH_CFLAGS) $(O_CFLAGS) $(R_CFLAGS) $(DEFINES) $(SH_DEFINES) $(O_DEFINES) $(R_DEFINES) -c $< -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(SH_DEFINES) $(O_DEFINES) $(R_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_sh_r_o \2/g\" > $(@:%.o_sh_r_o=%.d_sh_r_o)"

obj/st_r_p/%.o_st_r_p : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(P_CFLAGS) $(R_CFLAGS) $(DEFINES) $(ST_DEFINES) $(P_DEFINES) $(R_DEFINES) -c $< -o $@
	$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(P_DEFINES) $(R_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_r_p \2/g\" > $(@:%.o_st_r_p=%.d_st_r_p)"

.pl.in.pl :
	$(PERL) -w $(PMERGE) $(PERL) $(PSTUB) $< $@

#
# Dependencies (not rules).
#

-include $(SRCS:src/%.c=obj/st_d/%.d_st_d)
-include $(SRCS:src/%.c=obj/st_o/%.d_st_o)
-include $(SRCS:src/%.c=obj/sh_o/%.d_sh_o)
-include $(SRCS:src/%.c=obj/st_p/%.d_st_p)
@without_threads@-include $(SRCS:src/%.c=obj/st_r_d/%.d_st_r_d) \
@without_threads@	$(SRCS_R:src/%.c=obj/st_r_d/%.d_st_r_d)
@without_threads@-include $(SRCS:src/%.c=obj/st_r_o/%.d_st_r_o) \
@without_threads@	$(SRCS_R:src/%.c=obj/st_r_o/%.d_st_r_o)
@without_threads@-include $(SRCS:src/%.c=obj/sh_r_o/%.d_sh_r_o) \
@without_threads@	$(SRCS_R:src/%.c=obj/sh_r_o/%.d_sh_r_o)
@without_threads@-include $(SRCS:src/%.c=obj/st_r_p/%.d_st_r_p) \
@without_threads@	$(SRCS_R:src/%.c=obj/st_r_p/%.d_st_r_p)
ifneq ($(strip $(CTESTS)),)
-include $(CTESTS:=.d)
endif
ifneq ($(strip $(BTESTS)),)
-include $(BTESTS:=.d)
endif

$(LIB_ST_D) : $(SRCS:src/%.c=obj/st_d/%.o_st_d)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_O) : $(SRCS:src/%.c=obj/st_o/%.o_st_o)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_SH_O) : $(SRCS:src/%.c=obj/sh_o/%.o_sh_o)
	$(CC) -shared -o $@ $^

$(LIB_ST_P) : $(SRCS:src/%.c=obj/st_p/%.o_st_p)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_R_D) : $(SRCS:src/%.c=obj/st_r_d/%.o_st_r_d) \
	$(SRCS_R:src/%.c=obj/st_r_d/%.o_st_r_d)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_R_O) : $(SRCS:src/%.c=obj/st_r_o/%.o_st_r_o) \
	$(SRCS_R:src/%.c=obj/st_r_o/%.o_st_r_o)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_SH_R_O) : $(SRCS:src/%.c=obj/sh_r_o/%.o_sh_r_o) \
	$(SRCS_R:src/%.c=obj/sh_r_o/%.o_sh_r_o)
	$(CC) -shared -o $@ $^

$(LIB_ST_R_P) : $(SRCS:src/%.c=obj/st_r_p/%.o_st_r_p) \
	$(SRCS_R:src/%.c=obj/st_r_p/%.o_st_r_p)
	$(AR) cru $@ $?
	$(RANLIB) $@

stat_dbg : $(LIB_ST_D)
stat_opt : $(LIB_ST_O)
shar_opt : $(LIB_SH_O)
stat_prof : $(LIB_ST_P)
stat_dbg_r : $(LIB_ST_R_D)
stat_opt_r : $(LIB_ST_R_O)
shar_opt_r : $(LIB_SH_R_O)
stat_prof_r : $(LIB_ST_R_P)

FORCE :

#
# user 'make'ables
#

all_s : stat_dbg stat_opt shar_opt stat_prof

all_r : stat_dbg_r stat_opt_r shar_opt_r stat_prof_r

tests : $(CTESTS) $(PTESTS) $(BTESTS)

check : tests
	@$(SHELL) -c \
	'echo Running regression tests: ; \
	echo "---------------------------------------------" ;\
	for i in $(PTESTS); do \
	echo -n "$$i..."; \
	./$$i; \
	done; \
	for i in $(CTESTS); do \
	echo -n "$$i..."; \
	./$$i > ./$$i.out 2>&1; \
	$(DIFF) $$i.out $$i.exp > $$i.diff ; \
	if [ -s $$i.diff ] ; then \
	echo "failed. ****************" ; \
	else \
	echo "passed." ; \
	rm $$i.diff ; \
	fi \
	done ; \
	echo "---------------------------------------------" ;\
	echo ;\
	echo The following regression tests failed: ; \
	echo "---------------------------------------------" ;\
	for i in `find ./test -print | grep "\.diff$$"`; do \
	echo `echo $$i | sed "s/\.\/\(.*\)\.diff/\1/g"`; \
	done; \
	echo "---------------------------------------------" \
	'

install : install_s @without_threads@install_r

install_s : install_stat_dbg install_stat_opt install_shar_opt install_stat_prof

install_r : install_stat_dbg_r install_stat_opt_r install_shar_opt_r \
	install_stat_prof_r

install_common : 
	$(SHELL) -c \
	'@INSTALL@ -d @prefix@/include/libstash; \
	@INSTALL@ -d @prefix@/include/libstash; \
	for i in $(INCS); do \
	@INSTALL@ -m 0644 $$i @prefix@/include/libstash/; \
	@INSTALL@ -d @prefix@/lib; \
	done; \
	'

install_common_r : install_common
	$(SHELL) -c \
	'for i in $(INCS_R); do \
	@INSTALL@ -m 0644 $$i @prefix@/include/libstash/; \
	done; \
	'

install_stat_dbg : stat_dbg install_common
	@INSTALL@ -m 0444 $(LIB_ST_D) @prefix@/lib

install_stat_opt : stat_opt install_common
	@INSTALL@ -m 0444 $(LIB_ST_O) @prefix@/lib

install_shar_opt : shar_opt install_common
	@INSTALL@ -m 0444 $(LIB_SH_O) @prefix@/lib

install_stat_prof : stat_prof install_common
	@INSTALL@ -m 0444 $(LIB_ST_P) @prefix@/lib

install_stat_dbg_r : stat_dbg_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_ST_R_D) @prefix@/lib

install_stat_opt_r : stat_opt_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_ST_R_O) @prefix@/lib

install_shar_opt_r : shar_opt_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_SH_R_O) @prefix@/lib

install_stat_prof_r : stat_prof_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_ST_R_P) @prefix@/lib

uninstall :
	rm -f @prefix@/lib/lib$(strip $(LIB))*
	rm -rf @prefix@/include/libstash

doc :

clean : FORCE
	rm -f *~ */*~
	rm -f *.bak *.BAK
	rm -f core test/core *.core test/*.core
	rm -f test/*.o test/*.out test/*.diff test/*.pl
	rm -f $(CTESTS) $(PTESTS) $(BTESTS)
	rm -f obj/*/*.[do]*
	rm -f lib/lib*
	rm -f test/*.d
	rm -f test/*.diff

distclean : clean
	rm -f "#"*"#" bin/"#"*"#" src/"#"*"#" include/"#"*"#"
	rm -f Makefile
	rm -f config.cache config.log config.status include/libstash/libstash.h
	rm -f TAGS
	rm -f $(PMERGE)
	rm -f $(PSTUB)

etags : $(INCS) $(INCS_R) $(PRIV_INCS) $(PRIV_INCS_R) $(SRCS) $(SRCS_R)
	@ETAGS@ $(INCS) $(INCS_R) $(PRIV_INCS) $(PRIV_INCS_R) $(SRCS) $(SRCS_R)
