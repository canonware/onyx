.ig \" -*-mode:nroff-*-

<Copyright = "jasone">
<License>

$Source$
$Author: jasone $
$Revision: 146 $
$Date: 1998-07-18 23:45:49 -0700 (Sat, 18 Jul 1998) $
..
.Dd $Date: 1998-07-18 23:45:49 -0700 (Sat, 18 Jul 1998) $
.Dt libstash 3s
.Os
.Sh NAME
.Nm libstash
.Nd Library of algorithms and data structures designed for transaction
processing.
.Sh SYNOPSIS
\fB#include <libstash/libstash.h>\fR
.Sh DESCRIPTION
The \fBlibstash\fR library defines a number of algorithms and data structures
that are useful for many purposes, but the library specifically targets the
needs of transaction processing.

\fBlibstash\fR is designed to run on *nix platforms.  Additionally,
\fBlibstash\fR requires the \fBpthreads\fR library for operation.  Though
any complete \fBpthreads\fR implementation will work, \fBlibstash\fR
assumes that kernel threads are being used.  If this is not the case,
\fBlibstash\fR will perform rather poorly due to the way blocking system
calls are handled.

.Sh CODE STRUCTURE
.Ss Object-oriented C
The algorithms and data structures in \fBlibstash\fR are architected in an
object-oriented manner, though all the actual code is C.  Since C doesn't
directly support object-oriented design, a number of stylistic conventions
are used.

Each class is referred to by a name, which is used as a prefix for all member
methods.  For example, open hashing is implemented by the \fBoh\fR class, and 
member methods of \fBoh\fR are named \fBoh_new()\fR, \fBoh_delete()\fR, 
\fBoh_item_insert()\fR, etc.

.Ss Variable types
\fBlibstash\fR is careful to use the following data types rather than the
built-in types (other than when using system library functions) to allow easy 
porting and explicit knowledge of variable sizes.

The following types are defined by \fBlibstash.h\fR:

.nf
Type name    Size (bytes)  Description
-----------------------------------------------------------
cw_bool_t          4       Boolean, either FALSE or TRUE.
cw_sint8_t         1       Signed 8 bit variable.  
cw_uint8_t         1       Unsigned 8 bit variable.
cw_sint16_t        2       Signed 16 bit variable.  
cw_uint16_t        2       Unsigned 16 bit variable.
cw_sint32_t        4       Signed 32 bit variable.  
cw_uint32_t        4       Unsigned 32 bit variable.
cw_sint64_t        8       Signed 64 bit variable.  
cw_uint64_t        8       Unsigned 64 bit variable.
cw_float4_t        4       4 byte floating point variable.
cw_float8_t        8       8 byte floating point variable.
cw_float12_t      12       12 byte floating point variable.
.fi

.Ss Preprocessor macros
The following preprocessor macros are defined for use with \fBlibstash\fR:

.Bl -item -compact
.It 
\fB_cw_malloc()\fR, \fB_cw_calloc()\fR, \fB_cw_realloc()\fR, and 
\fB_cw_free()\fR are wrappers for the standard library memory allocation 
routines.
.It
.Sy _cw_marker(<double-quoted string>)
Print a string to the log.
.It
.Sy _cw_error(<double-quoted string>)
Print a string to the log and exit.
.It
.Sy _cw_check_ptr(<pointer>)
Check whether a pointer is \fBNULL\fR, and if so, exit.
.El

.Ss Including headers
Rather than directly including header files, preprocessor macros are defined
before including libstash.h.  For example, to use the oh class, _INC_OH_H_
should be defined.  The manpages for individual classes tell what preprocessor
macros to define when using various classes.

.Ss Variable naming
Though the variable naming conventions used in \fBlibstash\fR are far short
of what Hungarian and other naming conventions attempt, it is still useful, 
perhaps even more useful than other systems.

Variable name can have a prefix and/or a prefix:

.nf
{Pre/Suf}fix  Description
-----------------------------------------------------------
a_            Function argument.
_o            Class instance (object).
g_            Global variable.
.fi

.Sh SEE ALSO
.Xr stash_os 3s ,
.Xr stash_list 3s ,
.Xr stash_thread 3s ,
.Xr stash_log 3s ,
.Xr stash_bhp 3s ,
.Xr stash_br 3s ,
.Xr stash_dbg 3s ,
.Xr stash_glob 3s ,
.Xr stash_locks 3s ,
.Xr stash_mem 3s ,
.Xr stash_res 3s ,
.Xr stash_sock 3s ,
.Xr stash_zt 3s
