.ig \" -*-mode:nroff-*-

<Copyright = jasone>
<License>

Version: <Version>
..
.TH libstash_treen 3s "libstash, version <Version>"
.Nm libstash_treen
.hy 1
.SH NAME
treen - Arbitrary tree (tree node).
.SH SYNOPSIS
\fB#include <libstash/libstash.h>\fR

.I cw_treen_t *
.br
.B treen_new
.RI ( "cw_treen_t *a_treen" ", " "cw_mem_t *a_mem" ", "
.IR "cw_opaque_dealloc_t *a_dealloc_func" ", " 
.IR "void *a_dealloc_arg" )

.I void
.br
.B treen_delete
.RI ( "cw_treen_t *a_treen" )

.I void
.br
.B treen_link
.RI ( "cw_treen_t *a_treen" ", " "cw_treen_t *a_parent" )

.I cw_treen_t *
.br
.B treen_get_parent
.RI ( "cw_treen_t *a_treen" )

.I cw_treen_t *
.br
.B treen_get_child
.RI ( "cw_treen_t *a_treen" )

.I cw_treen_t *
.br
.B treen_get_sibling
.RI ( "cw_treen_t *a_treen" )

.I void *
.br
.B treen_get_data_ptr
.RI ( "cw_treen_t *a_treen" )

.I void
.br
.B treen_set_data_ptr
.RI ( "cw_treen_t *a_treen" ", " "void *a_data" )

.SS Debugging (dbg) symbols
None.

.SH DESCRIPTION
Implementation of arbitrary trees.  Each treen (tree node) can have an arbitrary
number of children.  In actuality, each treen only has one child pointer, so
children must be accessed by traversing to the child, then iterating on a
sibling ring.  This allows the treen structure to be a constant size, regardless
of the fan-out.  Care must be taken when iterating on the sibling ring with
\fBtreen_get_sibling\fR() to detect the point of wrap-around.

.SH USAGE
.I cw_treen_t *
.br
.B treen_new
.RI ( "cw_treen_t *a_treen" ", " "cw_mem_t *a_mem" ", "
.IR "cw_opaque_dealloc_t *a_dealloc_func" ", " 
.IR "void *a_dealloc_arg" )
.RS
Input(s):
.RS
.IR a_treen :
.RS
Pointer to space for a treen, or NULL.
.RE
.IR a_mem :
.RS
Pointer to the allocator to use internally.
.RE
.IR a_dealloc_func :
.RS
non-NULL: Pointer to a deallocation function.
.br
NULL: No deallocation function.
.br
Ignored if (NULL == a_treen).
.RE
.IR a_dealloc_arg :
.RS
First argument to a_dealloc_func.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a treen.
.br
NULL: Memory allocation error.
.RE
.RE
Description:
.RS
Constructor.
.RE
.RE

.I void
.br
.B treen_delete
.RI ( "cw_treen_t *a_treen" )
.RS
Input(s):
.RS
.IR a_treen :
.RS
Pointer to a treen.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Destructor.
.RE
.RE

.I void
.br
.B treen_link
.RI ( "cw_treen_t *a_treen" ", " "cw_treen_t *a_parent" )
.RS
Input(s):
.RS
.IR a_treen :
.RS
Pointer to a treen.
.RE
.IR a_parent :
.RS
Pointer to a treen, or NULL (no parent).
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Make a_treen a child of a_parent.  If a_parent already has one or more siblings,
a_treen is inserted into the sibling ring such that iterating on the sibling
ring, starting at \fBtreen_get_child\fR(a_parent) will get to a_treen last.
.RE
.RE

.I cw_treen_t *
.br
.B treen_get_parent
.RI ( "cw_treen_t *a_treen" )
.RS
Input(s):
.RS
.IR a_treen :
.RS
Pointer to a treen.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a treen.
.br
NULL: No parent.
.RE
.RE
Description:
.RS
Return a pointer to a_treen's parent.
.RE
.RE

.I cw_treen_t *
.br
.B treen_get_child
.RI ( "cw_treen_t *a_treen" )
.RS
Input(s):
.RS
.IR a_treen :
.RS
Pointer to a treen.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a treen.
.br
NULL: No children.
.RE
.RE
Description:
.RS
Return a pointer to a_treen's first child.
.RE
.RE

.I cw_treen_t *
.br
.B treen_get_sibling
.RI ( "cw_treen_t *a_treen" )
.RS
Input(s):
.RS
.IR a_treen :
.RS
Pointer to a treen.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
Pointer to a treen.
.br
If (a_treen == retval), there are no siblings.
.RE
.RE
Description:
.RS
Return a pointer to a_treen's sibling.
.RE
.RE

.I void *
.br
.B treen_get_data_ptr
.RI ( "cw_treen_t *a_treen" )
.RS
Input(s):
.RS
.IR a_treen :
.RS
Pointer to a treen.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
Pointer to data.
.RE
.RE
Description:
.RS
Return a pointer to the data for a_treen.
.RE
.RE

.I void
.br
.B treen_set_data_ptr
.RI ( "cw_treen_t *a_treen" ", " "void *a_data" )
.RS
Input(s):
.RS
.IR a_treen :
.RS
Pointer to a treen.
.RE
.IR a_data :
.RS
Pointer to data.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Set the pointer for data for a_treen.
.RE
.RE

.SH SEE ALSO
libstash(3s), libstash_mem(3s).

.SH HISTORY
Written by Jason Evans <jasone@canonware.com>.
