.ig \" -*-mode:nroff-*-

<Copyright = jasone>
<License>

Version: <Version>
..
.TH libstash_ql 3s "libstash, version <Version>"
.Nm libstash_ql
.hy 1
.SH NAME
ql - List macros
.SH SYNOPSIS
\fB#include <libstash/libstash.h>\fR

.SS Data structures
.B ql_head
.RI ( "<ql_type> a_type" )

.B ql_head_initializer
.RI ( "cw_ql_t *a_ql" )

.B ql_elm
.RI ( "<ql_type> a_type" )

.SS Operations
.I void
.br
.B ql_new
.RI ( "cw_ql_t *a_head" )

.I void
.br
.B ql_elm_new
.RI ( "<ql_type> *a_elm" ", " "<field_name> a_field" )

.I <ql_type> *
.br
.B ql_first
.RI ( "cw_ql_t *a_head" )

.I <ql_type> *
.br
.B ql_last
.RI ( "cw_ql_t *a_head" )

.I <ql_type> *
.br
.B ql_next
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )

.I <ql_type> *
.br
.B ql_prev
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )

.I void
.br
.B ql_before_insert
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_qlelm" ", " "<ql_type> *a_elm"
.RI ", " "<field_name> a_field" )

.I void
.br
.B ql_after_insert
.RI ( "<ql_type> *a_qlelm" ", " "<ql_type> *a_elm" ", "
.IR "<field_name> a_field" )

.I void
.br
.B ql_head_insert
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )

.I void
.br
.B ql_tail_insert
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )

.I void
.br
.B ql_remove
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )

.I void
.br
.B ql_head_remove
.RI ( "cw_ql_t *a_head" ", " "<ql_type> a_type" ", " "<field_name> a_field" )

.I void
.br
.B ql_tail_remove
.RI ( "cw_ql_t *a_head" ", " "<ql_type> a_type" ", " "<field_name> a_field" )

.B ql_foreach
.RI ( "<ql_type> *a_var" ", " "<ql_type> *a_ql" ", "
.IR "<field_name> a_field" )

.B ql_foreach_reverse
.RI ( "<ql_type> *a_var" ", " "<ql_type> *a_ql" ", "
.IR "<field_name> a_field" )

.SS Debugging (dbg) symbols
None.

.SH DESCRIPTION
The \fBql\fR macros implement operations on a list.  The type of the list
elements and which field of the elements to use are determined by arguments that
are passed into the macros.  The macros are optimized for speed and code size,
which means that there is minimal error checking built in.  As a result, care
must be taken to assure that these macros are ussed as intended, or strange
things can happen.

Internally, the list is represented as a ring, so with some care, the \fBql\fR
and \fBqr\fR interfaces can be used in conjunction with each other.

Since a \fBql\fR is actually a ring, it is possible to have multiple \fBql\fR
heads that share the same ring.  This works just fine, with the caveat that
operations on one \fBql\fR can have side-effects on another.

.SH USAGE
.SS Data structures
.B ql_head
.RI ( "<ql_type> a_type" )
.RS
Input(s):
.RS
.IR a_type :
.RS
Data type for the \fBql\fR elements.
.RE
.RE
Output(s):
.RS
A data structure that can be used as a \fBql\fR head.
.RE
Description:
.RS
Generate code for a \fBql\fR head data structure.
.RE
.RE

.B ql_head_initializer
.RI ( "<ql_type> *a_head" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Statically initialize a \fBql\fR head.
.RE
.RE

.B ql_elm
.RI ( "<ql_type> a_type" )
.RS
Input(s):
.RS
.IR a_type :
.RS
Data type for the \fBql\fR elements.
.RE
.RE
Output(s):
.RS
A data structure that can be used as a \fBql\fR element.
.RE
Description:
.RS
Generate code for a \fBql\fR element data structure.
.RE
.RE

.SS Operations
.I void
.br
.B ql_new
.RI ( "cw_ql_t *a_head" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Constructor.
.RE
.RE

.I void
.br
.B ql_elm_new
.RI ( "<ql_type> *a_elm" ", " "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_elm :
.RS
Pointer to an element.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Constructor.
.RE
.RE

.I <ql_type> *
.br
.B ql_first
.RI ( "cw_ql_t *a_head" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a the first element in a_head.
.br
NULL: a_head is empty.
.RE
.RE
Description:
.RS
Return a pointer to the first element in the \fBql\fR.
.RE
.RE

.I <ql_type> *
.br
.B ql_last
.RI ( "cw_ql_t *a_head" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a the last element in a_head.
.br
NULL: a_head is empty.
.RE
.RE
Description:
.RS
Return a pointer to the last element in the \fBql\fR.
.RE
.RE

.I <ql_type> *
.br
.B ql_next
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_elm :
.RS
Pointer to an element.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a the element after a_elm.
.br
NULL: a_elm is the last element in a_head.
.RE
.RE
Description:
.RS
Return a pointer to the element in a_head after a_elm.
.RE
.RE

.I <ql_type> *
.br
.B ql_prev
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_elm :
.RS
Pointer to an element.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
.IR retval :
.RS
non-NULL: Pointer to a the element before a_elm.
.br
NULL: a_elm is the first element in a_head.
.RE
.RE
Description:
.RS
Return a pointer to the element in a_head before a_elm.
.RE
.RE

.I void
.br
.B ql_before_insert
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_qlelm" ", " "<ql_type> *a_elm"
.RI ", " "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_qlelm :
.RS
Pointer to an element within a_head.
.RE
.IR a_elm :
.RS
Pointer to an element.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Insert a_elm into a_head before a_qlelm.
.RE
.RE

.I void
.br
.B ql_after_insert
.RI ( "<ql_type> *a_qlelm" ", " "<ql_type> *a_elm" ", "
.IR "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_qlelm :
.RS
Pointer to an element within a_head.
.RE
.IR a_elm :
.RS
Pointer to an element.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Insert a_elm into a_head after a_qlelm.
.RE
.RE

.I void
.br
.B ql_head_insert
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_elm :
.RS
Pointer to an element.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Insert a_elm at the head of a_head.
.RE
.RE

.I void
.br
.B ql_tail_insert
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_elm :
.RS
Pointer to an element.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Insert a_elm at the tail of a_head.
.RE
.RE

.I void
.br
.B ql_remove
.RI ( "cw_ql_t *a_head" ", " "<ql_type> *a_elm" ", " "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_elm :
.RS
Pointer to an element.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Remove a_elm from a_head.
.RE
.RE

.I void
.br
.B ql_head_remove
.RI ( "cw_ql_t *a_head" ", " "<ql_type> a_type" ", " "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_type :
.RS
Data type for the \fBql\fR elements.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Remove the head element of a_head.
.RE
.RE

.I void
.br
.B ql_tail_remove
.RI ( "cw_ql_t *a_head" ", " "<ql_type> a_type" ", " "<field_name> a_field" )
.RS
Input(s):
.RS
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_type :
.RS
Data type for the \fBql\fR elements.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Remove the tail element of a_head.
.RE
.RE

.B ql_foreach
.RI ( "<ql_type> *a_var" ", " "<ql_type> *a_head" ", "
.IR "<field_name> a_field" )
.RS
Input(s):
.IR a_var :
.RS
The name of a temporary variable to use for iteration.
.RE
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Iterate through the \fBql\fR, storing a pointer to each element in a_var along
the way.
.RE
.RE

.B ql_foreach_reverse
.RI ( "<ql_type> *a_var" ", " "<ql_type> *a_head" ", "
.IR "<field_name> a_field" )
.RS
Input(s):
.IR a_var :
.RS
The name of a temporary variable to use for iteration.
.RE
.IR a_head :
.RS
Pointer to a \fBql\fR head.
.RE
.IR a_field :
.RS
Field within the \fBql\fR elements to use.
.RE
.RE
Output(s):
.RS
None.
.RE
Description:
.RS
Iterate through the \fBql\fR in the reverse direction, storing a pointer to each
element in a_var along the way.
.RE
.RE

.SH SEE ALSO
libstash(3s).

.SH HISTORY
Written by Jason Evans <jasone@canonware.com>.
