# -*-mode:makefile-*-
# @configure_input@
#############################################################################
#
# <Copyright = jasone>
# <License>
#
#############################################################################
#
# Version: <Version>
#
# Description: Master GNU-compatible Makefile for libstash.
#              
##############################################################################

# File lists.
include Makefile.files

# Munge the filename lists so that they are prefixed by the directory they're
# in, relative to @top_srcdir@.  Also, convert the test names to their final
# names.
INCS := $(addprefix include/libstash/,$(INCS))
INCS_R := $(addprefix include/libstash/,$(INCS_R))
PRIV_INCS := $(addprefix include/libstash/,$(PRIV_INCS))
PRIV_INCS_R := $(addprefix include/libstash/,$(PRIV_INCS_R))
SRCS := $(addprefix src/,$(SRCS))
SRCS_R := $(addprefix src/,$(SRCS_R))
override CTESTS := $(addprefix test/,$(CTESTS:.c=))
override BTESTS := $(addprefix test/,$(BTESTS:.c=))
override PTESTS := $(addprefix test/,$(PTESTS:.pl.in=.pl))
MANPAGES := $(addprefix man/man3/,$(MANPAGES))

#
# Library names.
#

LIB := stash

LIB_REV := 0.0

LIB_ST_D := lib/lib$(strip $(LIB))_d.a
LIB_ST_O := lib/lib$(strip $(LIB)).a
LIB_SH_O := lib/lib$(strip $(LIB)).so.$(strip $(LIB_REV))
LIB_ST_P := lib/lib$(strip $(LIB))_p.a
LIB_ST_R_D := lib/lib$(strip $(LIB))_r_d.a
LIB_ST_R_O := lib/lib$(strip $(LIB))_r.a
LIB_SH_R_O := lib/lib$(strip $(LIB))_r.so.$(strip $(LIB_REV))
LIB_ST_R_P := lib/lib$(strip $(LIB))_r_p.a

#
# Standard definitions.
#

SHELL   := /bin/sh
CC	:= @CC@
AR	:= @AR@
RANLIB	:= @RANLIB@
INSTALL	:= @INSTALL@
CAT     := @CAT@
PERL    := @PERL@
BASENAME:= @BASENAME@
DIFF    := @DIFF@
VERIFY  := test/verify
PMERGE  := test/pmerge
PSTUB   := test/pstub

#
# Compiler flags.
#

LIBPATH := -Llib
EXTRALIBS := @LDFLAGS@ @LIBS@
INCPATH := -Iinclude @CPPFLAGS@

DEFINES := @DEFS@
ST_DEFINES := 
SH_DEFINES := 
D_DEFINES := -D_LIBSTASH_DBG
O_DEFINES := 
P_DEFINES := 
R_DEFINES := -D_CW_REENTRANT
TEST_DEFINES := -D_LIBSTASH_DEBUG

CFLAGS := -Wall -pipe @CFLAGS@
ST_CFLAGS := 
SH_CFLAGS := -fPIC -DPIC
D_CFLAGS := -g3
O_CFLAGS := -O3
P_CFLAGS := -O3 -pg
R_CFLAGS :=

# Clear out all vpaths, then set just one (default vpath) for the main build
# directory.
vpath
vpath % .

# Need this here since the includes have dependencies in them, but there's
# stuff in the includes that we need to see before using $(TARGETS).
all : all_s @without_threads@all_r

#
# Common rules
#

.SUFFIXES :
.SUFFIXES : .a .c .h .o .d .pl.in .pl \
	.o_st_d .o_st_o .o_sh_o .o_st_p \
	.o_st_r_d .o_st_r_o .o_sh_r_o .o_st_r_p \
	.d_st_d .d_st_o .d_sh_o .d_st_p \
	.d_st_r_d .d_st_r_o .d_sh_r_o .d_st_r_p

#
# Build rules.
#

# This rule is used to build the tests.
% : %.c $(LIB_ST_R_D)
	$(CC) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(R_CFLAGS) $(INCPATH) $(DEFINES) $(R_DEFINES) $(TEST_DEFINES) -c $< -o $(@:=.o)
	$(CC) -o $@ $(@:=.o) $(LIB_ST_R_D) $(LIBPATH) $(EXTRALIBS)
	@$(SHELL) -ec "$(CC) -M $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o \2/g\" > $(@:%=%.d)"

src/%.o_st_d : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(DEFINES) $(ST_DEFINES) $(D_DEFINES) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_d \2/g\" > $(@:%.o_st_d=%.d_st_d)"

src/%.o_st_o : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(O_CFLAGS) $(DEFINES) $(ST_DEFINES) $(O_DEFINES) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(O_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_o \2/g\" > $(@:%.o_st_o=%.d_st_o)"

src/%.o_sh_o : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(SH_CFLAGS) $(O_CFLAGS) $(DEFINES) $(SH_DEFINES) $(O_DEFINES) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(DEFINES) $(SH_DEFINES) $(O_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_sh_o \2/g\" > $(@:%.o_sh_o=%.d_sh_o)"

src/%.o_st_p : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(P_CFLAGS) $(DEFINES) $(ST_DEFINES) $(P_DEFINES) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(P_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_p \2/g\" > $(@:%.o_st_p=%.d_st_p)"

src/%.o_st_r_d : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(R_CFLAGS) $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(R_DEFINES) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(D_DEFINES) $(R_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_r_d \2/g\" > $(@:%.o_st_r_d=%.d_st_r_d)"

src/%.o_st_r_o : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(O_CFLAGS) $(R_CFLAGS) $(DEFINES) $(ST_DEFINES) $(O_DEFINES) $(R_DEFINES) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(O_DEFINES) $(R_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_r_o \2/g\" > $(@:%.o_st_r_o=%.d_st_r_o)"

src/%.o_sh_r_o : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(SH_CFLAGS) $(O_CFLAGS) $(R_CFLAGS) $(DEFINES) $(SH_DEFINES) $(O_DEFINES) $(R_DEFINES) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(DEFINES) $(SH_DEFINES) $(O_DEFINES) $(R_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_sh_r_o \2/g\" > $(@:%.o_sh_r_o=%.d_sh_r_o)"

src/%.o_st_r_p : src/%.c
	$(CC) $(INCPATH) $(CFLAGS) $(ST_CFLAGS) $(P_CFLAGS) $(R_CFLAGS) $(DEFINES) $(ST_DEFINES) $(P_DEFINES) $(R_DEFINES) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(DEFINES) $(ST_DEFINES) $(P_DEFINES) $(R_DEFINES) $(INCPATH) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_r_p \2/g\" > $(@:%.o_st_r_p=%.d_st_r_p)"

.pl.in.pl :
	echo "#!$(PERL) -w" > $@
	$(CAT) $< >> $@
	chmod u+x $@

#
# Dependencies (not rules).
#

-include $(SRCS:%.c=%.d_st_d)
-include $(SRCS:%.c=%.d_st_o)
-include $(SRCS:%.c=%.d_sh_o)
-include $(SRCS:%.c=%.d_st_p)
@without_threads@-include $(SRCS:%.c=%.d_st_r_d) \
@without_threads@	$(SRCS_R:%.c=%.d_st_r_d)
@without_threads@-include $(SRCS:%.c=%.d_st_r_o) \
@without_threads@	$(SRCS_R:%.c=%.d_st_r_o)
@without_threads@-include $(SRCS:%.c=%.d_sh_r_o) \
@without_threads@	$(SRCS_R:%.c=%.d_sh_r_o)
@without_threads@-include $(SRCS:%.c=%.d_st_r_p) \
@without_threads@	$(SRCS_R:%.c=%.d_st_r_p)
ifneq ($(strip $(CTESTS)),)
-include $(CTESTS:=.d)
endif
ifneq ($(strip $(BTESTS)),)
-include $(BTESTS:=.d)
endif

$(LIB_ST_D) : $(SRCS:%.c=%.o_st_d)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_O) : $(SRCS:%.c=%.o_st_o)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_SH_O) : $(SRCS:%.c=%.o_sh_o)
	$(CC) -shared -o $@ $^

$(LIB_ST_P) : $(SRCS:%.c=%.o_st_p)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_R_D) : $(SRCS:%.c=%.o_st_r_d) \
	$(SRCS_R:%.c=%.o_st_r_d)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_R_O) : $(SRCS:%.c=%.o_st_r_o) \
	$(SRCS_R:%.c=%.o_st_r_o)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_SH_R_O) : $(SRCS:%.c=%.o_sh_r_o) \
	$(SRCS_R:%.c=%.o_sh_r_o)
	$(CC) -shared -o $@ $^

$(LIB_ST_R_P) : $(SRCS:%.c=%.o_st_r_p) \
	$(SRCS_R:%.c=%.o_st_r_p)
	$(AR) cru $@ $?
	$(RANLIB) $@

stat_dbg : $(LIB_ST_D)
stat_opt : $(LIB_ST_O)
shar_opt : $(LIB_SH_O)
stat_prof : $(LIB_ST_P)
stat_dbg_r : $(LIB_ST_R_D)
stat_opt_r : $(LIB_ST_R_O)
shar_opt_r : $(LIB_SH_R_O)
stat_prof_r : $(LIB_ST_R_P)

FORCE :

#
# user 'make'ables
#

all_s : stat_dbg stat_opt stat_prof @disable_shared@shar_opt

all_r : stat_dbg_r stat_opt_r stat_prof_r @disable_shared@shar_opt_r

libs : all

bins :

tests : $(CTESTS) $(PTESTS) $(BTESTS)

check : tests
	@$(VERIFY) -- -d $(CTESTS) -s $(PTESTS)

install : install_s @without_threads@install_r

install_s : install_stat_dbg install_stat_opt install_stat_prof \
	@disable_shared@install_shar_opt

install_r : install_stat_dbg_r install_stat_opt_r install_stat_prof_r \
	@disable_shared@install_shar_opt_r

install_common : all
	$(SHELL) -c \
	'@INSTALL@ -d @prefix@/include/libstash; \
	for i in $(INCS); do \
	@INSTALL@ -m 0644 $$i @prefix@/include/libstash/; \
	done; \
	@INSTALL@ -d @prefix@/man/man3; \
	for i in $(MANPAGES); do \
	@INSTALL@ -m 0644 $$i @prefix@/man/man3/; \
	done; \
	@INSTALL@ -d @prefix@/lib; \
	'

install_common_r : install_common
	$(SHELL) -c \
	'for i in $(INCS_R); do \
	@INSTALL@ -m 0644 $$i @prefix@/include/libstash/; \
	done; \
	'

install_stat_dbg : stat_dbg install_common
	@INSTALL@ -m 0444 $(LIB_ST_D) @prefix@/lib

install_stat_opt : stat_opt install_common
	@INSTALL@ -m 0444 $(LIB_ST_O) @prefix@/lib

install_shar_opt : shar_opt install_common
	@INSTALL@ -m 0444 $(LIB_SH_O) @prefix@/lib

install_stat_prof : stat_prof install_common
	@INSTALL@ -m 0444 $(LIB_ST_P) @prefix@/lib

install_stat_dbg_r : stat_dbg_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_ST_R_D) @prefix@/lib

install_stat_opt_r : stat_opt_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_ST_R_O) @prefix@/lib

install_shar_opt_r : shar_opt_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_SH_R_O) @prefix@/lib

install_stat_prof_r : stat_prof_r install_common install_common_r
	@INSTALL@ -m 0444 $(LIB_ST_R_P) @prefix@/lib

uninstall :
	rm -f @prefix@/lib/lib$(strip $(LIB))*
	rm -rf @prefix@/include/libstash
	$(SHELL) -c \
	'for i in $(MANPAGES); do \
	rm -f @prefix@/$$i; \
	done; \
	'

doc :

clean : FORCE
	rm -f *~ */*~ */*/*~
	rm -f *.bak *.BAK
	rm -f core test/core *.core test/*.core
	rm -f test/*.o test/*.out test/*.diff test/*.pl
	rm -f $(CTESTS) $(PTESTS) $(BTESTS)
	rm -f src/*.[do]_*
	rm -f lib/lib*
	rm -f test/*.d
	rm -f test/*.diff

distclean : clean
	rm -f "#"*"#" bin/"#"*"#" src/"#"*"#" include/"#"*"#"
	rm -f Makefile Makefile.gnu Makefile.bsd
	rm -f config.cache config.log config.status 
	rm -f include/libstash/libstash_defs.h
	rm -f TAGS
	rm -f $(VERIFY) test/*.perf
	rm -f $(PMERGE)
	rm -f $(PSTUB)

etags : $(INCS) $(INCS_R) $(PRIV_INCS) $(PRIV_INCS_R) $(SRCS) $(SRCS_R)
	@ETAGS@ $(INCS) $(INCS_R) $(PRIV_INCS) $(PRIV_INCS_R) $(SRCS) $(SRCS_R)
