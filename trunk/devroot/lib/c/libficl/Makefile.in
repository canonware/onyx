# -*-mode:makefile-*-
# @configure_input@
#############################################################################
#
# <Copyright = jasone>
# <License>
#
#############################################################################
#
# Version: <Version>
#
# Description: Master GNU-compatible Makefile for libficl.
#              
##############################################################################

# Include files that _are_ installed.
INCS := ficl.h

# Include files that are _not_ installed.
P_INCS := math64.h sysdep.h

# Source files.
SRCS := dict.c ficl.c math64.c softcore.c stack.c sysdep.c vm.c words.c

# Order matters, since later files may depend on words defined in earlier files.
SOFTWORDS := softcore.fr jhlocal.fr marker.fr# \
#	oo.fr classes.fr \
#	ficllocal.fr ifbrack.fr

# Simple tests.  Output is diff'ed with the expected (.exp file) output.
CTESTS := testmain.c

# Perl scripts that drive the BTESTS.
PTESTS :=

# Backend test programs that are driven by the PTESTS.
BTESTS :=

# Munge the filename lists so that they are prefixed by the directory they're
# in, relative to @top_srcdir@.  Also, convert the test and binary names to
# their final names.
INCS := $(addprefix include/libficl/,$(INCS))
P_INCS := $(addprefix include/libficl/,$(P_INCS))
SRCS := $(addprefix src/,$(SRCS))
SOFTWORDS := $(addprefix softwords/,$(SOFTWORDS))
override CTESTS := $(addprefix test/,$(CTESTS:.c=))
override BTESTS := $(addprefix test/,$(BTESTS:.c=))
override PTESTS := $(addprefix test/,$(PTESTS:.pl.in=.pl))

#
# Library names.
#

LIB := ficl

LIB_REV := 2.03

LIB_ST_D := lib/lib$(strip $(LIB))_d.a
LIB_ST_O := lib/lib$(strip $(LIB)).a
LIB_SH_O := lib/lib$(strip $(LIB)).so.$(strip $(LIB_REV))
LIB_ST_P := lib/lib$(strip $(LIB))_p.a

#
# Standard definitions.
#

SHELL   := /bin/sh
CC	:= @CC@
AR	:= @AR@
RANLIB	:= @RANLIB@
INSTALL	:= @INSTALL@
CAT     := @CAT@
PERL    := @PERL@
BASENAME:= @BASENAME@
DIFF    := @DIFF@
VERIFY  := test/verify

#
# Compiler flags.
#

LIBPATH := -Llib
EXTRALIBS := @LDFLAGS@ @LIBS@
TEST_LIBS := @TEST_LIBS@

CPPFLAGS := -Iinclude @CPPFLAGS@
ST_CPPFLAGS :=
SH_CPPFLAGS :=
D_CPPFLAGS := -D_LIBSTASH_DEBUG -D_LIBFICL_DBG
O_CPPFLAGS :=
P_CPPFLAGS :=
TEST_CPPFLAGS := -D_LIBSTASH_DEBUG -D_LIBFICL_DEBUG

CFLAGS := -Wall -pipe @CFLAGS@
ST_CFLAGS :=
SH_CFLAGS := -fPIC -DPIC
D_CFLAGS := -g3
O_CFLAGS := -O2
P_CFLAGS := -O2 -pg
TEST_CFLAGS := $(ST_CFLAGS) $(D_CFLAGS)

# Clear out all vpaths, then set just one (default vpath) for the main build
# directory.
vpath
vpath % .

# Need this here since the includes have dependencies in them, but there's
# stuff in the includes that we need to see before using $(TARGETS).
all : default

#
# Common rules
#

.SUFFIXES :
.SUFFIXES : .a .c .h .o .d .pl.in .pl \
	.o_st_d .o_st_o .o_sh_o .o_st_p \
	.d_st_d .d_st_o .d_sh_o .d_st_p

#
# Build rules.
#

test/% : test/%.o
	$(CC) -o $@ $< $(LIBPATH) $(LIB_ST_D) $(TEST_LIBS) $(EXTRALIBS)

test/%.o : test/%.c
	$(CC) $(CFLAGS) $(TEST_CFLAGS) $(CPPFLAGS) $(TEST_CPPFLAGS) -c $< -o $@
	@$(SHELL) -ec "$(CC) -M $(CPPFLAGS) $(TEST_CPPFLAGS) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o \2/g\" > $(@:%.o=%.d)"

src/%.o_st_d : src/%.c
	$(CC) $(CFLAGS) $(ST_CFLAGS) $(D_CFLAGS) $(CPPFLAGS) $(ST_CPPFLAGS) $(D_CPPFLAGS) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(CPPFLAGS) $(ST_CPPFLAGS) $(D_CPPFLAGS) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_d \2/g\" > $(@:%.o_st_d=%.d_st_d)"

src/%.o_st_o : src/%.c
	$(CC) $(CFLAGS) $(ST_CFLAGS) $(O_CFLAGS) $(CPPFLAGS) $(ST_CPPFLAGS) $(O_CPPFLAGS) -c $< -o $@		
	@$(SHELL) -ec "$(CC) -MM $(CPPFLAGS) $(ST_CPPFLAGS) $(O_CPPFLAGS) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_o \2/g\" > $(@:%.o_st_o=%.d_st_o)"

src/%.o_sh_o : src/%.c
	$(CC) $(CFLAGS) $(SH_CFLAGS) $(O_CFLAGS) $(CPPFLAGS) $(SH_CPPFLAGS) $(O_CPPFLAGS) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(CPPFLAGS) $(SH_CPPFLAGS) $(O_CPPFLAGS) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_sh_o \2/g\" > $(@:%.o_sh_o=%.d_sh_o)"

src/%.o_st_p : src/%.c
	$(CC) $(CFLAGS) $(ST_CFLAGS) $(P_CFLAGS) $(CPPFLAGS) $(ST_CPPFLAGS) $(P_CPPFLAGS) -c $< -o $@
	@$(SHELL) -ec "$(CC) -MM $(CPPFLAGS) $(ST_CPPFLAGS) $(P_CPPFLAGS) $< | sed \"s/\($(subst /,\/,$(notdir $(basename $@)))\)\.o\([ :]*\)/$(subst /,\/,$(strip $(dir $@)))\1.o_st_p \2/g\" > $(@:%.o_st_p=%.d_st_p)"

.pl.in.pl :
	echo "#!$(PERL) -w" > $@
	$(CAT) $< >> $@
	chmod u+x $@

#
# Dependencies (not rules).
#

-include $(SRCS:%.c=%.d_st_d)
-include $(SRCS:%.c=%.d_st_o)
-include $(SRCS:%.c=%.d_sh_o)
-include $(SRCS:%.c=%.d_st_p)
ifneq ($(strip $(CTESTS)),)
-include $(CTESTS:%=%.d)
endif
ifneq ($(strip $(BTESTS)),)
-include $(BTESTS:%=%.d)
endif

$(LIB_ST_D) : $(SRCS:%.c=%.o_st_d)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_ST_O) : $(SRCS:%.c=%.o_st_o)
	$(AR) cru $@ $?
	$(RANLIB) $@

$(LIB_SH_O) : $(SRCS:%.c=%.o_sh_o)
	$(CC) -shared -o $@ $^

$(LIB_ST_P) : $(SRCS:%.c=%.o_st_p)
	$(AR) cru $@ $?
	$(RANLIB) $@

stat_dbg : $(LIB_ST_D)
stat_opt : $(LIB_ST_O)
shar_opt : $(LIB_SH_O)
stat_prof : $(LIB_ST_P)

$(CTESTS) : $(LIB_ST_D)
$(BTESTS) : $(LIB_ST_D)

src/softcore.c : $(SOFTWORDS) softwords/softcore.pl
	./softwords/softcore.pl $(SOFTWORDS) > $@

FORCE :

#
# user 'make'ables
#

default : libs

libs : stat_dbg stat_opt stat_prof @disable_shared@shar_opt

tests : $(CTESTS) $(PTESTS) $(BTESTS)

check :
	@$(VERIFY) -- -d $(CTESTS) -s $(PTESTS)

install : install_stat_dbg install_stat_opt install_stat_prof \
	@disable_shared@install_shar_opt

install_common : libs
	$(SHELL) -c \
	'@INSTALL@ -d @prefix@/lib; \
	@INSTALL@ -d @prefix@/include/libficl; \
	for i in $(INCS); do \
	@INSTALL@ -m 0644 $$i @prefix@/include/libficl/; \
	done; \
	'

install_stat_dbg : stat_dbg install_common
	@INSTALL@ -m 0444 $(LIB_ST_D) @prefix@/lib

install_stat_opt : stat_opt install_common
	@INSTALL@ -m 0444 $(LIB_ST_O) @prefix@/lib

install_shar_opt : shar_opt install_common
	@INSTALL@ -m 0444 $(LIB_SH_O) @prefix@/lib

install_stat_prof : stat_prof install_common
	@INSTALL@ -m 0444 $(LIB_ST_P) @prefix@/lib

uninstall :
	rm -f @prefix@/lib/lib$(strip $(LIB))*
	rm -rf @prefix@/include/libficl

doc :

clean : FORCE
	rm -f *~ */*~ */*/*~
	rm -f *.bak *.BAK
	rm -f core test/core
	rm -f src/*.[do]_*
	rm -f test/*.[do]
	rm -f lib/lib*
	rm -f test/*.out test/*.diff test/*.pl $(CTESTS) $(PTESTS) $(BTESTS)
	rm -f src/softcore.c
	rm -f softwords/softcore.pl

distclean : clean
	rm -f "#"*"#" bin/"#"*"#" src/"#"*"#" include/"#"*"#"
	rm -f Makefile Makefile.bsd Makefile.gnu
	rm -f config.cache config.log config.status
	rm -f include/libficl/libficl_defs.h
	rm -f TAGS

etags : $(INCS) $(P_INCS) $(SRCS)
	@ETAGS@ $(INCS) $(P_INCS) $(SRCS)
