%-*-mode:latex-*-
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% <Copyright = jasone>
% <License>
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Version: <Version>
%
% libstil portion of Canonware Software Manual.
%              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\clearemptydoublepage
\chapter{libstil}
The \libname{libstil} library implements an embeddable \htmlref{stil}{stillang}
interpreter.  \libname{libstil} is designed to allow multiple interpreter
instances in the same program, though since \htmlref{stil}{stillang} is a
multi-threaded language, in most cases it makes more sense to use a single
interpreter with multiple threads.

\htmlref{stil}{stillang} is described elsewhere in this manual, so this chapter
documents the C API with as little information about the
\htmlref{stil}{stillang} language as possible.

\section{Compilation}
\begin{description}
\item[Normal: ] cc \filename{file} -lstil -lstash -lpthread
\item[Debug: ] cc -g -D\_LIBSTIL\_DBG -D\_LIBSTASH\_DBG \filename{file}
-lstil\_d -lstash\_d -lpthread
\item[Profile: ] cc -pg \filename{file} -lstil\_p -lstash\_p -lpthread
\end{description}

\section{Integration issues}
\libname{libstil} relies on \libname{libstash} for a number of features.  In
most cases, \libname{libstash} quietly does its job behind the scenes,
regardless of whether the application directly uses its functionality.  However,
\libname{libstil}'s garbage collector uses the \htmlref{\classname{thd}}{thd}
class to suspend and resume all other threads during the mark phase of atomic
collection.  For this to work, all threads that have any contact with
\libname{libstil} must be created using the \htmlref{\classname{thd}}{thd}
class.

This can cause integration headaches for existing threaded applications, but
there is no other portable way to suspend and resume threads.  The only
alternative is to modify \libname{libstil} to use synchronous garbage
collection, but this is only safe for applications that have a single thread
executing in the interpreter.  In other words, converting to synchronous garbage
collection requires stripping significant functionality out of
\libname{libstil}.  If you decide that you need to go this route, the author
would be interested in hearing from you; the work involved in implementing
synchronous garbage collection seems not worth the effort, considering the low
likelihood of anyone ever needing to use \libname{libstil} in this mode.

\section{Exceptions}
\libname{libstil} reserves \htmlref{xep}{xep} exception numbers 128 to 255 and
defines the following exceptions:
\begin{description}
\label{_CW_STILX_ERRORDICT}
\item[\cppdef{\_CW\_STILX\_ERRORDICT}: ]
	errordict not found, or handler not found in errordict.
\label{_CW_STILX_CURRENTERROR}
\item[\cppdef{\_CW\_STILX\_CURRENTERROR}: ]
	Error accessing currenterror.
\label{_CW_STILX_EXIT}
\item[\cppdef{\_CW\_STILX\_EXIT}: ]
	Internal use, for the exit operator.
\label{_CW_STILX_STOP}
\item[\cppdef{\_CW\_STILX\_STOP}: ]
	Internal use, for the stop operator.
\label{_CW_STILX_QUIT}
\item[\cppdef{\_CW\_STILX\_QUIT}: ]
	Internal use, for the quit operator, caught by the start operator.
\end{description}

\section{API}
\begin{description}
\label{_cw_stil_code}
\index{\cppmacro{\_cw\_stil\_code}{}}
\item[{\cppmacro[void]{\_cw\_stil\_code}{cw\_stilt\_t *a\_stilt, a\_code}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[a\_stilt: ]
			Pointer to a \classname{stilt}.
		\item[a\_code: ]
			A "-delimited string constant.
		\end{description}
	\item[Output(s): ] None.
	\item[Exception(s): ] Depends on actions of a\_code.
	\item[Description: ]
		Convenience macro for static embedded \htmlref{stil}{stillang}
		code.
	\end{description}
\end{description}

\section{Classes}
