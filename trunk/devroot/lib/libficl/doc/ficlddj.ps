%!PS-Adobe-3.0
%%Creator: xpdf/pdftops 0.80
%%Pages: 7
%%EndComments
%%BeginProlog
%%BeginResource: xpdf 0.80
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 14 def
/pdfSetup {
  pdfDictSize dict begin
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
} def
/pdfStartPage {
  2 array astore
  pdfSetup
  /setpagedevice where {
    pop 2 dict dup begin
      exch /PageSize exch def
      /ImagingBBox null def
    end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfEndPage { end } def
/sCol { pdfLastStroke not {
          pdfStroke aload length
          1 eq { setgray } { setrgbcolor} ifelse
          /pdfLastStroke true def /pdfLastFill false def
        } if } def
/fCol { pdfLastFill not {
          pdfFill aload length
          1 eq { setgray } { setrgbcolor } ifelse
          /pdfLastFill true def /pdfLastStroke false def
        } if } def
% build a font
/pdfMakeFont {
  3 2 roll findfont
  3 2 roll 1 matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q { end grestore } def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% color operators
/g { dup 1 array astore /pdfFill exch def setgray
    /pdfLastFill true def /pdfLastStroke false def } def
/G { dup 1 array astore /pdfStroke exch def setgray
     /pdfLastStroke true def /pdfLastFill false def } def
/rg { 3 copy 3 array astore /pdfFill exch def setrgbcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/RG { 3 copy 3 array astore /pdfStroke exch def setrgbcolor
     /pdfLastStroke true def /pdfLastFill false def } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def% path painting operators
/S { sCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/Tj { pdfTextRender 1 and 0 eq { fCol } { sCol } ifelse
      0 pdfTextRise pdfTextMat dtransform rmoveto
      pdfFontSize mul pdfHorizScaling mul
      1 index stringwidth pdfTextMat idtransform pop
      sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
      pdfWordSpacing 0 pdfTextMat dtransform 32
      4 3 roll pdfCharSpacing add 0 pdfTextMat dtransform
      6 5 roll awidthshow
      0 pdfTextRise neg pdfTextMat dtransform rmoveto } def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
% Level 1 image operators
/pdfIm1 {
  /pdfImBuf1 4 index string def
  { currentfile pdfImBuf1 readhexstring pop } image
} def
/pdfImM1 {
  /pdfImBuf1 4 index 7 add 8 idiv string def
  { currentfile pdfImBuf1 readhexstring pop } imagemask
} def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
/F6_0 /Helvetica 1.07563
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/bullet/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
/F8_0 /Times-Italic 0.99723
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/bullet/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
/F10_0 /Times-Roman 0.939086
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/bullet/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
/F15_0 /Helvetica-Oblique 1.05642
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/bullet/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
/F17_0 /Times-Roman 1.04061
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/bullet/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
/F21_0 /Times-Roman 0.761421
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/bullet/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
/F24_0 /Symbol 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/universal/numbersign/existential/percent/ampersand/suchthat
  /parenleft/parenright/asteriskmath/plus/comma/minus/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /congruent/Alpha/Beta/Chi/Delta/Epsilon/Phi/Gamma
  /Eta/Iota/theta1/Kappa/Lambda/Mu/Nu/Omicron
  /Pi/Theta/Rho/Sigma/Tau/Upsilon/sigma1/Omega
  /Xi/Psi/Zeta/bracketleft/therefore/bracketright/perpendicular/underscore
  /radicalex/alpha/beta/chi/delta/epsilon/phi/gamma
  /eta/iota/phi1/kappa/lambda/mu/nu/omicron
  /pi/theta/rho/sigma/tau/upsilon/omega1/omega
  /xi/psi/zeta/braceleft/bar/braceright/similar/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/Upsilon1/minute/lessequal/fraction/infinity/florin/club
  /diamond/heart/spade/arrowboth/arrowleft/arrowup/arrowright/arrowdown
  /degree/plusminus/second/greaterequal/multiply/proportional/partialdiff/bullet
  /divide/notequal/equivalence/approxequal/ellipsis/arrowvertex/arrowhorizex/carriagereturn
  /aleph/Ifraktur/Rfraktur/weierstrass/circlemultiply/circleplus/emptyset/intersection
  /union/propersuperset/reflexsuperset/notsubset/propersubset/reflexsubset/element/notelement
  /angle/gradient/registerserif/copyrightserif/trademarkserif/product/radical/dotmath
  /logicalnot/logicaland/logicalor/arrowdblboth/arrowdblleft/arrowdblup/arrowdblright/arrowdbldown
  /lozenge/angleleft/registersans/copyrightsans/trademarksans/summation/parenlefttp/parenleftex
  /parenleftbt/bracketlefttp/bracketleftex/bracketleftbt/bracelefttp/braceleftmid/braceleftbt/braceex
  /.notdef/angleright/integral/integraltp/integralex/integralbt/parenrighttp/parenrightex
  /parenrightbt/bracketrighttp/bracketrightex/bracketrightbt/bracerighttp/bracerightmid/bracerightbt/.notdef]
pdfMakeFont
/F26_0 /Helvetica 0.960384
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /bullet/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/bullet/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/bullet/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageOrientation: Portrait
612 792 pdfStartPage
%%EndPageSetup
[] 0 d
0 i
0 j
0 J
10 M
1 w
0 g
0 G
[1 0 0 1 0 0] Tm
0 0 Td
90.24 695.28 Td
0 g
0.0886 Tc
0.0034 Tw
/F6_0 13.92 Tf
(Ficl \226 an embeddable extension language interpreter) 24.812 Tj
90.24 677.76 Td
-0.0126 Tc
0.0126 Tw
/F8_0 12 Tf
(Forth for the rest of us) 9.12 Tj
90.24 650.16 Td
0.048 Tc
-0.048 Tw
/F10_0 12 Tf
(John Sadler) 4.64 Tj
90.24 636.24 Td
0 0 1 rg
0.12 Tc
0 Tw
(john_sadler@alum.mit.edu) 10.62 Tj
90.24 634.56 130.08 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 597.6 Td
0 g
0.0101 Tc
/F6_0 13.92 Tf
(1) 0.551 Tj
97.92 597.6 Td
0 Tc
0.012 Tw
( ) 0.275 Tj
111.84 597.6 Td
0.088 Tc
0 Tw
(Introduction) 5.769 Tj
90.24 579.84 Td
0.0362 Tc
0.0324 Tw
/F10_0 12 Tf
(Glue languages like PERL, tcl, and Python are popular because they help you get results) 35.06 Tj
90.24 566.16 Td
0.0348 Tc
-0.0648 Tw
(quickly. They make quick work of problems that are often tedious to code in C or C++,) 34.8 Tj
90.24 552.24 Td
0.0166 Tw
(and they can work with code written in other languages. People often miss this last) 32.86 Tj
90.24 538.56 Td
0.0417 Tc
-0.0417 Tw
(benefit because PERL or Python usually run standalone. Tcl, on the other hand, was) 33.4 Tj
90.24 524.64 Td
0.0822 Tc
-0.0268 Tw
(designed from scratch as an extension language and is relatively simple to insert into) 33.36 Tj
90.24 510.96 Td
0.0364 Tc
0.0073 Tw
(another program. All of these languages were designed to work with mainstream) 32.06 Tj
90.24 497.04 Td
0.0442 Tc
-0.0442 Tw
(operating systems, so they require lots of memory, a file system, and other resources that) 35.3 Tj
90.24 483.36 Td
0.0178 Tc
-0.0178 Tw
(are commonplace on a modern PC or workstation. In this article, I) 26.38 Tj
-2.64 Tc
0 Tw
(\222) 0.56 Tj
0.12 Tc
-0.12 Tw
(ll describe an) 5.18 Tj
90.24 469.44 Td
0.093 Tc
-0.093 Tw
(interpreter that has a system interface similar in spirit to tcl, but is specifically designed) 34.32 Tj
90.24 455.76 Td
0.0697 Tc
-0.0297 Tw
(for embedded systems with minimal resources. The syntax is ANS Forth, so I) 30.66 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
0.096 Tc
0.024 Tw
(ve called it) 4.28 Tj
90.24 442.08 Td
0.0584 Tc
-0.0584 Tw
(ficl, or Forth-Inspired Command Language.) 17.36 Tj
90.24 414.48 Td
0.0229 Tc
0.0731 Tw
(Ficl is Forth, but you don) 10.08 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
-0.0049 Tc
-0.0111 Tw
(t have to be a rabid Forth zealot to use it. In fact, you can do) 24.14 Tj
90.24 400.56 Td
0.0267 Tc
0.0333 Tw
(useful work without knowing any Forth at all. On the other hand, you can learn enough in) 35.66 Tj
90.24 386.88 Td
0.0133 Tc
-0.04 Tw
(a half-hour to do useful work. Read on, and I) 18.02 Tj
-2.64 Tc
0 Tw
(\222) 0.56 Tj
0.0209 Tc
0.0191 Tw
(ll show you. \(From here on, I) 11.66 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
0.06 Tc
-0.06 Tw
(ll use the) 3.54 Tj
90.24 372.96 Td
0.0635 Tc
0.0565 Tw
(words Forth and ficl interchangeably.\)) 15.12 Tj
90.24 345.36 Td
0.0522 Tc
-0.0122 Tw
(Why not write your own command interpreter? While tempting, this approach has its) 33.66 Tj
90.24 331.68 Td
0.0663 Tc
-0.0479 Tw
(disadvantages. For one thing, you usually wind up with something that has a line-oriented) 35.52 Tj
90.24 317.76 Td
0.072 Tc
-0.072 Tw
(syntax where the command is at the beginning and any arguments come afterwards, and) 34.78 Tj
90.24 304.08 Td
0.08 Tc
-0.04 Tw
(you can do one command per line. This is enough in many cases, and ficl can do this for) 34.8 Tj
90.24 290.16 Td
-0.0049 Tc
0.0485 Tw
(you, too. But what if your customer asks for a behavior that) 23.86 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
-0.0126 Tc
0.0126 Tw
(s not hard-coded in the) 9.16 Tj
90.24 276.48 Td
0.0065 Tc
-0.0225 Tw
(interpreter? What if it takes too long to transmit the command stream to run the product?) 35.48 Tj
90.24 262.56 Td
0.0896 Tc
0.0304 Tw
(How about diagnosing field failures? Ficl is a small but complete programming language,) 35.22 Tj
90.24 248.88 Td
-0.0215 Tc
0.0558 Tw
(not just a command interpreter, so you can hack together a prototype for that new) 32.64 Tj
90.24 234.96 Td
0.0592 Tc
-0.0352 Tw
(behavior. If communication overhead is too high, consider downloading common groups) 35.22 Tj
90.24 221.28 Td
0.0083 Tc
-0.0083 Tw
(of commands as stored programs, or ) 14.8 Tj
-0.0431 Tc
0.0697 Tw
(\223words\224 in Forth, and you can invoke them with a) 20.14 Tj
90.24 207.36 Td
0.0554 Tc
0.0303 Tw
(single alias. Because ficl is interactive, you can use it to help troubleshoot problems. One) 35.2 Tj
90.24 193.68 Td
0.0433 Tc
0.0017 Tw
(more advantage of using ficl is that you can find several good tutorials for free on the) 33.82 Tj
90.24 179.76 Td
0.046 Tc
-0.0117 Tw
(Web \(see the references\), so you save time on documentation and training: you only need) 35.44 Tj
90.24 166.08 Td
0.0063 Tc
-0.0063 Tw
(to document your extensions to the language.) 18.1 Tj
90.24 138.48 Td
0.0541 Tc
-0.0258 Tw
(As I implied above, people who do not program for a living can do useful work with ficl.) 35.24 Tj
90.24 124.56 Td
0.0695 Tc
-0.0258 Tw
(Your friendly neighborhood electrical engineer can bench test new hardware quite easily) 34.98 Tj
90.24 110.88 Td
0.0533 Tc
-0.0533 Tw
(using ficl, saving your time to add features or fix your own bugs \(not that there will be) 34.26 Tj
90.24 96.96 Td
0.0509 Tc
0 Tw
(any\). You can use a minimal ficl system to do rapid prototyping on new hardware,) 32.64 Tj
showpage
%%PageTrailer
pdfEndPage
%%Page: 2 2
%%BeginPageSetup
%%PageOrientation: Portrait
612 792 pdfStartPage
%%EndPageSetup
[] 0 d
0 i
0 j
0 J
10 M
1 w
0 g
0 G
[1 0 0 1 0 0] Tm
0 0 Td
90.24 708.96 Td
0 g
0.0473 Tc
0.0384 Tw
/F10_0 12 Tf
(getting new features to a demonstrable state normally in much less time than would be) 34.2 Tj
90.24 695.04 Td
0.064 Tc
-0.004 Tw
(required with a compiled language.) 13.94 Tj
90.24 667.68 Td
0.0101 Tc
0 Tw
/F6_0 13.92 Tf
(2) 0.551 Tj
97.92 667.68 Td
0 Tc
0.012 Tw
( ) 0.275 Tj
111.84 667.68 Td
0.098 Tc
0.034 Tw
(Using the language) 9.127 Tj
90.24 638.16 Td
0 Tc
0 Tw
/F15_0 12 Tf
(2.1) 1.4 Tj
107.04 638.16 Td
( ) 0.28 Tj
119.04 638.16 Td
-0.0565 Tc
0.0165 Tw
(Enough ficl syntax to make you dangerous) 20.58 Tj
90.24 621.36 Td
0.0511 Tc
-0.0292 Tw
/F10_0 12 Tf
(In the examples that follow, you may wish to download the ) 23.78 Tj
378.24 621.36 Td
0.14 Tc
-0.14 Tw
(ficlwin executable and play) 10.7 Tj
90.24 607.44 Td
0.03 Tc
0.05 Tw
(with the language. ) 7.54 Tj
181.44 607.44 Td
0.0951 Tc
-0.0231 Tw
(Ficlwin has some simulated hardware that will be useful later. ) 24.62 Tj
482.64 607.44 Td
0.1714 Tc
0 Tw
(Ficlwin) 2.9 Tj
90.24 593.76 Td
0.0209 Tc
-0.0209 Tw
(runs under Windows 95 or NT.) 12.48 Tj
90.24 566.16 Td
0.032 Tc
-0.032 Tw
/F17_0 12 Tf
(First Rule of ficl) 6.9 Tj
173.52 566.16 Td
0.064 Tc
-0.04 Tw
/F10_0 12 Tf
(: use spaces to separate everything. Forth is very simple-minded about) 27.84 Tj
90.24 552.24 Td
0.0253 Tc
0.0262 Tw
(parsing its input: it looks for space-delimited tokens, and tries to interpret them one by) 34.32 Tj
90.24 538.56 Td
0 Tc
0 Tw
(one.) 1.7 Tj
90.24 510.96 Td
0.015 Tc
-0.015 Tw
/F17_0 12 Tf
(Second Rule of ficl) 7.94 Tj
185.76 510.96 Td
0.048 Tc
0.192 Tw
/F10_0 12 Tf
(: if it) 1.88 Tj
-2.64 Tc
0 Tw
(\222) 0.56 Tj
-0.006 Tc
-0.014 Tw
(s not a word, try to make it a number. If that doesn) 20.32 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
-0.06 Tc
0.06 Tw
(t work, it) 3.7 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
0 Tc
(s) 0.38 Tj
90.24 497.04 Td
0.0343 Tc
-0.0343 Tw
(an error. A word is a named piece of code \(like a function or subroutine\) that may also) 34.38 Tj
90.24 483.36 Td
0.0296 Tc
-0.0146 Tw
(own some data. Words are organized into a list called a dictionary. For each token in the) 35.16 Tj
90.24 469.44 Td
0.0384 Tc
-0.0384 Tw
(input stream, the interpreter tries to find a word in the dictionary with the same name. If) 34.88 Tj
90.24 455.76 Td
0.0154 Tc
-0.0154 Tw
(successful, the interpreter will execute the word. Otherwise, the interpreter attempts to) 34.46 Tj
90.24 442.08 Td
0.024 Tc
-0.024 Tw
(convert the token to a number. If this fails, you get an error message. By the way, the) 33.92 Tj
90.24 428.16 Td
0.0789 Tc
-0.0235 Tw
(Second Rule means that you can do Evil Things like redefining your favorite number.) 33.8 Tj
90.24 400.56 Td
0.032 Tc
-0.032 Tw
/F17_0 12 Tf
(Third Rule of ficl) 7.36 Tj
179.04 400.56 Td
0.0226 Tc
0.0014 Tw
/F10_0 12 Tf
(: Words find their arguments on a stack. The interpreter pushes) 25.12 Tj
90.24 386.88 Td
0.0439 Tc
-0.0439 Tw
(numbers onto the stack automatically. The language does not have the equivalent of a) 34 Tj
90.24 372.96 Td
0 Tc
-0.0369 Tw
(function prototype, so Forth programmers use comments to show the state of the stack) 34.6 Tj
90.24 359.28 Td
0.0286 Tc
-0.0286 Tw
(before and after execution of a word. For example:) 20.24 Tj
90.24 346.32 Td
0 Tc
0 Tw
/F21_0 12 Tf
(+) 0.6 Tj
126.24 346.32 Td
(\( a b -- c \)) 7.2 Tj
90.24 331.68 Td
0.024 Tc
-0.084 Tw
/F10_0 12 Tf
(indicates that the word ) 9.32 Tj
-1.68 Tc
0 Tw
(\223) 0.56 Tj
0 Tc
(+) 0.56 Tj
-1.44 Tc
1.44 Tw
(\224 ) 0.82 Tj
0.0313 Tc
0.0123 Tw
(consumes two values from the stack \(a and b\) and leaves a) 23.24 Tj
90.24 318 Td
0.0362 Tc
-0.0362 Tw
(third \(c, the sum\). By the way, an open paren followed by a space tells the interpreter to) 34.9 Tj
90.24 304.08 Td
0.0206 Tc
-0.0629 Tw
(treat everything up to the next close paren as a comment. You can comment to the end of) 35.58 Tj
90.24 290.4 Td
0.064 Tc
0.016 Tw
(a line with a backslash character followed by a space.) 21.12 Tj
90.24 276.48 Td
0 Tc
0 Tw
(Here) 1.94 Tj
-2.88 Tc
(\222) 0.56 Tj
0.0218 Tc
0.0582 Tw
(s how you add two numbers in Forth \(if you) 17.52 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
0.0414 Tc
-0.0414 Tw
(ve ever used an RPN calculator, you) 14.5 Tj
90.24 262.8 Td
0.1156 Tc
0.0644 Tw
(will be in familiar territory\):) 11 Tj
90.24 249.84 Td
0 Tc
0 Tw
/F21_0 12 Tf
(2 3 ) 2.4 Tj
119.04 249.84 Td
(+  .) 2.4 Tj
90.24 235.44 Td
0.0229 Tc
-0.0229 Tw
/F10_0 12 Tf
(The interpreter pushes the number 2 and the number 3, then executes the word ) 31.52 Tj
-1.68 Tc
0 Tw
(\223) 0.56 Tj
0.12 Tc
(plus) 1.62 Tj
-1.44 Tc
1.44 Tw
(\224 ) 0.82 Tj
0.08 Tc
0 Tw
(and) 1.42 Tj
90.24 221.52 Td
0.1091 Tc
-0.1691 Tw
(finally executes the word ) 10.16 Tj
-1.68 Tc
0 Tw
(\223) 0.56 Tj
-0.08 Tc
(dot) 1.32 Tj
-1.44 Tc
(\224) 0.56 Tj
0.0373 Tc
-0.0973 Tw
(. This prints the top value on the stack, which I hope is) 21.78 Tj
90.24 207.84 Td
0.192 Tc
0 Tw
(five.) 1.72 Tj
90.24 193.92 Td
-0.0033 Tc
-0.0138 Tw
(There are really two stacks in Forth: one stores return addresses and the other stores) 33.58 Tj
90.24 180.24 Td
0.0185 Tc
-0.0185 Tw
(parameters. We) 6.24 Tj
-2.64 Tc
0 Tw
(\222) 0.56 Tj
0.0565 Tc
-0.0265 Tw
(ll refer to the parameter stack simply as ) 15.88 Tj
-1.68 Tc
0 Tw
(\223) 0.56 Tj
0 Tc
(the stack) 3.54 Tj
-1.44 Tc
1.44 Tw
(\224 ) 0.82 Tj
0.024 Tc
-0.024 Tw
(from now on.) 5.4 Tj
90.24 152.64 Td
0.0454 Tc
-0.0172 Tw
(Ficl is not case sensitive. Word names can be up to 255 characters long, but only the first) 35.3 Tj
90.24 138.72 Td
0.048 Tc
0.016 Tw
(31 characters will be stored. All words are stored in a linked list called the dictionary.) 33.84 Tj
90.24 125.04 Td
0.0126 Tc
-0.0126 Tw
(There exist words to allot space in the dictionary so that \(other\) words can have arbitrary) 35.4 Tj
90.24 111.12 Td
0.0343 Tc
-0.0343 Tw
(size data areas.) 6 Tj
90.24 83.52 Td
0.0465 Tc
0.0495 Tw
(Ficl has these main data structures:) 13.88 Tj
showpage
%%PageTrailer
pdfEndPage
%%Page: 3 3
%%BeginPageSetup
%%PageOrientation: Portrait
612 792 pdfStartPage
%%EndPageSetup
[] 0 d
0 i
0 j
0 J
10 M
1 w
0 g
0 G
[1 0 0 1 0 0] Tm
0 0 Td
90.24 708 Td
0 g
-6.24 Tc
0 Tw
/F24_0 12 Tf
(\267) 0.46 Tj
95.76 708 Td
0 Tc
/F26_0 12 Tf
( ) 0.28 Tj
108.24 708 Td
0.0439 Tc
-0.007 Tw
/F10_0 12 Tf
(A virtual machine stores one execution context, and would typically map to a thread.) 33.66 Tj
90.24 693.36 Td
-6.24 Tc
0 Tw
/F24_0 12 Tf
(\267) 0.46 Tj
95.76 693.36 Td
0 Tc
/F26_0 12 Tf
( ) 0.28 Tj
108.24 693.36 Td
0.0215 Tc
-0.04 Tw
/F10_0 12 Tf
(Each virtual machine has two stacks, one for parameters and the other for return) 31.94 Tj
108.24 679.44 Td
0.024 Tc
0 Tw
(addresses.) 4.06 Tj
90.24 664.8 Td
-6.24 Tc
/F24_0 12 Tf
(\267) 0.46 Tj
95.76 664.8 Td
0 Tc
/F26_0 12 Tf
( ) 0.28 Tj
108.24 664.8 Td
0.0351 Tc
-0.0351 Tw
/F10_0 12 Tf
(A word binds a name to code, and optionally, data.) 20.28 Tj
90.24 650.16 Td
-6.24 Tc
0 Tw
/F24_0 12 Tf
(\267) 0.46 Tj
95.76 650.16 Td
0 Tc
/F26_0 12 Tf
( ) 0.28 Tj
108.24 650.16 Td
0.0629 Tc
-0.0149 Tw
/F10_0 12 Tf
(The dictionary is a list of all words of the system.) 19.52 Tj
90.24 622.56 Td
0 Tc
0 Tw
(See Section 5 for more ) 9.42 Tj
203.28 622.56 Td
0.1527 Tc
-0.1527 Tw
(ficl syntax.) 4.28 Tj
90.24 585.36 Td
0 Tc
0 Tw
/F15_0 12 Tf
(2.2) 1.4 Tj
107.04 585.36 Td
( ) 0.28 Tj
119.04 585.36 Td
-0.24 Tw
(Porting ficl) 5.26 Tj
90.24 568.56 Td
0.0591 Tc
-0.0191 Tw
/F10_0 12 Tf
(As shown in Example 1, it only takes a few lines of code to hook ficl into your system:) 34.38 Tj
90.24 554.64 Td
0.0717 Tc
-0.0545 Tw
(initialize the ficl system data structures with a call to ficlInitSystem, and create one or) 33.88 Tj
90.24 540.96 Td
0.0778 Tc
-0.0778 Tw
(more virtual machines using ficlNewVM. After that, you simply feed blocks of text to the) 35.44 Tj
90.24 527.04 Td
0.064 Tc
-0.032 Tw
(virtual machine from an I/O device, a file, or stored strings using ficlExec. You can tear) 34.72 Tj
90.24 513.36 Td
0.0828 Tc
-0.1228 Tw
(down memory allocated to ficl with ) 14.36 Tj
264.96 513.36 Td
0.112 Tc
0 Tw
(ficlTermSystem.) 6.5 Tj
90.24 485.04 Td
0.0112 Tc
-0.0112 Tw
/F17_0 12 Tf
(Example 1: Code fragment to initialize and run FICL) 22.76 Tj
90.24 460.08 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(    FICL_VM *) 7.8 Tj
168.24 460.08 Td
(pVM;) 2.4 Tj
90.24 448.8 Td
0 Tc
-0.048 Tw
(    ) 2.4 Tj
114.24 448.8 Td
-0.048 Tc
0 Tw
(ficlInitSystem\(10000\); /* create a 10,000 cell dictionary */) 36 Tj
90.24 437.52 Td
0 Tc
-0.048 Tw
(    ) 2.4 Tj
114.24 437.52 Td
-0.048 Tc
0 Tw
(pVM = ) 3.6 Tj
150.24 437.52 Td
(ficlNewVM\(\);) 7.2 Tj
90.24 414.72 Td
(    for \(;;\)) 7.2 Tj
90.24 403.44 Td
(    {) 3 Tj
90.24 392.16 Td
0 Tc
-0.048 Tw
(        ) 4.8 Tj
138.24 392.16 Td
-0.048 Tc
0 Tw
(int ret;) 4.8 Tj
90.24 380.88 Td
(        gets\(in\);) 10.2 Tj
90.24 369.6 Td
(        ret = ) 8.4 Tj
174.24 369.6 Td
(ficlExec\() 5.4 Tj
228.24 369.6 Td
(pVM, in\);) 5.4 Tj
90.24 358.08 Td
(        if \(ret == VM_USEREXIT\)) 18.6 Tj
90.24 346.8 Td
(        {) 5.4 Tj
90.24 335.52 Td
0 Tc
-0.048 Tw
(            ) 7.2 Tj
162.24 335.52 Td
-0.048 Tc
0 Tw
(ficlTermSystem\(\);) 10.2 Tj
90.24 324.24 Td
(            break;) 10.8 Tj
90.24 312.96 Td
(        }) 5.4 Tj
90.24 301.44 Td
(    }) 3 Tj
84.48 496.08 0.48 0.48 re
f
84.48 496.08 0.48 0.48 re
f
84.96 496.08 442.56 0.48 re
f
527.52 496.08 0.48 0.48 re
f
527.52 496.08 0.48 0.48 re
f
84.48 284.64 0.48 211.44 re
f
84.48 284.16 0.48 0.48 re
f
84.48 284.16 0.48 0.48 re
f
84.96 284.16 442.56 0.48 re
f
527.52 284.64 0.48 211.44 re
f
527.52 284.16 0.48 0.48 re
f
527.52 284.16 0.48 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 259.68 Td
0.0584 Tc
-0.0104 Tw
/F10_0 12 Tf
(Ficl requires an ANSI C compiler and its runtime library to build and execute. Porting to) 35.08 Tj
90.24 245.76 Td
0.08 Tc
-0.0431 Tw
(a new CPU involves editing two files: sysdep.c and sysdep.h. The header file contains) 33.9 Tj
90.24 232.08 Td
0.053 Tc
-0.033 Tw
(macros that control build properties of ficl, and macros that insulate the implementation) 34.74 Tj
90.24 218.16 Td
0.0811 Tc
-0.0375 Tw
(from differences among compilers. Ficl interfaces to the operating system via four) 32.42 Tj
90.24 204.48 Td
0.072 Tc
0 Tw
(functions:) 3.92 Tj
90.24 189.84 Td
-6.24 Tc
/F24_0 12 Tf
(\267) 0.46 Tj
95.76 189.84 Td
0 Tc
/F26_0 12 Tf
( ) 0.28 Tj
108.24 189.84 Td
0.0777 Tc
-0.0039 Tw
/F10_0 12 Tf
(FiclMalloc and ficlFree map closely to the standard C malloc and free functions, but) 33.22 Tj
108.24 175.92 Td
0.0569 Tc
0.0169 Tw
(they act as a choke-point for ficl memory management in case your OS has) 29.7 Tj
108.24 162.24 Td
0.0522 Tc
-0.0522 Tw
(specialized functions for this purpose or \(gasp!\) you) 20.66 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
0.045 Tc
-0.045 Tw
(ve rolled your own.) 7.78 Tj
90.24 147.6 Td
-6.24 Tc
0 Tw
/F24_0 12 Tf
(\267) 0.46 Tj
95.76 147.6 Td
0 Tc
/F26_0 12 Tf
( ) 0.28 Tj
108.24 147.6 Td
0.0845 Tc
-0.0545 Tw
/F10_0 12 Tf
(ficlLockDictionary provides exclusive access to the dictionary in multithreaded) 31.28 Tj
108.24 133.68 Td
0.0913 Tc
-0.0313 Tw
(implementations. If you only intend to make one ficl Virtual Machine, this function) 32.82 Tj
108.24 120 Td
0.0655 Tc
0.0545 Tw
(can be empty.) 5.5 Tj
90.24 105.12 Td
-6.24 Tc
0 Tw
/F24_0 12 Tf
(\267) 0.46 Tj
95.76 105.12 Td
0 Tc
/F26_0 12 Tf
( ) 0.28 Tj
108.24 105.12 Td
0.0738 Tc
-0.0138 Tw
/F10_0 12 Tf
(ficlTextOut is like standard C) 11.7 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
0.03 Tc
-0.03 Tw
(s puts, except that it takes a virtual machine pointer and) 22.12 Tj
108.24 91.44 Td
0.0507 Tc
-0.0907 Tw
(one additional parameter to indicate whether to terminate the string with a newline) 32.76 Tj
108.24 77.52 Td
0.0267 Tc
0 Tw
(sequence.) 3.88 Tj
showpage
%%PageTrailer
pdfEndPage
%%Page: 4 4
%%BeginPageSetup
%%PageOrientation: Portrait
612 792 pdfStartPage
%%EndPageSetup
[] 0 d
0 i
0 j
0 J
10 M
1 w
0 g
0 G
[1 0 0 1 0 0] Tm
0 0 Td
90.24 708.96 Td
0 g
0.0377 Tc
-0.0217 Tw
/F10_0 12 Tf
(Because ficl is a 32 bit Forth, the language requires some 64-bit math. There are two) 33.62 Tj
90.24 695.04 Td
0.0921 Tc
-0.0266 Tw
(unsigned primitives in sysdep.c that handle this. One function multiplies two 32-bit) 32.74 Tj
90.24 681.36 Td
0.0559 Tc
-0.0418 Tw
(values to yield a 64-bit result, and the other divides a 64-bit value by a 32-bit value to) 33.92 Tj
90.24 667.44 Td
0.0811 Tc
-0.0442 Tw
(return a 32-bit quotient and remainder. These are usually simple to implement as inline) 34.26 Tj
90.24 653.76 Td
0.0424 Tc
-0.0557 Tw
(assembly for a 32 bit CPU \(see the Intel 386 example in the source\). I was too lazy to) 33.98 Tj
90.24 639.84 Td
0.0494 Tc
0.0306 Tw
(come up with a generic version in C. If you) 17.18 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
0.0189 Tc
0.0411 Tw
(re lazy too, you can kludge these functions to) 18.06 Tj
90.24 626.16 Td
0.0188 Tc
0.0065 Tw
(use only the low 32 bits of the 64 bit parameter and be safe \226 so long as you avoid) 32.68 Tj
90.24 612.24 Td
0.1785 Tc
-0.1305 Tw
(multiplying and dividing really big numbers!) 17.4 Tj
90.24 598.56 Td
0.0433 Tc
-0.0064 Tw
(Memory requirements of the code vary by processor. The dictionary is the largest RAM-) 35.18 Tj
90.24 584.64 Td
0.0094 Tc
-0.0278 Tw
(resident structure. The word-set that comes with the source requires fewer than 1000 cells) 35.86 Tj
90.24 570.96 Td
0.0255 Tc
-0.0105 Tw
(or 4K bytes. Stacks default to 128 cells \(512 bytes\) each, so you can fit a useful) 31.62 Tj
90.24 557.04 Td
0.0732 Tc
-0.0132 Tw
(implementation into 8K bytes RAM plus code space \(which can be in ROM\).) 30.54 Tj
90.24 543.36 Td
0.0822 Tc
-0.0662 Tw
(Use testmain.c as a guide to installing the ficl system and one or more virtual machines) 34.34 Tj
90.24 529.44 Td
0.0133 Tc
0.0187 Tw
(into your code. You do not need to include testmain.c in your build. The source package) 35.2 Tj
90.24 515.76 Td
0.0735 Tc
-0.0182 Tw
(includes a Win32 executable that will help you get a feel for the language.) 29.26 Tj
90.24 478.56 Td
0 Tc
0 Tw
/F15_0 12 Tf
(2.3) 1.4 Tj
107.04 478.56 Td
( ) 0.28 Tj
119.04 478.56 Td
-0.0626 Tc
0.0626 Tw
(Roll you own extensions in C) 14.02 Tj
90.24 461.52 Td
0.0324 Tc
-0.0324 Tw
/F10_0 12 Tf
(You can extend the language with words that are specific to your application, written in) 34.84 Tj
90.24 447.84 Td
0.0443 Tc
-0.0043 Tw
(C, in Forth, or in a mixture of C and Forth. Use the ficlBuild function to bind a C) 32.16 Tj
90.24 433.92 Td
0.0661 Tc
-0.0476 Tw
(function to a name in the dictionary. Functions that implement ficl words take one) 32.48 Tj
90.24 420.24 Td
0.0389 Tc
-0.0218 Tw
(parameter: a pointer to a FICL_VM. This pointer refers to the running virtual machine in) 35.28 Tj
90.24 406.32 Td
0.0473 Tc
-0.0691 Tw
(whose context the word executes. The files words.c and testmain.c have \(literally\)) 32.54 Tj
90.24 392.64 Td
0.0514 Tc
-0.0514 Tw
(hundreds of examples of words coded in C. Example 2 shows a function that interfaces) 34.52 Tj
90.24 378.72 Td
0.1029 Tc
-0.1029 Tw
(ficl to the Win32 ) 6.94 Tj
-1.68 Tc
0 Tw
(\223) 0.56 Tj
180 378.72 Td
0.144 Tc
(chdir) 2 Tj
-1.44 Tc
1.44 Tw
(\224 ) 0.82 Tj
0.09 Tc
0 Tw
(service.) 3.02 Tj
90.24 350.4 Td
0.045 Tc
-0.045 Tw
/F17_0 12 Tf
(Example 2: example ) 8.84 Tj
197.04 350.4 Td
0.0209 Tc
0.0991 Tw
(Ficl/C interface function) 10.4 Tj
90.24 328.08 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(/*) 1.2 Tj
90.24 316.8 Td
(** ) 1.8 Tj
108.24 316.8 Td
(Ficl interface to _) 11.4 Tj
222.24 316.8 Td
(chdir \(Win32\)) 7.8 Tj
90.24 305.28 Td
(** Gets a ) 6 Tj
150.24 305.28 Td
(newline \(or NULL\) delimited string from the input) 29.4 Tj
90.24 294 Td
(** ) 1.8 Tj
108.24 294 Td
(and feeds it to the Win32 ) 15.6 Tj
264.24 294 Td
(chdir function...) 10.2 Tj
90.24 282.72 Td
(** Usage example:) 10.2 Tj
90.24 271.44 Td
(**    ) 3.6 Tj
126.24 271.44 Td
(cd c:\\tmp) 5.4 Tj
90.24 260.16 Td
(*/) 1.2 Tj
90.24 248.64 Td
(static void ) 7.2 Tj
162.24 248.64 Td
(ficlChDir\(FICL_VM *) 11.4 Tj
276.24 248.64 Td
(pVM\)) 2.4 Tj
90.24 237.36 Td
({) 0.6 Tj
90.24 226.08 Td
(    FICL_STRING *) 10.2 Tj
192.24 226.08 Td
(pFS = \(FICL_STRING *\)) 12.6 Tj
318.24 226.08 Td
(pVM->pad;) 5.4 Tj
90.24 214.8 Td
0 Tc
-0.048 Tw
(    ) 2.4 Tj
114.24 214.8 Td
-0.048 Tc
0 Tw
(vmGetString\() 7.2 Tj
186.24 214.8 Td
(pVM, ) 3 Tj
216.24 214.8 Td
(pFS, '\\n'\);) 6.6 Tj
90.24 203.52 Td
(    if \() 4.8 Tj
138.24 203.52 Td
(pFS->count > 0\)) 9 Tj
90.24 192 Td
(    {) 3 Tj
90.24 180.72 Td
0 Tc
-0.048 Tw
(        ) 4.8 Tj
138.24 180.72 Td
-0.048 Tc
0 Tw
(int err = _) 6.6 Tj
204.24 180.72 Td
(chdir\() 3.6 Tj
240.24 180.72 Td
(pFS->text\);) 6.6 Tj
90.24 169.44 Td
(        if \(err\)) 9.6 Tj
90.24 158.16 Td
(        {) 5.4 Tj
90.24 146.88 Td
0 Tc
-0.048 Tw
(            ) 7.2 Tj
162.24 146.88 Td
-0.048 Tc
0 Tw
(vmTextOut\() 6 Tj
222.24 146.88 Td
(pVM, "Error: path not found", 1\);) 19.8 Tj
90.24 135.36 Td
0 Tc
-0.048 Tw
(            ) 7.2 Tj
162.24 135.36 Td
-0.048 Tc
0 Tw
(vmThrow\() 4.8 Tj
210.24 135.36 Td
(pVM, VM_QUIT\);) 8.4 Tj
90.24 124.08 Td
(        }) 5.4 Tj
90.24 112.8 Td
(    }) 3 Tj
90.24 101.52 Td
(    return;) 6.6 Tj
90.24 90.24 Td
(}) 0.6 Tj
84.48 361.68 0.48 0.48 re
f
84.48 361.68 0.48 0.48 re
f
84.96 361.68 442.56 0.48 re
f
527.52 361.68 0.48 0.48 re
f
527.52 361.68 0.48 0.48 re
f
84.48 76.08 0.48 285.6 re
f
84.48 75.6 0.48 0.48 re
f
84.48 75.6 0.48 0.48 re
f
84.96 75.6 442.56 0.48 re
f
527.52 76.08 0.48 285.6 re
f
527.52 75.6 0.48 0.48 re
f
527.52 75.6 0.48 0.48 re
f
showpage
%%PageTrailer
pdfEndPage
%%Page: 5 5
%%BeginPageSetup
%%PageOrientation: Portrait
612 792 pdfStartPage
%%EndPageSetup
[] 0 d
0 i
0 j
0 J
10 M
1 w
0 g
0 G
[1 0 0 1 0 0] Tm
0 0 Td
90.24 710.88 Td
0 g
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(/* Here's the corresponding ) 16.8 Tj
258.24 710.88 Td
(ficlBuild call...) 10.2 Tj
90.24 699.6 Td
(** ) 1.8 Tj
108.24 699.6 Td
(ficlBuild\(") 6.6 Tj
174.24 699.6 Td
(cd",       ) 6.6 Tj
240.24 699.6 Td
(ficlChDir,    FW_DEFAULT\);) 15.6 Tj
90.24 688.08 Td
(*/) 1.2 Tj
84.48 719.28 0.48 0.48 re
f
84.48 719.28 0.48 0.48 re
f
84.96 719.28 442.56 0.48 re
f
527.52 719.28 0.48 0.48 re
f
527.52 719.28 0.48 0.48 re
f
84.48 671.52 0.48 47.76 re
f
84.48 671.04 0.48 0.48 re
f
84.48 671.04 0.48 0.48 re
f
84.96 671.04 442.56 0.48 re
f
527.52 671.52 0.48 47.76 re
f
527.52 671.04 0.48 0.48 re
f
527.52 671.04 0.48 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 646.32 Td
0.0574 Tc
-0.0374 Tw
/F10_0 12 Tf
(To write a new ficl word in Forth, follow the examples in ) 22.98 Tj
368.88 646.32 Td
0.0178 Tc
-0.0178 Tw
(softcore.c: embed the source in) 12.42 Tj
90.24 632.4 Td
0.0442 Tc
-0.0122 Tw
(a string constant, and feed the string to ficlExec once you have a virtual machine created.) 35.36 Tj
90.24 618.72 Td
0 Tc
0 Tw
(You) 1.74 Tj
-2.64 Tc
(\222) 0.56 Tj
0.0525 Tc
0.0075 Tw
(ll also find some examples of words coded in a mixture of C and Forth in words.c) 32.32 Tj
90.24 604.56 Td
0 Tc
0 Tw
(\(see ) 1.86 Tj
112.56 604.56 Td
/F21_0 12 Tf
(evaluate) 4.8 Tj
170.16 604.56 Td
0.0674 Tc
-0.0019 Tw
/F10_0 12 Tf
(, for example\). Because ficlExec calls can be nested, you can invoke) 26.98 Tj
90.24 590.16 Td
0.071 Tc
-0.0196 Tw
(ficlExec from within a function that implements a word and feed it a string argument,) 33.76 Tj
90.24 576.24 Td
0.1091 Tc
-0.0491 Tw
(effectively mixing the two languages.) 14.74 Tj
90.24 537.6 Td
0.0101 Tc
0 Tw
/F6_0 13.92 Tf
(3) 0.551 Tj
97.92 537.6 Td
0 Tc
0.012 Tw
( ) 0.275 Tj
111.84 537.6 Td
0.047 Tc
0.205 Tw
(Using ficl: an example) 10.485 Tj
90.24 519.84 Td
0 Tc
0 Tw
/F10_0 12 Tf
(Here) 1.94 Tj
-2.88 Tc
(\222) 0.56 Tj
0.04 Tc
-0.04 Tw
(s a quick example of ficl at work. Suppose we have a simple target board that has a) 33.06 Tj
90.24 506.16 Td
0.0192 Tc
-0.0192 Tw
(block of 8 LEDs, 8 DIP switches) 13.14 Tj
248.4 506.16 Td
0.0261 Tc
-0.0261 Tw
(,  an 8-bit analog to digital converter , and an 8 bit DAC.) 22.56 Tj
90.24 492.24 Td
0.1 Tc
-0.04 Tw
(\(Conveniently, this is what ) 10.82 Tj
222.72 492.24 Td
0.1694 Tc
0.0706 Tw
(ficlwin simulates\)) 6.92 Tj
308.88 492.24 Td
0 Tc
0 Tw
(.Let) 1.6 Tj
-2.88 Tc
(\222) 0.56 Tj
0.008 Tc
0.0263 Tw
(s start by setting up an address map:) 14.4 Tj
90.24 469.44 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(hex) 1.8 Tj
90.24 458.16 Td
(10000 constant ) 9 Tj
180.24 458.16 Td
(leds) 2.4 Tj
90.24 446.88 Td
(10002 constant switches) 13.8 Tj
90.24 435.36 Td
(20000 constant ) 9 Tj
180.24 435.36 Td
(adc) 1.8 Tj
90.24 424.08 Td
(20002 constant ) 9 Tj
180.24 424.08 Td
(dac) 1.8 Tj
90.24 398.88 Td
0.096 Tc
-0.036 Tw
/F10_0 12 Tf
(What happened? The first line tells ficl that we) 18.42 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
0.0444 Tc
0.0356 Tw
(re going to be writing numbers in) 13.22 Tj
90.24 384.96 Td
0.0389 Tc
-0.0389 Tw
(hexadecimal. The next four lines set up named constants for the registers we want to use.) 35.4 Tj
90.24 371.28 Td
0.0509 Tc
0.0177 Tw
(When we invoke one of these constants \(by typing its name\), it pushes its value.) 31.68 Tj
90.24 348.48 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(: !) 1.8 Tj
108.24 348.48 Td
(oreg  \( value -- \)   ) 12.6 Tj
234.24 348.48 Td
(leds c! ;) 5.4 Tj
90.24 336.96 Td
(: @) 1.8 Tj
108.24 336.96 Td
(adc   \( -- value \)   ) 12.6 Tj
234.24 336.96 Td
(adc c@ ;) 4.8 Tj
90.24 325.68 Td
(: !) 1.8 Tj
108.24 325.68 Td
(dac   \( value -- \)   ) 12.6 Tj
234.24 325.68 Td
(dac c! ;) 4.8 Tj
90.24 314.4 Td
(: @) 1.8 Tj
108.24 314.4 Td
(ireg  \( -- value \)   switches c@ ;) 20.4 Tj
90.24 289.2 Td
0.0575 Tc
0.0111 Tw
/F10_0 12 Tf
(A constant pushes its value when invoked, and a variable pushes its address. The ficl) 33.48 Tj
90.24 275.28 Td
0.0101 Tc
-0.0101 Tw
(word @ \(the at-sign\) fetches the contents of an address and puts the 32 bit value on the) 34.7 Tj
90.24 261.6 Td
0.0424 Tc
-0.0424 Tw
(stack. ficl also has c@ to fetch a byte, and w@ to fetch 16 bits. Likewise, ! w! and c!) 33.7 Tj
90.24 247.68 Td
0.0212 Tc
0.0055 Tw
(store a value at an address. The syntax is ) 16.46 Tj
288.72 247.68 Td
0.0234 Tc
-0.0534 Tw
(\( value address -- \), meaning that the operations) 19 Tj
90.24 234 Td
0.048 Tc
-0.048 Tw
(consume a value and an address from the stack.  The lines above create ficl words that) 34.24 Tj
90.24 220.08 Td
0.0132 Tc
0.0028 Tw
(hide the width of the registers they use by wrapping the fetch or store operation. Note:) 34.4 Tj
90.24 206.4 Td
0.0473 Tc
-0.0473 Tw
(ficlwin implements the above four words so that you can try the rest of the code in this) 34.38 Tj
90.24 192.48 Td
0.105 Tc
0.135 Tw
(example verbatim.) 7.26 Tj
90.24 169.68 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(variable led-shadow   0 led-shadow !) 21.6 Tj
90.24 158.4 Td
(: !) 1.8 Tj
108.24 158.4 Td
(leds  \( value -- \)   ) 12.6 Tj
234.24 158.4 Td
(dup !) 3 Tj
264.24 158.4 Td
(oreg led-shadow ! ;) 11.4 Tj
90.24 147.12 Td
(0 !) 1.8 Tj
108.24 147.12 Td
(leds) 2.4 Tj
90.24 121.92 Td
0.047 Tc
-0.0688 Tw
/F10_0 12 Tf
(The first line above creates a variable to track the LED ) 22.04 Tj
356.64 121.92 Td
0.0257 Tc
-0.1057 Tw
(state. \(Real hardware engineers) 12.46 Tj
90.24 108 Td
-0.0055 Tc
0.0055 Tw
(often find it too expensive or too bothersome to add a ) 21.72 Tj
350.64 108 Td
0.0711 Tc
-0.0711 Tw
(readback capability to digital) 11.42 Tj
90.24 94.32 Td
0.0033 Tc
-0.0376 Tw
(output registers.\) The word on the second line writes the LED register and updates the) 34.48 Tj
90.24 80.4 Td
0.0558 Tc
0.0042 Tw
(shadow variable. The last line forces the LEDs off.) 20.12 Tj
showpage
%%PageTrailer
pdfEndPage
%%Page: 6 6
%%BeginPageSetup
%%PageOrientation: Portrait
612 792 pdfStartPage
%%EndPageSetup
[] 0 d
0 i
0 j
0 J
10 M
1 w
0 g
0 G
[1 0 0 1 0 0] Tm
0 0 Td
90.24 699.84 Td
0 g
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(: ) 1.2 Tj
102.24 699.84 Td
(toggle-led  \( led -- \)) 13.2 Tj
90.24 688.56 Td
(    1 swap lshift    \\ make a bit-mask for the LED) 30 Tj
90.24 677.04 Td
(    led-shadow @ xor \\ toggle the bit in the shadow reg) 33 Tj
90.24 665.76 Td
0 Tc
-0.048 Tw
(    ) 2.4 Tj
114.24 665.76 Td
-0.048 Tc
0 Tw
(!) 0.6 Tj
120.24 665.76 Td
(oreg            \\ now update the LED and shadow) 28.2 Tj
90.24 654.48 Td
(;) 0.6 Tj
90.24 629.28 Td
0.0497 Tc
-0.0497 Tw
/F10_0 12 Tf
(This word toggles an LED by index \(0) 15.28 Tj
275.04 629.28 Td
-0.048 Tc
0.048 Tw
(..7\). ) 1.88 Tj
297.36 629.28 Td
0.08 Tc
-0.02 Tw
(Lshift is equivalent to C) 9.5 Tj
-2.88 Tc
0 Tw
(\222) 0.56 Tj
-0.06 Tc
0.06 Tw
(s << operator.) 5.68 Tj
90.24 606.72 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(: ) 1.2 Tj
102.24 606.72 Td
(adc) 1.8 Tj
120.24 606.72 Td
(-loop) 3 Tj
90.24 595.44 Td
0 Tc
-0.048 Tw
(    ) 2.4 Tj
114.24 595.44 Td
-0.048 Tc
0 Tw
(begin) 3 Tj
90.24 584.16 Td
(        @) 5.4 Tj
144.24 584.16 Td
(adc ) 2.4 Tj
168.24 584.16 Td
(dup !) 3 Tj
198.24 584.16 Td
(dac 100 ) 4.8 Tj
246.24 584.16 Td
(msec) 2.4 Tj
90.24 572.64 Td
(    255 = until) 9 Tj
90.24 561.36 Td
(;) 0.6 Tj
90.24 536.16 Td
0.03 Tc
0.002 Tw
/F10_0 12 Tf
(The above word loops, writing the ADC value back to the DAC until the ADC value) 33.66 Tj
90.24 522.24 Td
0.0703 Tc
-0.0703 Tw
(reaches 255. After each ADC sample, there is a 100 millisecond pause \() 28.42 Tj
435.36 522.24 Td
0.12 Tc
0.12 Tw
(msec is) 2.88 Tj
90.24 508.56 Td
0.1662 Tc
-0.1662 Tw
(implemented in ) 6.3 Tj
168.24 508.56 Td
0.1129 Tc
-0.0649 Tw
(ficlwin with the Win32 Sleep function\).) 15.6 Tj
90.24 494.64 Td
0.0933 Tc
-0.0533 Tw
(These are extremely simple examples, but they give a feel for the ) 25.9 Tj
406.56 494.64 Td
0.0126 Tc
-0.0126 Tw
(accretive process one) 8.52 Tj
90.24 480.96 Td
0.0362 Tc
0.0152 Tw
(uses to bring up hardware with ficl. I invite you to try them with ) 25.74 Tj
401.76 480.96 Td
0.24 Tc
0 Tw
(ficlwin.) 2.92 Tj
90.24 453.6 Td
0.0101 Tc
/F6_0 13.92 Tf
(4) 0.551 Tj
97.92 453.6 Td
0 Tc
0.012 Tw
( ) 0.275 Tj
111.84 453.6 Td
0.0726 Tc
0 Tw
(Where to find more information) 14.792 Tj
90.24 438 Td
0.0501 Tc
-0.0309 Tw
/F10_0 10.08 Tf
(Web sites:) 4.12 Tj
90.24 426.48 Td
-0.0106 Tc
0.0298 Tw
(Skip Carter) 4.58 Tj
-2.2848 Tc
0 Tw
(\222) 0.56 Tj
0.0011 Tc
-0.0333 Tw
(s Taygeta site has lots of Forth archives, and is the Web home of ) 25.92 Tj
400.56 426.48 Td
0.192 Tc
0 Tw
(ficl:) 1.5 Tj
90.24 414.96 Td
0 0 1 rg
0.027 Tc
(http://www.taygeta.com/ficl.html) 13.2 Tj
223.92 414.96 Td
0 g
-0.0507 Tc
0.0699 Tw
( \(latest ) 2.96 Tj
253.44 414.96 Td
0.0511 Tc
-0.1119 Tw
(Ficl information and downloads\)) 12.9 Tj
0 0 1 rg
90.24 413.28 133.44 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 403.68 Td
-0.0119 Tc
0 Tw
/F10_0 10.08 Tf
(http://www.taygeta.com/forth.html) 13.92 Tj
229.92 403.68 Td
0 g
-0.0159 Tc
0.0051 Tw
( \(Check the Forth Literature links for downloadable books\)) 23.54 Tj
0 0 1 rg
90.24 402 139.44 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 392.16 Td
0 g
-0.0138 Tc
-0.015 Tw
/F10_0 10.08 Tf
(Or you can read the Draft Proposed American National Standard \(and save yourself $300\) \226 it) 37.48 Tj
-2.2848 Tc
0 Tw
(\222) 0.56 Tj
-0.0504 Tc
0.0696 Tw
(s the most) 4.06 Tj
90.24 380.64 Td
0.0157 Tc
0.0035 Tw
(readable language standard I) 11.36 Tj
-2.2848 Tc
0 Tw
(\222) 0.56 Tj
0.0065 Tc
-0.0273 Tw
(ve seen. You can actually understand it.) 15.8 Tj
90.24 369.12 Td
0 0 1 rg
-0.0062 Tc
0 Tw
(http://www.taygeta.com/forth/dpans.html) 16.5 Tj
90.24 367.44 165.84 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 357.6 Td
0 g
-0.0388 Tc
0.01 Tw
/F10_0 10.08 Tf
(The Forth Interest Group \(loads of tutorials, interpreters, and other info\):) 29.14 Tj
90.24 346.08 Td
0 0 1 rg
0.0242 Tc
0 Tw
(http://www.fig.org/fig.html) 10.84 Tj
90.24 344.4 109.68 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 334.56 Td
0 g
0.0137 Tc
-0.0478 Tw
/F10_0 10.08 Tf
(A web-based introduction to Forth using an intuitive graphical notation:) 28.54 Tj
90.24 323.04 Td
0 0 1 rg
-0.0229 Tc
0 Tw
(http://forth.org/forth_intro/stackflo.htm) 15.76 Tj
90.24 321.36 157.68 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 311.52 Td
0 g
-0.0217 Tc
0.0409 Tw
/F10_0 10.08 Tf
(Another web-based Forth intro:) 12.6 Tj
90.24 300 Td
0 0 1 rg
-0.038 Tc
0 Tw
(http://astro.pas.rochester.edu/Forth/forth.html) 18.32 Tj
90.24 298.32 182.64 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 273.12 Td
0 g
0.0101 Tc
/F6_0 13.92 Tf
(5) 0.551 Tj
97.92 273.12 Td
0 Tc
0.012 Tw
( ) 0.275 Tj
111.84 273.12 Td
0.0265 Tc
-0.0145 Tw
(Ficl Quick Start) 7.282 Tj
90.24 257.52 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(.s) 1.2 Tj
248.64 256.8 Td
0.0063 Tc
-0.0271 Tw
/F10_0 10.08 Tf
(Displays the contents of the stack non-destructively) 20.46 Tj
84.48 265.92 0.48 0.48 re
f
84.48 265.92 0.48 0.48 re
f
84.96 265.92 158.16 0.48 re
f
243.12 265.92 0.48 0.48 re
f
243.6 265.92 350.88 0.48 re
f
84.48 254.4 0.48 11.52 re
f
243.12 254.4 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 245.52 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(.) 0.6 Tj
248.64 244.8 Td
-0.0093 Tc
-0.0058 Tw
/F10_0 10.08 Tf
(Pops the top of stack and displays it) 14.3 Tj
84.48 253.92 0.48 0.48 re
f
84.96 253.92 158.16 0.48 re
f
243.12 253.92 0.48 0.48 re
f
243.6 253.92 350.88 0.48 re
f
84.48 242.4 0.48 11.52 re
f
243.12 242.4 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 233.52 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(Hex) 1.8 Tj
248.64 232.8 Td
0.0318 Tc
-0.0726 Tw
/F10_0 10.08 Tf
(Set number base to hex \(decimal is the default\)) 18.6 Tj
84.48 241.92 0.48 0.48 re
f
84.96 241.92 158.16 0.48 re
f
243.12 241.92 0.48 0.48 re
f
243.6 241.92 350.88 0.48 re
f
84.48 230.4 0.48 11.52 re
f
243.12 230.4 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 221.52 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(Decimal) 4.2 Tj
248.64 220.8 Td
0.0332 Tc
-0.074 Tw
/F10_0 10.08 Tf
(Set number base to decimal) 10.92 Tj
84.48 229.92 0.48 0.48 re
f
84.96 229.92 158.16 0.48 re
f
243.12 229.92 0.48 0.48 re
f
243.6 229.92 350.88 0.48 re
f
84.48 218.4 0.48 11.52 re
f
243.12 218.4 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 206.64 Td
0 Tc
0 Tw
/F17_0 12 Tf
(Arithmetic) 4.64 Tj
84.48 217.92 0.48 0.48 re
f
84.96 217.92 158.16 0.48 re
f
243.12 217.92 0.48 0.48 re
f
243.6 217.92 350.88 0.48 re
f
84.48 204 0.48 13.92 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 195.12 Td
-0.048 Tc
/F21_0 10.08 Tf
(+ - * / \( a b -- c \)) 12 Tj
248.64 194.4 Td
-0.1888 Tc
0.208 Tw
/F10_0 10.08 Tf
(Pop ) 1.84 Tj
266.64 194.4 Td
-0.0073 Tc
-0.0104 Tw
(a and b off the stack, perform the operation, and push the result. Example:) 29.52 Tj
248.64 183.6 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(3 2 + \( leaves 5 on the stack\)) 18 Tj
84.48 203.52 0.48 0.48 re
f
84.96 203.52 158.16 0.48 re
f
243.12 203.52 0.48 0.48 re
f
243.6 203.52 350.88 0.48 re
f
84.48 180.72 0.48 22.8 re
f
243.12 180.72 0.48 22.8 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 171.84 Td
/F21_0 10.08 Tf
(Negate  \( x -- -x \)) 11.4 Tj
248.64 171.12 Td
-0.0187 Tc
0.0139 Tw
/F10_0 10.08 Tf
(Change the sign of the value on top of the stack) 18.98 Tj
84.48 180.24 0.48 0.48 re
f
84.96 180.24 158.16 0.48 re
f
243.12 180.24 0.48 0.48 re
f
243.6 180.24 350.88 0.48 re
f
84.48 168.72 0.48 11.52 re
f
243.12 168.72 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 157.2 Td
0 Tc
0 Tw
/F17_0 12 Tf
(Stack Operations) 7.4 Tj
84.48 168.24 0.48 0.48 re
f
84.96 168.24 158.16 0.48 re
f
243.12 168.24 0.48 0.48 re
f
243.6 168.24 350.88 0.48 re
f
84.48 154.32 0.48 13.92 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 145.44 Td
-0.048 Tc
/F21_0 10.08 Tf
(Dup) 1.8 Tj
126.24 145.44 Td
(\( x -- x ) 5.4 Tj
180.24 145.44 Td
(x \)) 1.8 Tj
248.64 144.96 Td
-0.0638 Tc
0.083 Tw
/F10_0 10.08 Tf
(Copy the top of stack) 8.6 Tj
84.48 153.84 0.48 0.48 re
f
84.96 153.84 158.16 0.48 re
f
243.12 153.84 0.48 0.48 re
f
243.6 153.84 350.88 0.48 re
f
84.48 142.32 0.48 11.52 re
f
243.12 142.32 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 133.44 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(Swap) 2.4 Tj
126.24 133.44 Td
(\( x y -- y x \)) 8.4 Tj
248.64 132.96 Td
-0.0624 Tc
0.0816 Tw
/F10_0 10.08 Tf
(Swap the top two cells) 9.08 Tj
84.48 141.84 0.48 0.48 re
f
84.96 141.84 158.16 0.48 re
f
243.12 141.84 0.48 0.48 re
f
243.6 141.84 350.88 0.48 re
f
84.48 130.32 0.48 11.52 re
f
243.12 130.32 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 118.8 Td
0 Tc
0 Tw
/F17_0 12 Tf
(Logic) 2.38 Tj
84.48 129.84 0.48 0.48 re
f
84.96 129.84 158.16 0.48 re
f
243.12 129.84 0.48 0.48 re
f
243.6 129.84 350.88 0.48 re
f
84.48 115.92 0.48 13.92 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 107.28 Td
-0.048 Tc
/F21_0 10.08 Tf
(True) 2.4 Tj
126.24 107.28 Td
(\( -- -1 \)) 5.4 Tj
84.48 115.68 0.48 0.48 re
f
84.96 115.68 158.16 0.48 re
f
243.12 115.68 0.48 0.48 re
f
243.6 115.68 350.88 0.48 re
f
84.48 104.16 0.48 11.52 re
f
243.12 104.16 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 95.28 Td
/F21_0 10.08 Tf
(False) 3 Tj
126.24 95.28 Td
(\( -- 0 \)) 4.8 Tj
248.64 94.08 Td
0.0361 Tc
-0.0769 Tw
/F10_0 10.08 Tf
(False is always zero in Forth, and true can be defined as ) 22.36 Tj
475.2 94.08 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(false invert) 7.2 Tj
547.2 94.08 Td
0 Tc
0.0192 Tw
/F10_0 10.08 Tf
( ) 0.26 Tj
q
549.84 91.68 44.64 11.52 re
W
[1 0 0 1 0 0] Tm
0 0 Td
549.84 94.08 Td
0.0688 Tc
-0.1296 Tw
/F10_0 10.08 Tf
(\( all bits set \); this unifies) 9.92 Tj
Q
[1 0 0 1 0 0] Tm
0 0 Td
248.64 82.32 Td
0.1037 Tc
-0.2045 Tw
/F10_0 10.08 Tf
(logical and ) 4.56 Tj
q
295.2 79.92 299.28 11.52 re
W
[1 0 0 1 0 0] Tm
0 0 Td
295.44 82.32 Td
0.0042 Tc
-0.005 Tw
/F10_0 10.08 Tf
(bitwise operations. Logical operations view any non-zero value as true, as in C.) 31.52 Tj
Q
84.48 103.68 0.48 0.48 re
f
84.96 103.68 158.16 0.48 re
f
243.12 103.68 0.48 0.48 re
f
243.6 103.68 350.88 0.48 re
f
84.48 79.92 0.48 23.76 re
f
84.48 79.44 0.48 0.48 re
f
84.48 79.44 0.48 0.48 re
f
84.96 79.44 158.16 0.48 re
f
243.12 79.92 0.48 23.76 re
f
243.12 79.44 0.48 0.48 re
f
243.6 79.44 350.88 0.48 re
f
showpage
%%PageTrailer
pdfEndPage
%%Page: 7 7
%%BeginPageSetup
%%PageOrientation: Portrait
612 792 pdfStartPage
%%EndPageSetup
[] 0 d
0 i
0 j
0 J
10 M
1 w
0 g
0 G
[1 0 0 1 0 0] Tm
0 0 Td
90.24 710.88 Td
0 g
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(And or ) 4.2 Tj
132.24 710.88 Td
(xor  \( x y -- z \)) 10.2 Tj
248.64 710.16 Td
-0.0242 Tc
-0.01 Tw
/F10_0 10.08 Tf
(Perform BITWISE operations on two arguments and push the result) 27.16 Tj
84.48 719.28 0.48 0.48 re
f
84.48 719.28 0.48 0.48 re
f
84.96 719.28 158.16 0.48 re
f
243.12 719.28 0.48 0.48 re
f
243.6 719.28 350.88 0.48 re
f
84.48 707.76 0.48 11.52 re
f
243.12 707.76 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 698.88 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(Invert) 3.6 Tj
162.24 698.88 Td
(\( x -- ~x \)) 6.6 Tj
248.64 698.16 Td
-0.0041 Tc
-0.0247 Tw
/F10_0 10.08 Tf
(One's complement the top of stack) 13.74 Tj
84.48 707.28 0.48 0.48 re
f
84.96 707.28 158.16 0.48 re
f
243.12 707.28 0.48 0.48 re
f
243.6 707.28 350.88 0.48 re
f
84.48 695.76 0.48 11.52 re
f
243.12 695.76 0.48 11.52 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 686.88 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(< > <> =) 4.8 Tj
90.24 675.6 Td
(   \( x y -- flag \)) 10.8 Tj
248.64 686.16 Td
0.0128 Tc
-0.0896 Tw
/F10_0 10.08 Tf
(Perform comparison \(<> means "not equal"\) and push true or false) 26.46 Tj
84.48 695.28 0.48 0.48 re
f
84.96 695.28 158.16 0.48 re
f
243.12 695.28 0.48 0.48 re
f
243.6 695.28 350.88 0.48 re
f
84.48 672.72 0.48 22.56 re
f
243.12 672.72 0.48 22.56 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 660.96 Td
-0.0185 Tc
0.0185 Tw
/F17_0 12 Tf
(Fetch and Store) 6.78 Tj
84.48 672.24 0.48 0.48 re
f
84.96 672.24 158.16 0.48 re
f
243.12 672.24 0.48 0.48 re
f
243.6 672.24 350.88 0.48 re
f
84.48 658.32 0.48 13.92 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 648.72 Td
0.0046 Tc
-0.0454 Tw
/F10_0 10.08 Tf
(@ w@ c@  \( address -- value \)) 12.38 Tj
q
248.64 646.32 345.84 11.52 re
W
[1 0 0 1 0 0] Tm
0 0 Td
248.64 648.72 Td
-0.005 Tc
-0.0424 Tw
/F10_0 10.08 Tf
(Fetch 32, 16, or 8 bits respectively from address and leave the result on the stack. Values are zero) 38.84 Tj
Q
[1 0 0 1 0 0] Tm
0 0 Td
248.64 637.2 Td
-0.0206 Tc
-0.0402 Tw
/F10_0 10.08 Tf
(padded to 32 bits) 6.88 Tj
84.48 657.84 0.48 0.48 re
f
84.96 657.84 158.16 0.48 re
f
243.12 657.84 0.48 0.48 re
f
243.6 657.84 350.88 0.48 re
f
84.48 634.8 0.48 23.04 re
f
243.12 634.8 0.48 23.04 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 625.92 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(! ) 1.2 Tj
102.24 625.92 Td
(w! ) 1.8 Tj
120.24 625.92 Td
(c!) 1.2 Tj
90.24 614.64 Td
(  \( value address -- \)) 13.2 Tj
q
248.64 622.8 345.84 11.52 re
W
[1 0 0 1 0 0] Tm
0 0 Td
248.64 625.2 Td
-0.0194 Tc
0.026 Tw
/F10_0 10.08 Tf
(Store 32, 16, or 8 bits respectively of value at address. Note: if you think "@" and "!" are strange,) 38.86 Tj
Q
[1 0 0 1 0 0] Tm
0 0 Td
248.64 613.68 Td
-0.055 Tc
0.0742 Tw
/F10_0 10.08 Tf
(how about "*" for ") 7.86 Tj
327.12 613.68 Td
-0.0052 Tc
0.0244 Tw
(dereference" and "&" for "address of"?) 15.46 Tj
84.48 634.32 0.48 0.48 re
f
84.96 634.32 158.16 0.48 re
f
243.12 634.32 0.48 0.48 re
f
243.6 634.32 350.88 0.48 re
f
84.48 600.24 0.48 34.08 re
f
243.12 600.24 0.48 34.08 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 588.48 Td
0.015 Tc
-0.015 Tw
/F17_0 12 Tf
(Creating New Words) 9.02 Tj
84.48 599.76 0.48 0.48 re
f
84.96 599.76 158.16 0.48 re
f
243.12 599.76 0.48 0.48 re
f
243.6 599.76 350.88 0.48 re
f
84.48 585.84 0.48 13.92 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 576.96 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(Constant \( x -- \) "name") 14.4 Tj
248.64 576.24 Td
-0.0059 Tc
-0.0149 Tw
/F10_0 10.08 Tf
(Creates a new word that pushes its value \(x\) when executed. Example: ) 28.32 Tj
248.64 565.44 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(0x10000 constant ram-base) 15 Tj
248.64 554.16 Td
(ram-base @  \( fetches 32 bits from address 0x10000 \)) 31.2 Tj
84.48 585.36 0.48 0.48 re
f
84.96 585.36 158.16 0.48 re
f
243.12 585.36 0.48 0.48 re
f
243.6 585.36 350.88 0.48 re
f
84.48 551.28 0.48 34.08 re
f
243.12 551.28 0.48 34.08 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 542.16 Td
/F21_0 10.08 Tf
(Variable \( -- \) "name") 13.2 Tj
248.64 541.68 Td
-0.0228 Tc
-0.03 Tw
/F10_0 10.08 Tf
(Creates a new word that pushes its address when executed. ) 23.78 Tj
486.72 541.68 Td
-0.0343 Tc
0 Tw
/F8_0 10.08 Tf
(Example) 3.5 Tj
248.64 530.88 Td
-0.048 Tc
/F21_0 10.08 Tf
(variable v   \( creates a new variable named v \)) 28.2 Tj
248.64 519.36 Td
(0 ) 1.2 Tj
260.64 519.36 Td
(v !        \( set v to zero \)) 16.8 Tj
84.48 550.8 0.48 0.48 re
f
84.96 550.8 158.16 0.48 re
f
243.12 550.8 0.48 0.48 re
f
243.6 550.8 350.88 0.48 re
f
84.48 516.72 0.48 34.08 re
f
243.12 516.72 0.48 34.08 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 504.96 Td
0 Tc
/F17_0 12 Tf
(Colon definitions) 7.3 Tj
q
248.64 504.48 345.84 11.52 re
W
[1 0 0 1 0 0] Tm
0 0 Td
248.64 506.88 Td
0.0357 Tc
-0.0765 Tw
/F10_0 10.08 Tf
(You can define a new word in terms of existing words using colon and semicolon, like this:) 36.16 Tj
Q
[1 0 0 1 0 0] Tm
0 0 Td
248.64 496.08 Td
-0.048 Tc
/F21_0 10.08 Tf
(: ) 1.2 Tj
260.64 496.08 Td
(v++   1 v +! ;   \( create new word named v++ \)) 27.6 Tj
248.64 483.84 Td
-0.0593 Tc
0.1385 Tw
/F10_0 10.08 Tf
(Now when you execute ) 9.64 Tj
345.12 483.84 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(v++) 1.8 Tj
363.12 483.84 Td
0.0487 Tc
-0.0295 Tw
/F10_0 10.08 Tf
(, it increments ) 5.86 Tj
422.88 483.84 Td
-0.048 Tc
0 Tw
/F21_0 10.08 Tf
(v) 0.6 Tj
428.88 483.84 Td
0.0192 Tc
/F10_0 10.08 Tf
(.) 0.26 Tj
q
248.64 469.44 345.84 11.52 re
W
[1 0 0 1 0 0] Tm
0 0 Td
248.64 471.84 Td
-0.0216 Tc
0.0108 Tw
/F10_0 10.08 Tf
(But wait, there's more. In addition to chaining together words you can also use control structures in) 39.58 Tj
Q
[1 0 0 1 0 0] Tm
0 0 Td
248.64 460.32 Td
-0.2784 Tc
/F10_0 10.08 Tf
(co) 0.96 Tj
0.7008 Tc
(l) 0.24 Tj
0.0916 Tc
-0.0724 Tw
(on definitions) 5.38 Tj
4.4352 Tc
0 Tw
(\205) 0.56 Tj
84.48 516 0.48 0.48 re
f
84.96 516 158.16 0.48 re
f
243.12 516 0.48 0.48 re
f
243.6 516 350.88 0.48 re
f
84.48 457.92 0.48 58.08 re
f
243.12 457.92 0.48 58.08 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 446.16 Td
0 Tc
/F17_0 12 Tf
(Iteration) 3.76 Tj
248.64 448.32 Td
/F8_0 10.08 Tf
(Example) 3.5 Tj
248.64 437.52 Td
-0.048 Tc
/F21_0 10.08 Tf
(: ) 1.2 Tj
260.64 437.52 Td
(testloop limit index do \( insert code here \) loop ;) 30.6 Tj
84.48 457.44 0.48 0.48 re
f
84.96 457.44 158.16 0.48 re
f
243.12 457.44 0.48 0.48 re
f
243.6 457.44 350.88 0.48 re
f
84.48 434.64 0.48 22.8 re
f
243.12 434.64 0.48 22.8 re
f
[1 0 0 1 0 0] Tm
0 0 Td
90.24 422.88 Td
0 Tc
/F17_0 12 Tf
(Conditionals) 5.44 Tj
248.64 425.04 Td
/F8_0 10.08 Tf
(Example) 3.5 Tj
248.64 414.24 Td
-0.048 Tc
/F21_0 10.08 Tf
(: ) 1.2 Tj
260.64 414.24 Td
(signum  \( x -- sign \)) 12.6 Tj
248.64 402.72 Td
(\\ push -1 if negative, 1 if positive, else 0) 26.4 Tj
248.64 391.44 Td
0 Tc
-0.048 Tw
(  ) 1.2 Tj
260.64 391.44 Td
-0.048 Tc
0 Tw
(dup                    \( -- x ) 18 Tj
440.64 391.44 Td
(x \)) 1.8 Tj
248.64 380.16 Td
(  0< if drop -1          \( -- x -1 \)) 21.6 Tj
248.64 368.88 Td
(  else) 3.6 Tj
248.64 357.6 Td
(    0= if 0 else 1 ) 11.4 Tj
362.64 357.6 Td
(endif) 3 Tj
248.64 346.08 Td
0 Tc
-0.048 Tw
(  ) 1.2 Tj
260.64 346.08 Td
-0.048 Tc
0 Tw
(endif) 3 Tj
248.64 334.8 Td
(;) 0.6 Tj
84.48 434.16 0.48 0.48 re
f
84.96 434.16 158.16 0.48 re
f
243.12 434.16 0.48 0.48 re
f
243.6 434.16 350.88 0.48 re
f
84.48 320.4 0.48 113.76 re
f
84.48 319.92 0.48 0.48 re
f
84.48 319.92 0.48 0.48 re
f
84.96 319.92 158.16 0.48 re
f
243.12 320.4 0.48 113.76 re
f
243.12 319.92 0.48 0.48 re
f
243.6 319.92 350.88 0.48 re
f
[1 0 0 1 0 0] Tm
0 0 Td
126.24 242.16 Td
0.0192 Tc
/F10_0 10.08 Tf
(.) 0.26 Tj
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%EOF
