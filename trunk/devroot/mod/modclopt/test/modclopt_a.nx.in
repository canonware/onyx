################################################################################
#
# <Copyright = jasone>
#
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
################################################################################

# Load the clopt module.
$modclopt mclass:singleton:load

# Subclass clopt, overriding error_print and adding option handlers.
$optclass clopt <
    #
    # Class data.
    #
><
    #
    # Methods.
    #

    #class#
    #- new #instance
    $new {
	;rnew
	#instance
    }

    # Print an error.
    #
    #instance#
    #errstr error_print -
    $error_print {
	# Call the superclass's print method.
	this:isa:super:methods $error_print get eval

	# Construct the usage statement.
	;progname_get `\
progname usage:
    progname [--foo] [--bar[=<arg>]] [--biz=<arg>]
    padchars [-a] [-b <arg>]
'
	`progname' ;progname_get <$g true> subst pop
	`padchars' ;progname_get `.' ` ' <$g true> subst pop <$g true> subst pop
	#str

	# Print usage.
	stderr exch write pop
    }

    #instance#
    #- `--foo' -
    `--foo' {
	this:index_get cvs print
	` --> --foo ==> ' print
	this:arg_get 1 sprint
    }

    #instance#
    #- `--bar?' -
    `--bar?' {
	this:index_get cvs print
	` --> --bar ==> ' print
	this:arg_get 1 sprint
    }

    #instance#
    #- `--biz=' -
    `--biz=' {
	this:index_get cvs print
	` --> --biz ==> ' print
	this:arg_get 1 sprint
    }

    #instance#
    #- `-a' -
    `-a' {
	this:index_get cvs print
	` --> -a ==> ' print
	this:arg_get 1 sprint
    }

    #instance#
    #- `-b:' -
    `-b:' {
	this:index_get cvs print
	` --> -b ==> ' print
	this:arg_get 1 sprint
    }
> cdef

# Instantiate optclass.
optclass:new
#opt_inst

# Parse argv.
[
    [`fake_argv_0' `--foo' `--bar' `--bar=blah' `--biz=bang' `-a' `-b' `bam']

    [`fake_argv_1' `--foo=']

    [`fake_argv_2' `--foo=blah']

    [`fake_argv_3' `--bar=']

    [`fake_argv_4' `--bar=blah']
    
    [`fake_argv_5' `--biz']

    [`fake_argv_6' `--biz=']

    [`fake_argv_7' `-a' `remainder' `arguments']
    
    [`fake_argv_8' `-b']

    [`fake_argv_9' `-bbam']

    [`fake_argv_10' `-b-a' `remainder' `arguments']

    [`fake_argv_11' `-b' `-a' `remainder' `arguments']

    [`fake_argv_12' `-b' `bam' `remainder' `arguments']

    [`fake_argv_13' `--foo' `--bar' `--' `--biz=bang' `more' `remainder']
]{
    `=== ' print
    dup 1 sprints print
    ` ===\n' print flush

    over :parse {
	`Parse error\n' print flush
    }{
	`Parse success\n' print
	`Remainder: ' print 1 sprint
    } ifelse
} foreach
pop

# Unload the clopt module now that we're done with it.
modclopt:unload
