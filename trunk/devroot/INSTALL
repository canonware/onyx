################################################################################
#
# Version: <Version>
#
# Building and installation instructions for Canonware software distributions.
#
################################################################################

This software depends on the excellent 'cook' program for building.  'cook' is
freely available (GPLed), and runs on many platforms.  For more information,
see:

	http://www.canb.auug.org.au/~millerp/cook/cook.html

Optional: Running the regression tests requires perl 5.002 or greater.

Optional: Rebuilding the documentation requires LaTeX (teTeX distribution) and
latex2html.  However, the source distribution should come with the documentation
already built, so you should not need to do so unless making documentation
modifications.

Building this distribution in many cases is as simple as typing the following
while in the root directory of the source tree:

	./configure
	cook

To install, do the above, then type:

	cook install

Additional build targets of finer granularity include:

	bins
	bins_[daps]
	libs
	libs_[daps]
	<libname>
	tests

Additional install targets of finer granularity include:

	install_{bins,libs,docs}
	<binname>_install
	<binname>_install_[dap]
	<libname>_install
	<libname>_install_[daps]
	doc_install_[pfh]

Uninstall targets include:

	uninstall
	uninstall_{bins,libs,docs}
	<binname>_uninstall
	<libname>_uninstall

Cleanup targets include:

	clean
	distclean
	relclean

Targets that depend on optional supporting software include:

	all
	docs
	doc_[pfh]
	release
	check
	check_update
	etags

The build system is capable of building in a different directory than the
source, so that no files are written to the source tree.  In order to use this
feature, run 'configure' and 'cook' while in the directory that you want to
build the software in.

Optionally, pass any of the following (not a definitive list) arguments to
'configure':

--prefix=<install-root-dir>
	Set the base directory in which to install.  For example:
	
	./configure --prefix=/usr/local

	will cause files to be installed into /usr/local/bin, /usr/local/man,
	/usr/local/include, and /usr/local/lib.

--enable-shared
	Build and install shared libraries.  If this option is specified,
	binaries will also be linked with the resulting shared libraries.  Note
	that the library version numbers are not currently being incremented to
	reflect incompatible changes, so you will need to handle this manually
	if upgrading from an older version of the libraries.

--disable-inlines
	Do not use inline functions.  This reduces the size of binaries at the
	expense of performance.

Optionally, define environment variables, including (not exclusively):

CFLAGS="?"
	Pass these flags to the compiler.  You probably shouldn't define this
	unless you know what you are doing.

CPPFLAGS="?"
	Pass these flags to the C preprocessor.  Note that CFLAGS is not passed
	to 'cpp' when 'configure' is looking for include files, so you must use 
	CPPFLAGS instead if you need to help 'configure' find header files.

LD_LIBRARY_PATH="?"
	'ld' uses this colon-separated list to find libraries.

LDFLAGS="?"
	Flags passed to 'gcc', which should normally be passed on to 'ld'.

PATH="?"
	'configure' uses this to find programs.
