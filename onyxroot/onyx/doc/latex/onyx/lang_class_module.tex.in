%-*-mode:latex-*-
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% <Copyright = jasone>
% <License>
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Version: Onyx <Version = onyx>
%
% module reference portion of Onyx Manual.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{module}
\label{sec:module}
\index{systemdict@\onyxop{}{module}{}}

The \classname{module} class works in conjunction with the
\htmlref{\classname{mclass}}{sec:mclass} class to encapsulate loaded modules.
Each loaded module has a corresponding \classname{module} instance, which can be
used to query, configure, or unload modules.

\begin{longtable}{\optableformat{4.10}}
\caption{module summary}
\\
\hline
\optableent
	{Input(s)}
	{Method}
	{Output(s)}
	{Description}
\hline \hline
%begin{latexonly}
\endfirsthead
\caption[]{\emph{continued}} \\
\hline
\optableent
	{Input(s)}
	{Method}
	{Output(s)}
	{Description}
\hline \hline \endhead
\multicolumn{2}{r}{\emph{Continued on next page...}} \endfoot
\hline \endlastfoot
%end{latexonly}
\multicolumn{2}{|l|}{Class-context methods} \\
\hline \hline
\optableent
	{--}
	{{\bf \htmlref{new}{module:new}}}
	{instance}
	{Constructor.}
\hline \hline
\multicolumn{2}{|l|}{Instance-context methods} \\
\hline \hline
\optableent
	{--}
	{{\bf \htmlref{version\_get}{module:version_get}}}
	{version}
	{Get module version.}
\hline
\optableent
	{version}
	{{\bf \htmlref{version\_set}{module:version_set}}}
	{--}
	{Set module version.}
\hline
\optableent
	{--}
	{{\bf \htmlref{deps\_get}{module:deps_get}}}
	{deps}
	{Get module dependencies.}
\hline
\optableent
	{--}
	{{\bf \htmlref{mdefs\_get}{module:mdefs_get}}}
	{mdefs}
	{Get module definitions.}
\hline
\optableent
	{defname defval defdict}
	{{\bf \htmlref{mdef}{module:mdef}}}
	{--}
	{Create module definition defname as defval in defdict.}
\hline
\optableent
	{depname}
	{{\bf \htmlref{dep\_load}{module:dep_load}}}
	{--}
	{Load a dependency module.}
\hline
\optableent
	{hook}
	{{\bf \htmlref{pre\_unload\_hook\_set}{module:pre_unload_hook_set}}}
	{--}
	{Store pre-unload hook.}
\hline
\optableent
	{hook}
	{{\bf \htmlref{post\_unload\_hook\_set}{module:post_unload_hook_set}}}
	{--}
	{Store post-unload hook.}
\hline
\optableent
	{--}
	{{\bf \htmlref{unload}{module:unload}}}
	{--}
	{Unload module.}
\end{longtable}

\begin{description}
\label{module:dep_load}
\index{dep_load@\onyxop{}{dep\_load}{}}
\item[{\onyxop{depname}{dep\_load}{--}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[depname: ]
			The name of a module that this module depends on.
		\end{description}
	\item[Output(s): ] None.
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{invalidfileaccess}{invalidfileaccess}.]
		\item[\htmlref{ioerror}{ioerror}.]
		\item[\htmlref{limitcheck}{limitcheck}.]
		\item[\htmlref{rangecheck}{rangecheck}.]
		\item[\htmlref{stackunderflow}{stackunderflow}.]
		\item[\htmlref{typecheck}{typecheck}.]
		\item[\htmlref{undefinedfilename}{undefinedfilename}.]
		\end{description}
	\item[Description: ]
		Load the module named \oparg{depname}, and record that this
		module depends on it.
	\item[Example(s): ]
		\example
		    {modfoo/modfoo.nx}
		    {@abs_srcroot@/doc/latex/onyx/modfoo.nx}
		    {@abs_srcroot@/doc/latex/onyx/module_dep_load.out}
	\end{description}
\label{module:deps_get}
\index{deps_get@\onyxop{}{deps\_get}{}}
\item[{\onyxop{--}{deps\_get}{deps}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[deps: ]
			A dictionary of module names associated with
			\classname{module} instances.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Get a dictionary of modules that this module depends on.
	\item[Example(s): ]\begin{verbatim}

onyx:0> $modclopt mclass:singleton:load
onyx:0> modclopt:deps_get 1 sprint
<>
onyx:0>
		\end{verbatim}
	\end{description}
\label{module:mdefs_get}
\index{mdefs_get@\onyxop{}{mdefs\_get}{}}
\item[{\onyxop{--}{mdefs\_get}{mdefs}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[mdefs: ]
			A dictionary of array keys, associated with the
			dictionaries in which the definitions reside.  Each
			array key is a tuple; the first array element is the
			definition key, and the second array element is the
			definition value.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Get a dictionary of definitions associated with this module.
	\item[Example(s): ]\begin{verbatim}

onyx:0> $modclopt mclass:singleton:load
onyx:0> modclopt:mdefs_get 2 sprint
<[$clopt -class=$clopt-] <$modprompt -instance=$module- $clopt -class=$clopt-
$modclopt -instance=$module-> [$modclopt -instance=$module-] <$modprompt
-instance=$module- $clopt -class=$clopt- $modclopt -instance=$module->>
onyx:0>
		\end{verbatim}
	\end{description}
\label{module:mdef}
\index{mdef@\onyxop{}{mdef}{}}
\item[{\onyxop{defname defval}{mdef}{--}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[defname: ]
			A definition key.
		\item[defval: ]
			A value to be associated with \oparg{defname}.
		\item[defdict: ]
			A dictionary in which to define \oparg{defname} as
			\oparg{defval}.
		\end{description}
	\item[Output(s): ] None.
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{typecheck}{typecheck}.]
		\end{description}
	\item[Description: ]
		Define \oparg{defname} as \oparg{defval} in \oparg{defdict}.
	\item[Example(s): ]
		\example
		    {modfoo/modfoo.nx}
		    {@abs_srcroot@/doc/latex/onyx/modfoo.nx}
		    {@abs_srcroot@/doc/latex/onyx/module_mdef.out}
	\end{description}
\label{module:new}
\index{new@\onyxop{}{new}{}}
\item[{\onyxop{--}{new}{instance}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[instance: ]
			An instance of \oparg{class}.
		\end{description}
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{typecheck}{typecheck}.]
		\end{description}
	\item[Description: ]
		Constructor.
	\item[Example(s): ]\begin{verbatim}

onyx:0> module:new 1 sprint
-instance-
onyx:0>
		\end{verbatim}
	\end{description}
\label{module:post_unload_hook_set}
\index{post_unload_hook_set@\onyxop{}{post\_unload\_hook\_set}{}}
\item[{\onyxop{hook}{post\_unload\_hook\_set}{--}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[hook: ]
			An object to evaluate after unloading this module.
		\end{description}
	\item[Output(s): ] None.
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{stackunderflow}{stackunderflow}.]
		\end{description}
	\item[Description: ]
		Register a post-unload hook, which is evaluated after this
		module is unloaded.
	\item[Example(s): ]\begin{verbatim}

onyx:0> $modclopt mclass:singleton:load
onyx:0> {`Post-unload' 1 sprint} modclopt:post_unload_hook_set
onyx:0> modclopt:unload
`Post-unload'
onyx:0>
		\end{verbatim}
	\end{description}
\label{module:pre_unload_hook_set}
\index{pre_unload_hook_set@\onyxop{}{pre\_unload\_hook\_set}{}}
\item[{\onyxop{hook}{pre\_unload\_hook\_set}{--}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[hook: ]
			An object to evaluate before unloading this module.
		\end{description}
	\item[Output(s): ] None.
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{stackunderflow}{stackunderflow}.]
		\end{description}
	\item[Description: ]
		Register a pre-unload hook, which is evaluated before this
		module is unloaded.
	\item[Example(s): ]\begin{verbatim}

onyx:0> {`Pre-unload' 1 sprint} modclopt:pre_unload_hook_set
onyx:0> modclopt:unload
`Pre-unload'
onyx:0>
		\end{verbatim}
	\end{description}
\label{module:unload}
\index{unload@\onyxop{}{unload}{}}
\item[{\onyxop{--}{unload}{--}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ] None.
	\item[Error(s): ]
		None, except errors caused by the evaluation of the pre- and
		post-unload hooks.
	\item[Description: ]
		Unload this module.
	\item[Example(s): ]\begin{verbatim}

onyx:0> $modclopt mclass:singleton:load
onyx:0> modclopt:unload
onyx:0>
		\end{verbatim}
	\end{description}
\label{module:version_get}
\index{version_get@\onyxop{}{version\_get}{}}
\item[{\onyxop{--}{version\_get}{version}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[version: ]
			The version of this module.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Get the version of this module.
	\item[Example(s): ]\begin{verbatim}

onyx:0> $modclopt mclass:singleton:load
onyx:0> modclopt:version_get 1 sprint
0
onyx:0>
		\end{verbatim}
	\end{description}
\label{module:version_set}
\index{version_set@\onyxop{}{version\_set}{}}
\item[{\onyxop{version}{version\_set}{--}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[version: ]
			The version of this module.
		\end{description}
	\item[Output(s): ] None.
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{stackunderflow}{stackunderflow}.]
		\end{description}
	\item[Description: ]
	\item[Example(s): ]\begin{verbatim}

onyx:0> $modclopt mclass:singleton:load
onyx:0> modclopt:version_get 1 sprint
0
onyx:0> 1 modclopt:version_set
onyx:0> modclopt:version_get 1 sprint
1
onyx:0> 
		\end{verbatim}
	\end{description}
\end{description}
