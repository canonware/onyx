# -*- mode: onyx -*-
################################################################################
#
# <Copyright = jasone>
# <License>
#
################################################################################
#
# Version: Onyx <Version = onyx>
#
# Script that provides the build flags to use with libonyx.
#
################################################################################

$usage_string
`\
Usage: onyx_config [--help] [--version] [--prefix]\n\
                   [--cppflags] [--cflags] [--ldflags] [--libs]\n'
def

$usage {
    stderr
    usage_string
    write pop
} def

$flags <
    `--help' {
	usage_string print flush
	0 die
    }
    `--prefix' {
	`@prefix@' print
    }
    `--version' {
	`Canonware Onyx, version <Version = onyx>.' print
    }
    `--cppflags' {
	`@CPPFLAGS@ -I@prefix@/include' print
    }
    `--cflags' {
	`@CFLAGS@' print
    }
    `--ldflags' {
	`@LDFLAGS@ -L@prefix@/lib' print
    }
    `--libs' {
	`-lonyx @LIBS@' print
    }
> def

argv length 2 lt {
    # No arguments specified.
    usage
    1 die
} if

# Iteratively process arguments.
argv dup length dec 1 exch getinterval {
    flags over known {
	` ' print
	flags exch get eval
    }{
	# Unknown flag.
	usage
	1 die
    } ifelse
} foreach

`\n' print
