dnl 
dnl <Copyright = jasone>
dnl <License>
dnl 
dnl Version: Onyx <Version>
dnl 
dnl Process this file with autoconf to produce a configure script.
AC_INIT([Cookfile.in])

dnl 
dnl Version requirements for external software we depend on.
dnl 
PTH_VERSION_MIN=2.0
PCRE_VERSION_MIN=4.0
LIBEDIT_VERSION_MIN=2.6

dnl 
dnl Various paths.
dnl 
srcroot=$srcdir
AC_SUBST([srcroot])
abs_srcroot=`cd "$srcdir"; pwd`
AC_SUBST([abs_srcroot])

objroot=.
AC_SUBST([objroot])
abs_objroot=`pwd`
AC_SUBST([abs_objroot])

dnl Munge install path variables, since cook doesn't do sh variables.
if test "x$prefix" = "xNONE" ; then
  prefix="/usr/local"
fi
if test "x$exec_prefix" = "xNONE" ; then
  exec_prefix=$prefix
fi
PREFIX=$prefix
AC_SUBST([PREFIX])
BINDIR=`eval echo $bindir`
BINDIR=`eval echo $BINDIR`
AC_SUBST([BINDIR])
DATADIR=`eval echo $datadir`
DATADIR=`eval echo $DATADIR`
AC_SUBST([DATADIR])
LIBDIR=`eval echo $libdir`
LIBDIR=`eval echo $LIBDIR`
AC_SUBST([LIBDIR])
INCLUDEDIR=`eval echo $includedir`
INCLUDEDIR=`eval echo $INCLUDEDIR`
AC_SUBST([INCLUDEDIR])
MANDIR=`eval echo $mandir`
MANDIR=`eval echo $MANDIR`
AC_SUBST([MANDIR])

cfgoutputs="Cookfile Cookfile.inc bin/Cookfile.inc doc/Cookfile.inc"
cfgoutputs="$cfgoutputs lib/Cookfile.inc mod/Cookfile.inc test/Cookfile.inc"
cfgoutputs="$cfgoutputs lib/libonyx/src/nx_gen.nx"
cfgoutputs="$cfgoutputs lib/libonyx/src/liboonyx_init_gen.nx"
cfgoutputs="$cfgoutputs lib/libonyx/src/libonyx_init_gen.nx"
cfgoutputs="$cfgoutputs lib/libonyx/src/nx.nx lib/libonyx/src/nxo_thread.nx"
cfgoutputs="$cfgoutputs bin/onyx/src/batch.nx bin/onyx/src/interactive.nx"
cfgoutputs="$cfgoutputs bin/onyx_config/src/onyx_config.nx"
cfghdrs="$objroot/config.stamp"

bins=
mods=
libs=
docs=

dnl If CFLAGS isn't defined and using gcc, set CFLAGS to something reasonable.
dnl Otherwise, just prevent autoconf from molesting CFLAGS.
CFLAGS=$CFLAGS
AC_PROG_CC
if test "x$CFLAGS" = "x" ; then
  no_CFLAGS="yes"
fi
if test "x$no_CFLAGS" = "xyes" -a "x$GCC" = "xyes" ; then
  GCC_MAJ=`$CC -dumpversion | tr . " " |awk '{print $1}'`
  GCC_MIN=`$CC -dumpversion | tr . " " |awk '{print $2}'`

  if test $GCC_MAJ -gt 3 -o $GCC_MAJ -eq 3 -a $GCC_MIN -ge 3 ; then
    CFLAGS="-Wall -Wno-uninitialized -Wno-strict-aliasing -pipe -g3"
  else
    CFLAGS="-Wall -Wno-uninitialized -pipe -g3"
  fi
fi
dnl Append EXTRA_CFLAGS to CFLAGS, if defined.
if test "x$EXTRA_CFLAGS" != "x" ; then
  CFLAGS="$CFLAGS $EXTRA_CFLAGS"
fi
AC_PROG_CPP

dnl Check for non-default host C compiler.
AC_ARG_WITH([host-cc], [  --with-host-cc          Host-specific C compiler], [
if test "x$with_host_cc" = "xno" ; then
  HCC="$CC"
else
  HCC="$with_host_cc"
fi]
,
[HCC="$CC"]
)
AC_SUBST([HCC])

dnl Check for non-default target C compiler.
AC_ARG_WITH([target-cc], [  --with-target-cc        Target-specific C compiler],
[
if test "x$with_target_cc" = "xno" ; then
  TCC="$CC"
else
  TCC="$with_target_cc"
fi
],
[TCC="$CC"]
)
AC_SUBST([TCC])

dnl Platform-specific settings.  abi and RPATH can probably be determined
dnl programmatically, but doing so is error-prone, which makes it generally
dnl not worth the trouble.
dnl 
dnl Define cpp macros in CPPFLAGS, rather than doing AC_DEFINE(macro), since the
dnl definitions need to be seen before and headers are included, which is a pain
dnl to make happen otherwise.
AC_CANONICAL_HOST
case "${host}" in
  *-*-darwin*)
	CFLAGS="$CFLAGS -fno-common -no-cpp-precomp"
	abi="macho"
	RPATH=""
	;;
  *-*-freebsd*)
	abi="elf"
	RPATH="-Wl,-rpath,"
	;;
  *-*-linux*)
	abi="elf"
	dnl Linux needs this for things like asprintf() and poll() flags.
	CPPFLAGS="$CPPFLAGS -D_GNU_SOURCE"
	RPATH="-Wl,-rpath,"
	;;
  *-*-netbsd*)
	AC_MSG_CHECKING([ABI])
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
[[#ifdef __ELF__
/* ELF */
#else
#error aout
#endif
]])],
                          [abi="elf"],
                          [abi="aout"])
	AC_MSG_RESULT([$abi])
	RPATH="-Wl,-rpath,"
	;;
  *-*-solaris2*)
	abi="elf"
	RPATH="-Wl,-R,"
	dnl Solaris needs this for sigwait().
	CPPFLAGS="$CPPFLAGS -D_POSIX_PTHREAD_SEMANTICS"
	LIBS="$LIBS -lposix4 -lsocket -lnsl"
	;;
  *)
	AC_MSG_RESULT([Unsupported operating system: ${host}])
	abi="elf"
	RPATH="-Wl,-rpath,"
	;;
esac
AC_SUBST([abi])
AC_SUBST([RPATH])

case "${host_cpu}" in
  i[[3456]]86)
	AC_DEFINE([CW_CPU_IA32])
	;;
  powerpc)
	AC_DEFINE([CW_CPU_PPC])
	;;
  *)
	AC_MSG_RESULT([Unsupported CPU "${host_cpu}"; very slow mb_write()])
	;;
esac

dnl Use threads by default.
AC_ARG_ENABLE([threads], [  --disable-threads       Disable threads], [
if test "x$enable_threads" = "xyes" ; then
  enable_threads="1"
else
  enable_threads="0"
fi
],
[enable_threads="1"]
)
AC_ARG_ENABLE([pth], [  --enable-pth            Enable GNU pth], [
if test "x$enable_pth" = "xyes" ; then
  enable_pth="1"
else
  enable_pth="0"
fi
],
[enable_pth="0"]
)
if test "x$enable_threads" = "x1" ; then
  if test "x$enable_pth" = "x0" ; then
    dnl Look for Mach threads.
    have_mthreads="1"
    AC_CHECK_HEADERS([mach/task.h], , [have_mthreads="0"])
    AC_CHECK_FUNCS([mach_thread_self], , [have_mthreads="0"])
    if test "x$have_mthreads" = "x1" ; then
      AC_DEFINE([CW_MTHREADS])
    fi

    dnl Look for Solaris threads.
    have_sthreads="1"
    AC_CHECK_HEADERS([thread.h], , [have_sthreads="0"])
    AC_CHECK_LIB([thread], [thr_suspend], , [have_sthreads="0"])
    AC_CHECK_LIB([thread], [thr_continue], , [have_sthreads="0"])
    if test "x$have_sthreads" = "x1" ; then
      LIBS="$LIBS -lthread"
      AC_DEFINE([CW_STHREADS])
    fi

    dnl Look for pthreads.
    AC_CHECK_HEADERS([pthread.h], , [enable_threads="0"])
    AC_CHECK_LIB([pthread], [pthread_create], [LIBS="$LIBS -lpthread"],
      [AC_CHECK_LIB([c_r], [pthread_create], 
        [LIBS="$LIBS -pthread"], [enable_threads="0"])])
    if test "x$enable_threads" = "x1" ; then
      AC_DEFINE([CW_THREADS])
      AC_DEFINE([CW_PTHREADS])
    fi

    dnl Look for FreeBSD's non-portable suspend/resume API (libc_r).
    have_fthreads="1"
    AC_CHECK_FUNCS([pthread_suspend_np], , [have_fthreads="0"])
    AC_CHECK_FUNCS([pthread_resume_np], , [have_fthreads="0"])
    if test "x$have_fthreads" = "x1" ; then
      AC_DEFINE([CW_FTHREADS])
    fi
  else
    dnl Look for GNU pth.
    if test "x$PTH_PREFIX" = "x" ; then
      AC_PATH_PROG([PTH_CONFIG], [pth-config], , [$PATH])
    else
      AC_PATH_PROG([PTH_CONFIG], [pth-config], , ["$PTH_PREFIX/bin"])
    fi
    if test "x$PTH_CONFIG" != "x" ; then
      dnl Make sure the version of pth found is sufficient.
      AC_MSG_CHECKING([for pth >= $PTH_VERSION_MIN])
      PTH_MAJOR=`$PTH_CONFIG --version | awk '{print $3}' | tr . " " | awk '{print $1}'`
      PTH_MINOR=`$PTH_CONFIG --version | awk '{print $3}' | tr . " " | awk '{print $2}'`
      PTH_MAJOR_MIN=`echo $PTH_VERSION_MIN | tr . " " | awk '{print $1}'`
      PTH_MINOR_MIN=`echo $PTH_VERSION_MIN | tr . " " | awk '{print $2}'`
      if test $PTH_MAJOR -gt $PTH_MAJOR_MIN \
           -o $PTH_MAJOR -eq $PTH_MAJOR_MIN \
           -a $PTH_MINOR -ge $PTH_MINOR_MIN ; then
        AC_MSG_RESULT([$PTH_MAJOR.$PTH_MINOR])
        PTH_CPPFLAGS=`$PTH_CONFIG --cflags`
        PTH_LDFLAGS=`$PTH_CONFIG --all --ldflags`
        PTH_LIBS=`$PTH_CONFIG --all --libs`
        have_pth="1"
      else
        AC_MSG_RESULT([no])
        have_pth="0"
      fi
    else
      have_pth="0"
    fi
    if test "x$have_pth" = "x1" ; then
      CPPFLAGS="$CPPFLAGS $PTH_CPPFLAGS"
      LDFLAGS="$LDFLAGS $PTH_LDFLAGS"
      LIBS="$LIBS $PTH_LIBS"
      AC_DEFINE([CW_THREADS])
      AC_DEFINE([CW_PTH])
    else
      enable_threads="0"
    fi
  fi
fi
if test "x$enable_threads" = "x1" ; then
  CPPFLAGS="$CPPFLAGS -D_REENTRANT"
fi
AC_SUBST([enable_threads])

dnl Enable real support by default.
AC_ARG_ENABLE([real], [  --disable-real          Disable real number support],

if test "x$enable_real" = "xyes" ; then
  enable_real="1"
else
  enable_real="0"
fi
,
enable_real="1"
)
AC_SUBST([enable_real])
if test "x$enable_real" = "x1" ; then
  AC_DEFINE([CW_REAL])
  LIBS="$LIBS -lm"
  AC_CHECK_FUNCS([asprintf])
fi

dnl Support POSIX file operations by default.
AC_ARG_ENABLE([posix-file],
              [  --disable-posix-file    Disable POSIX file support],
[
if test "x$enable_posix_file" = "xyes" ; then
  enable_posix_file="1"
else
  enable_posix_file="0"
fi
],
[enable_posix_file="1"]
)
AC_SUBST([enable_posix_file])
if test "x$enable_posix_file" = "x1" ; then
  AC_DEFINE([CW_POSIX_FILE])
fi

dnl Support POSIX by default.
AC_ARG_ENABLE([posix], [  --disable-posix         Disable POSIX support],
[if test "x$enable_posix" = "xyes" ; then
  enable_posix="1"
else
  enable_posix="0"
fi
],
[enable_posix="1"]
)
dnl posix depends on posix-file.
if test "x$enable_posix_file" = "x0" ; then
  enable_posix="0"
fi
AC_SUBST([enable_posix])
if test "x$enable_posix" = "x1" ; then
  AC_DEFINE([CW_POSIX])
fi

dnl Support sockets by default.
AC_ARG_ENABLE([socket], [  --disable-socket        Disable socket support],
[if test "x$enable_socket" = "xyes" ; then
  enable_socket="1"
else
  enable_socket="0"
fi
],
[enable_socket="1"]
)
dnl socket depends on posix.
if test "x$enable_posix" = "x0" ; then
  enable_socket="0"
fi
AC_SUBST([enable_socket])
if test "x$enable_socket" = "x1" ; then
  AC_DEFINE([CW_SOCKET])
  AC_CHECK_TYPE([socklen_t], [AC_DEFINE([CW_HAVE_SOCKLEN_T])], ,
[#include <sys/types.h>
#include <sys/socket.h>
])
fi

dnl Suuport oop by default.
AC_ARG_ENABLE([oop],
              [  --disable-oop           Disable object-oriented programming support],
[if test "x$enable_oop" = "xno" ; then
  enable_oop="0"
else
  enable_oop="1"
fi
],
[enable_oop="1"]
)
AC_SUBST([enable_oop])
if test "x$enable_oop" = "x1" ; then
  AC_DEFINE([CW_OOP])
fi

dnl Support handle by default.
AC_ARG_ENABLE([handle], [  --disable-handle        Disable handle support],
[if test "x$enable_handle" = "xno" ; then
  enable_handle="0"
else
  enable_handle="1"
fi
],
[enable_handle="1"]
)
AC_SUBST([enable_handle])
if test "x$enable_handle" = "x1" ; then
  AC_DEFINE([CW_HANDLE])
fi

dnl Support regex by default.
AC_ARG_ENABLE([regex],
              [  --disable-regex         Disable regular expression support],
[if test "x$enable_regex" = "xyes" ; then
  enable_regex="1"
else
  enable_regex="0"
fi
],
[enable_regex="1"]
)
if test "x$enable_regex" = "x1" ; then
  dnl Check for pcre.
  AC_ARG_WITH([pcre-prefix], [  --with-pcre-prefix      Prefix for pcre],
  [if test "x$with_pcre_prefix" = "xno" ; then
    PCRE_PREFIX=
  else
    PCRE_PREFIX="$with_pcre_prefix"
  fi
  ],
  [PCRE_PREFIX=]
  )
  AC_SUBST([PCRE_PREFIX])

  if test "x$PCRE_PREFIX" = "x" ; then
    AC_PATH_PROG([PCRE_CONFIG], [pcre-config], , [$PATH])
  else
    AC_PATH_PROG([PCRE_CONFIG], [pcre-config], , ["$PCRE_PREFIX/bin"])
  fi
  if test "x$PCRE_CONFIG" != "x" ; then
    dnl Make sure the version of pcre found is sufficient.
    AC_MSG_CHECKING([for pcre >= $PCRE_VERSION_MIN])
    PCRE_MAJOR=`$PCRE_CONFIG --version | tr . " " | awk '{print $1}'`
    PCRE_MINOR=`$PCRE_CONFIG --version | tr . " " | awk '{print $2}'`
    PCRE_MAJOR_MIN=`echo $PCRE_VERSION_MIN | tr . " " | awk '{print $1}'`
    PCRE_MINOR_MIN=`echo $PCRE_VERSION_MIN | tr . " " | awk '{print $2}'`
    if test $PCRE_MAJOR -gt $PCRE_MAJOR_MIN \
         -o $PCRE_MAJOR -eq $PCRE_MAJOR_MIN \
         -a $PCRE_MINOR -ge $PCRE_MINOR_MIN ; then
      AC_MSG_RESULT([$PCRE_MAJOR.$PCRE_MINOR])
      PCRE_CPPFLAGS=`$PCRE_CONFIG --cflags`
      PCRE_LDFLAGS=`$PCRE_CONFIG --libs | tr " " "\n" | grep "^\-L"`
      PCRE_LIBS=`$PCRE_CONFIG --libs | tr " " "\n" | grep "^\-l"`
    else
      AC_MSG_RESULT([no])
      enable_regex="0"
    fi
  else
    enable_regex="0"
  fi
fi
AC_SUBST([enable_regex])
if test "x$enable_regex" = "x1" ; then
  CPPFLAGS="$CPPFLAGS $PCRE_CPPFLAGS"
  LDFLAGS="$LDFLAGS $PCRE_LDFLAGS"
  LIBS="$LIBS $PCRE_LIBS"
  AC_DEFINE([CW_REGEX])
fi

dnl Support modules by default.
AC_ARG_ENABLE([modules], [  --disable-modules       Do not support modules],
[if test "x$enable_modules" = "xno" ; then
  enable_modules="0"
else
  enable_modules="1"
fi
],
[enable_modules="1"]
)
if test "x$enable_oop" = "x0" -o "x$enable_handle" = "x0" \
     -o "x$enable_regex" = "x0" -o "x$enable_posix" = "x0" ; then
  enable_modules="0"
fi
if test "x$enable_modules" = "x1" ; then
  AC_CHECK_FUNCS([dlopen], ,
    [AC_CHECK_LIB([dl], [dlopen], [LIBS="$LIBS -ldl"],
      [enable_modules="0"; \
      AC_MSG_RESULT([Modules disabled since dlopen is missing])])])
fi
AC_SUBST([enable_modules])
if test "x$enable_modules" = "x1" ; then
  AC_DEFINE([CW_MODULES])
fi

dnl Do not compile with debugging by default.
AC_ARG_ENABLE([debug], [  --enable-debug          Build debugging code],
[if test "x$enable_debug" = "xno" ; then
  enable_debug="0"
else
  enable_debug="1"
fi
],
[enable_debug="0"]
)
if test "x$enable_debug" = "x1" ; then
  AC_DEFINE([CW_DBG])
  AC_DEFINE([CW_ASSERT])
fi
AC_SUBST([enable_debug])

dnl Only optimize if not debugging.
if test "x$enable_debug" = "x0" -a "x$no_CFLAGS" = "xyes" ; then
  dnl Make sure that an optimization flag was not specified in EXTRA_CFLAGS.
  echo "$EXTRA_CFLAGS" | grep "\-O" >/dev/null || CFLAGS="$CFLAGS -O2"
fi

dnl Support inlines by default.
AC_ARG_ENABLE([inlines],
              [  --disable-inlines       Do not use inline functions],
[if test "x$enable_inlines" = "xno" ; then
  enable_inlines="0"
else
  enable_inlines="1"
fi
],
[enable_inlines="1"]
)
dnl inlines are incompatible with debug.
if test "x$enable_debug" = "x1" ; then
  enable_inlines="0"
fi
if test "x$enable_inlines" = "x1" ; then
  AC_DEFINE([CW_USE_INLINES])
fi
AC_SUBST([enable_inlines])

dnl Disable rules that do automatic regeneration of configure output by default.
AC_ARG_ENABLE([autogen],
              [  --enable-autogen        Automatically regenerate configure output],
[if test "x$enable_autogen" = "xno" ; then
  enable_autogen="0"
else
  enable_autogen="1"
fi
],
[enable_autogen="0"]
)
AC_SUBST([enable_autogen])

dnl Look for libraries.
CW_BUILD_LIB([libonyx], [lib_onyx])

dnl Look for modules.
if test "x$enable_modules" = "x0" ; then
  AC_MSG_RESULT([Modules disabled; not doing module configuration])
fi

dnl modprompt.
if test "x$enable_modules" = "x1" ; then
  AC_ARG_WITH([libedit-prefix],
              [  --with-libedit-prefix   Prefix for libedit],
[
  if test "x$with_libedit_prefix" = "xno" ; then
    LIBEDIT_PREFIX=
  else
    LIBEDIT_PREFIX="$with_libedit_prefix"
  fi
  ],
  [LIBEDIT_PREFIX=]
  )
  if test "x$LIBEDIT_PREFIX" != "x" ; then
    LIBEDIT_CPPFLAGS="-I$LIBEDIT_PREFIX/include"
    LIBEDIT_LDFLAGS="-L$LIBEDIT_PREFIX/lib"
  else
    LIBEDIT_CPPFLAGS=
    LIBEDIT_LDFLAGS=
  fi
  AC_SUBST([LIBEDIT_PREFIX])
  AC_SUBST([LIBEDIT_LDFLAGS])
  AC_SUBST([LIBEDIT_CPPFLAGS])

  AC_ARG_ENABLE([modprompt],
                [  --disable-modprompt     Do not use modprompt],
[
  if test "x$enable_modprompt" = "xno" ; then
    enable_modprompt="0"
  else
    enable_modprompt="1"
  fi
  ],
  [enable_modprompt="1"]
  )
  if test "x$enable_modprompt" = "x1" ; then
    MODPROMPT_CPPFLAGS=

    TEMP_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$LIBEDIT_CPPFLAGS $CPPFLAGS"
    AC_CHECK_HEADERS([histedit.h], , [enable_modprompt="0"])
    dnl Check if this version of libedit is known to be compatible.
    LIBEDIT_MAJOR_MIN=`echo $LIBEDIT_VERSION_MIN | tr . " " | awk '{print $1}'`
    LIBEDIT_MINOR_MIN=`echo $LIBEDIT_VERSION_MIN | tr . " " | awk '{print $2}'`
    AC_MSG_CHECKING([for libedit >= $LIBEDIT_MAJOR_MIN.$LIBEDIT_MINOR_MIN])
    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
[[
#include <histedit.h>
#if (defined(LIBEDIT_MAJOR) && defined(LIBEDIT_MINOR))
#if (LIBEDIT_MAJOR > $LIBEDIT_MAJOR_MIN || LIBEDIT_MAJOR == $LIBEDIT_MAJOR_MIN && LIBEDIT_MINOR >= $LIBEDIT_MINOR_MIN)
/* Good libedit */
#else
#error Obsolete libedit
#endif
#else
#error Unknown libedit
#endif
]])],
                      [enable_modprompt="1"; AC_MSG_RESULT([yes])],
                      [enable_modprompt="0"; AC_MSG_RESULT([no])])

    CPPFLAGS="$TEMP_CPPFLAGS"

    TEMP_LIBS="$LIBS"
    LIBS="$LIBEDIT_LDFLAGS $LIBS"
    AC_CHECK_LIB([termcap], [tgetent], [MODPROMPT_LDFLAGS="-ltermcap"],
      [AC_CHECK_LIB([tinfo], [tgetent], [MODPROMPT_LDFLAGS="-ltinfo"],
        [AC_CHECK_LIB([curses], [tgetent], [MODPROMPT_LDFLAGS="-lcurses"],
          [AC_CHECK_LIB([ncurses], [tgetent],
                        [MODPROMPT_LDFLAGS="-lncurses"])])])],
      [enable_modprompt="0"])
    LIBS="$LIBS $MODPROMPT_LDFLAGS"
    AC_CHECK_LIB([edit], [el_init],
      [MODPROMPT_LDFLAGS="$MODPROMPT_LDFLAGS -ledit"], [enable_modprompt="0"])
    LIBS="$TEMP_LIBS"
    AC_SUBST([MODPROMPT_CPPFLAGS])
    AC_SUBST([MODPROMPT_LDFLAGS])
    if test "x$enable_modprompt" = "x1" ; then
      CW_BUILD_MOD([modprompt], [enable_modprompt])
    fi
  fi
  if test "x$enable_modprompt" = "x1" ; then
    AC_DEFINE([CW_USE_MODPROMPT])
  fi
  if test "x$enable_modprompt" = "x0" ; then
    AC_MSG_RESULT([Missing features or configuration options necessary for modprompt])
  fi
else
  enable_modprompt="0"
fi
AC_SUBST([enable_modprompt])

dnl modclopt.
if test "x$enable_modules" = "x1" ; then
  AC_ARG_ENABLE([modclopt],
                [  --disable-modclopt      Do not use modclopt],
[
  if test "x$enable_modclopt" = "xno" ; then
    enable_modclopt="0"
  else
    enable_modclopt="1"
  fi
  ],
  [enable_modclopt="1"]
  )

  if test "x$enable_modclopt" = "x1" ; then
    CW_BUILD_MOD([modclopt], [enable_modclopt])
  fi
  if test "x$enable_modclopt" = "x1" ; then
    AC_DEFINE([CW_USE_MODCLOPT])
  fi
else
  enable_clopt="0"
fi
AC_SUBST([enable_modclopt])

dnl Look for binaries.
CW_BUILD_BIN([onyx], [bin_onyx])
CW_BUILD_BIN([onyx_config], [bin_onyx_config])

AC_SUBST([bins])
AC_SUBST([mods])
AC_SUBST([libs])
AC_SUBST([docs])

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PATH_PROG([AR], [ar], , [$PATH])
AC_PATH_PROG([LD], [ld], , [$PATH])
AC_PATH_PROG([PERL], [perl], , [$PATH])
AC_PATH_PROG([ACLOCAL], [aclocal], , [$PATH])
AC_PATH_PROG([AUTOCONF], [autoconf], , [$PATH])

dnl Do not build documentaion by default; instead use the prebuilt
dnl documentation.
AC_ARG_WITH([docs], [  --with-docs             Build documentation],
[if test "x$with_docs" = "xno" ; then
  with_docs="0"
else
  with_docs="1"
fi
],
[with_docs="0"]
)
if test "x$with_docs" = "x1" ; then
  AC_PATH_PROG([PDFLATEX], [pdflatex], , [$PATH])
  AC_PATH_PROG([DVIPS], [dvips], , [$PATH])
  AC_PATH_PROG([FIG2DEV], [fig2dev], , [$PATH])
  AC_PATH_PROG([LATEX2HTML], [latex2html], , [$PATH])
  AC_PATH_PROG([MAKEINDEX], [makeindex], , [$PATH])

  if test "x$PDFLATEX" = "x" -o "x$DVIPS" = "x" -o "x$FIG2DEV" = "x" \
     -o "x$LATEX2HTML" = "x" -o "x$MAKEINDEX" = "x" ; then
    AC_MSG_ERROR([Missing one or more programs necessary for documentation build])
  fi
fi
AC_SUBST([with_docs])
dnl Include rules for building/installing documents, if the docs are included.
dnl These tests are orthogonal to the tests above.
CW_BUILD_DOC([onyx], [doc_onyx])
if test "x$doc_onyx" = "x1" ; then
  cfgoutputs="$cfgoutputs doc/latex/onyx/lang.tex"
  cfgoutputs="$cfgoutputs doc/latex/onyx/lang_class_module.tex"
fi

VERIFY="$objroot/test/verify"
AC_SUBST([VERIFY])

dnl Define preprocessor macros.

dnl Check for header files.
if test "x$enable_posix_file" = "x1" ; then
  dnl Make sure that poll() and/or select() is available.  The strange structure
  dnl of tests assures that HAVE_POLL isn't defined unless the necessary cpp
  dnl definitions are also present.  (Mac OS X 10.3 has poll.h, but is missing
  dnl the appropriate cpp definitions.)
  AC_MSG_CHECKING([for poll])
  AC_TRY_LINK([
#include <stdio.h>
#include <stdlib.h>
#include <sys/poll.h>
#ifndef POLLRDNORM
#error Missing POLLRDNORM
#endif
#ifndef POLLWRNORM
#error Missing POLLWRNORM
#endif
#ifndef POLLRDBAND
#error Missing POLLRDBAND
#endif
#ifndef POLLWRBAND
#error Missing POLLWRBAND
#endif
], [
poll(NULL, 0, 0);
], [can_poll="1"], [can_poll="0"])
  if test "x$can_poll" = "x1" ; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_POLL)
  else
    AC_MSG_RESULT(no)
    AC_CHECK_FUNCS([select], [can_poll="1"])
  fi
  if test "x$can_poll" = "x0" ; then
    AC_MSG_ERROR([Cannot build without poll() or select()])
  fi

  AC_CHECK_FUNCS([readdir_r])
fi
if test "x$enable_posix" = "x1" ; then
  AC_CHECK_HEADERS([unistd.h], , 
                   [AC_MSG_ERROR([Cannot build without unistd.h])])
fi

dnl Check for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN

dnl 
dnl onyx configuration.
dnl 
if test "x$bin_onyx" = "x1" ; then
  if echo "<Version = onyx>" | grep Version >/dev/null ; then
    onyx_version=devel
  else
    onyx_version="<Version = onyx>"
  fi
  AC_SUBST([onyx_version])

  OONYX="$abs_objroot/bin/onyx/bin/oonyx"
  AC_SUBST([OONYX])

  ONYX="$BINDIR/onyx-$onyx_version"
  AC_SUBST([ONYX])

  AC_CHECK_DECL([optreset])
fi

dnl 
dnl libonyx configuration.
dnl 
if test "x$lib_onyx" = "x1" ; then
  AC_CHECK_SIZEOF([int *], [4]) dnl defines SIZEOF_INT_P

  AC_HEADER_STDBOOL

  AC_CHECK_HEADERS([sys/socket.h netinet/in.h arpa/inet.h machine/endian.h])

  if test "x$enable_posix" = "x1" ; then
    oonyx_mpath_post=
    oonyx_rpath_post=
    for i in $mods ; do
      oonyx_mpath_post="$oonyx_mpath_post \`$abs_srcroot/mod/$i/nxm'"
      oonyx_mpath_post="$oonyx_mpath_post \`$abs_objroot/mod/$i/nxm'"

      oonyx_rpath_post="$oonyx_rpath_post \`$abs_srcroot/mod/$i/nx'"
      oonyx_rpath_post="$oonyx_rpath_post \`$abs_objroot/mod/$i/nx'"
    done
    dnl Remove leading ' '.
    oonyx_mpath_post=`echo $oonyx_mpath_post | sed s/\ //`
    oonyx_rpath_post=`echo $oonyx_rpath_post | sed s/\ //`
    AC_SUBST([oonyx_rpath_post])
    AC_SUBST([oonyx_mpath_post])

    onyx_rpath_post="\`$DATADIR/onyx-$onyx_version/nx'"
    onyx_mpath_post="\`$DATADIR/onyx-$onyx_version/nxm'"
    AC_SUBST([onyx_rpath_post])
    AC_SUBST([onyx_mpath_post])

    dnl Try to figure out which field of struct dirent contains the entry string
    dnl length.
    AC_MSG_CHECKING([for (struct dirent).d_namlen])
    AC_TRY_LINK([
#include <sys/types.h>
#include <dirent.h>
], [
    struct dirent ent;

    ent.d_namlen = 0;
], AC_MSG_RESULT([yes])
   AC_DEFINE([CW_HAVE_DIRENT_NAMLEN]),
   AC_MSG_RESULT([no]))

    dnl Look for nanosecond resolution of atime in struct stat.
    AC_MSG_CHECKING([for (struct stat).st_atimespec])
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
], [
    struct stat st;

    st.st_atimespec.tv_nsec = 0;
], AC_MSG_RESULT([yes])
   AC_DEFINE([CW_LIBONYX_USE_STAT_ATIMESPEC]),
   AC_MSG_RESULT([no]))

    dnl Look for nanosecond resolution of mtime in struct stat.
    AC_MSG_CHECKING([for (struct stat).st_mtimespec])
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
], [
    struct stat st;

    st.st_mtimespec.tv_nsec = 0;
], AC_MSG_RESULT([yes])
   AC_DEFINE([CW_LIBONYX_USE_STAT_MTIMESPEC]),
   AC_MSG_RESULT([no]))

    dnl Look for nanosecond resolution of ctime in struct stat.
    AC_MSG_CHECKING([for (struct stat).st_ctimespec])
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/stat.h>
], [
    struct stat st;

    st.st_ctimespec.tv_nsec = 0;
], AC_MSG_RESULT([yes])
   AC_DEFINE([CW_LIBONYX_USE_STAT_CTIMESPEC]),
   AC_MSG_RESULT([no]))

    dnl Look for either (struct tm).tm_zone or tzname.
    AC_MSG_CHECKING([for (struct tm).tm_zone])
    AC_TRY_LINK([
#include <sys/time.h>
#include <time.h>
], [
    struct tm tm;

    tm.tm_zone = "GMT";
], AC_MSG_RESULT([yes])
   AC_DEFINE([CW_LIBONYX_USE_TM_ZONE]),
   AC_MSG_RESULT([no])
   AC_MSG_CHECKING([for tzname])
   AC_TRY_LINK([
#include <sys/time.h>
#include <time.h>
], [
    tzname[[0]] = "GMT";
], AC_MSG_RESULT([yes])
   AC_DEFINE([CW_LIBONYX_USE_TZNAME]),
   AC_MSG_RESULT([no])
   AC_MSG_ERROR([Cannot support localtime operator (POSIX)])))

    dnl Look for either (struct tm).tm_gmtoff or altzone.
    AC_MSG_CHECKING([for (struct tm).tm_gmtoff])
    AC_TRY_LINK([
#include <sys/time.h>
#include <time.h>
], [
    struct tm tm;

    tm.tm_gmtoff = 0;
], AC_MSG_RESULT([yes])
   AC_DEFINE([CW_LIBONYX_USE_TM_GMTOFF]),
   AC_MSG_RESULT([no])
   AC_MSG_CHECKING([for altzone])
   AC_TRY_LINK([
#include <sys/time.h>
#include <time.h>
], [
    altzone = 0;
], AC_MSG_RESULT([yes])
   AC_DEFINE([CW_LIBONYX_USE_ALTZONE]),
   AC_MSG_RESULT([no])
   AC_MSG_ERROR([Cannot support localtime operator (POSIX)])))

    AC_CHECK_FUNCS([unsetenv])
  fi
fi

dnl Process .in files.
AC_SUBST([cfghdrs])
AC_CONFIG_HEADER([$cfghdrs])

dnl verify is handled separately, since it must be executable.
AC_CONFIG_FILES([$cfgoutputs], [chmod +x $objroot/test/verify])
AC_CONFIG_FILES([test/verify], [chmod +x test/verify])
cfgoutputs="$cfgoutputs test/verify"
AC_SUBST([cfgoutputs])
AC_OUTPUT

dnl 
dnl Print out the results of configuration.
dnl 
AC_MSG_RESULT([===============================================================================])
if test "x$bin_onyx" = "x1" ; then
AC_MSG_RESULT([Onyx version  : $onyx_version])
fi
AC_MSG_RESULT([])
AC_MSG_RESULT([HCC           : ${HCC}])
AC_MSG_RESULT([TCC           : ${TCC}])
AC_MSG_RESULT([CPPFLAGS      : ${CPPFLAGS}])
AC_MSG_RESULT([CFLAGS        : ${CFLAGS}])
AC_MSG_RESULT([LDFLAGS       : ${LDFLAGS}])
AC_MSG_RESULT([LIBS          : ${LIBS}])
AC_MSG_RESULT([])
AC_MSG_RESULT([PREFIX        : ${PREFIX}])
AC_MSG_RESULT([BINDIR        : ${BINDIR}])
AC_MSG_RESULT([DATADIR       : ${DATADIR}])
AC_MSG_RESULT([LIBDIR        : ${LIBDIR}])
AC_MSG_RESULT([INCLUDEDIR    : ${INCLUDEDIR}])
AC_MSG_RESULT([MANDIR        : ${MANDIR}])
AC_MSG_RESULT([])
AC_MSG_RESULT([srcroot       : ${srcroot}])
AC_MSG_RESULT([abs_srcroot   : ${abs_srcroot}])
AC_MSG_RESULT([objroot       : ${objroot}])
AC_MSG_RESULT([abs_objroot   : ${abs_objroot}])
AC_MSG_RESULT([])
AC_MSG_RESULT([libs          :${libs}])
AC_MSG_RESULT([mods          :${mods}])
AC_MSG_RESULT([bins          :${bins}])
AC_MSG_RESULT([docs          :${docs}])
AC_MSG_RESULT([])
AC_MSG_RESULT([oop           : ${enable_oop}])
AC_MSG_RESULT([handle        : ${enable_handle}])
AC_MSG_RESULT([threads       : ${enable_threads}])
AC_MSG_RESULT([real          : ${enable_real}])
AC_MSG_RESULT([regex         : ${enable_regex}])
AC_MSG_RESULT([posix         : ${enable_posix}])
AC_MSG_RESULT([posix-file    : ${enable_posix_file}])
AC_MSG_RESULT([socket        : ${enable_socket}])
AC_MSG_RESULT([modules       : ${enable_modules}])
AC_MSG_RESULT([inlines       : ${enable_inlines}])
AC_MSG_RESULT([debug         : ${enable_debug}])
AC_MSG_RESULT([autogen       : ${enable_autogen}])
AC_MSG_RESULT([docs          : ${with_docs}])
AC_MSG_RESULT([===============================================================================])
