%-*-mode:latex-*-
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% <Copyright = jasone>
% <License>
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Version: Onyx <Version = onyx>
%
% modclopt reference portion of Onyx Manual.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{modclopt}
\label{sec:modclopt}
\index{systemdict@\onyxop{}{modclopt}{}}

The \modulename{modclopt} module implements command line option parsing via the
\classname{clopt} class.  Both short- and long-style arguments are supported.
There are also methods that aid in validating and converting arguments.

An application implements a command line parser by loading the
\modulename{modclopt} module, subclassing the \classname{clopt} class, and
defining option-handling methods.  At a minimum, this looks something like:

\begin{verbatim}
$modclopt mclass:singleton:load

$myopts clopt <
><
    `--help' {
        `Help yourself' ;error_print
        1 die
    }
> cdef

argv myopts:new:parse
\end{verbatim}

There are five option formats.  Handler methods ``names'' must be strings.  The
absence or presence of the ``:'', ``?'', and ``='' characters at the ends of the
handler method names determines whether the options take arguments:
\begin{description}
\item[{\tt `-s'}: ]
	Handle a short-style argument ({\tt -s}) that has no arguments.
\item[{\tt '-S:'}: ]
	Handle a short-style argument ({\tt -S}) that must have an argument.
\item[{\tt `--long'}: ]
	Handle a long-style option ({\tt --long}) that has no arguments.
\item[{\tt `--Long?'}: ]
	Handle a long-style option ({\tt --Long}) that has an optional argument.
\item[{\tt `--LONG='}: ]
	Handle a long-style option ({\tt --LONG}) that must have an argument.
\end{description}

The {\tt --} command line argument terminates argument parsing, and any
remaining arguments are returned by the \method{parse} method.

\classname{clopt} subclasses \htmlref{\classname{vclass}}{sec:vclass}.

\begin{longtable}{\optableformat{4.10}}
\caption{clopt summary}
\\
\hline
\optableent
	{Input(s)}
	{Method}
	{Output(s)}
	{Description}
\hline \hline
%begin{latexonly}
\endfirsthead
\caption[]{\emph{continued}} \\
\hline
\optableent
	{Input(s)}
	{Method}
	{Output(s)}
	{Description}
\hline \hline \endhead
\multicolumn{2}{r}{\emph{Continued on next page...}} \endfoot
\hline \endlastfoot
%end{latexonly}
\multicolumn{2}{|l|}{Class-context methods} \\
\hline \hline
\optableent
	{--}
	{{\bf \htmlref{new}{modclopt:new}}}
	{instance}
	{Constructor.}
\hline \hline
\multicolumn{2}{|l|}{Instance-context methods} \\
\hline \hline
\optableent
	{argv}
	{{\bf \htmlref{parse}{modclopt:parse}}}
	{remainder false}
	{Successfully parse argv.}
\optableent
	{argv}
	{{\bf \htmlref{parse}{modclopt:parse}}}
	{true}
	{Unsuccessfully parse argv.}
\hline
\optableent
	{errstr}
	{{\bf \htmlref{error\_print}{modclopt:error_print}}}
	{--}
	{Print an error.}
\hline
\optableent
	{errstr}
	{{\bf \htmlref{error\_escape}{modclopt:error_escape}}}
	{--}
	{Handle an error, and unwind to the parse method.}
\hline
\optableent
	{--}
	{{\bf \htmlref{progname\_get}{modclopt:progname_get}}}
	{progname}
	{Return the program name.}
\hline
\optableent
	{--}
	{{\bf \htmlref{argv\_get}{modclopt:argv_get}}}
	{argv}
	{Return argv.}
\hline
\optableent
	{--}
	{{\bf \htmlref{index\_get}{modclopt:index_get}}}
	{index}
	{Return the current argv index.}
\hline
\optableent
	{--}
	{{\bf \htmlref{flag\_get}{modclopt:flag_get}}}
	{flag}
	{Return the current option flag.}
\hline
\optableent
	{--}
	{{\bf \htmlref{arg\_get}{modclopt:arg_get}}}
	{arg}
	{Return the current option argument.}
\hline
\optableent
	{enum}
	{{\bf \htmlref{arg\_enum\_get}{modclopt:arg_enum_get}}}
	{value}
	{Map the current option argument to a value.}
\hline
\optableent
	{--}
	{{\bf \htmlref{arg\_int\_get}{modclopt:arg_int_get}}}
	{int}
	{Return the current option argument as an integer.}
\hline
\optableent
	{--}
	{{\bf \htmlref{arg\_uint\_get}{modclopt:arg_uint_get}}}
	{uint}
	{Return the current option argument as an unsigned integer.}
\end{longtable}

\begin{description}
\label{modclopt:arg_enum_get}
\index{arg_enum_get@\onyxop{}{arg\_enum\_get}{}}
\item[{\onyxop{enum}{arg\_enum\_get}{value}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[enum: ]
			A dictionary of string keys with associated values, as
			well as an optional {\tt \$default} key and associated
			value.
		\end{description}
	\item[Output(s): ]
		\begin{description}\item[]
		\item[value: ]
			One of the values in \oparg{enum}.
		\end{description}
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{stackunderflow}{stackunderflow}.]
		\item[\htmlref{typecheck}{typecheck}.]
		\end{description}
	\item[Description: ]
		Map the current option argument to a value in \oparg{enum}, and
		return that value.  This method is only to be called from within
		an option handler.
	\item[Example(s): ]
		\example
		    {arg\_enum\_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/arg_enum_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/arg_enum_get.nx.out}
	\end{description}
\label{modclopt:arg_get}
\index{arg_get@\onyxop{}{arg\_get}{}}
\item[{\onyxop{--}{arg\_get}{arg}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[arg: ]
			A string if an argument was specified, null otherwise.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Get the argument string associated with the current flag, or
		null if no argument was specified.  This method is only to be
		called from within an option handler.
	\item[Example(s): ]
		\example
		    {arg\_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/arg_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/arg_get.nx.out}
	\end{description}
\label{modclopt:arg_int_get}
\index{arg_int_get@\onyxop{}{arg\_int\_get}{}}
\item[{\onyxop{--}{arg\_int\_get}{int}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[int: ]
			An integer.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Return the current option argument as an integer.  Perform input
		validation, and cause the \method{parse} method to return an
		error if the argument cannot be converted to an integer.  This
		method is only to be called from within an option handler.
	\item[Example(s): ]
		\example
		    {arg\_int\_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/arg_int_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/arg_int_get.nx.out}
	\end{description}
\label{modclopt:arg_uint_get}
\index{arg_uint_get@\onyxop{}{arg\_uint\_get}{}}
\item[{\onyxop{--}{arg\_uint\_get}{uint}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[uint: ]
			An unsigned integer.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Return the current option argument as an unsigned integer.
		Perform input validation, and cause the \method{parse} method to
		return an error if the argument cannot be converted to an
		unsigned integer.  This method is only to be called from within
		an option handler.
	\item[Example(s): ]
		\example
		    {arg\_uint\_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/arg_uint_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/arg_uint_get.nx.out}
	\end{description}
\label{modclopt:argv_get}
\index{argv_get@\onyxop{}{argv\_get}{}}
\item[{\onyxop{--}{argv\_get}{argv}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[argv: ]
			An array of strings.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Get the argument array that was passed in to the \method{parse}
		method.  This method is only to be called from within an option
		handler.
	\item[Example(s): ]
		\example
		    {argv\_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/argv_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/argv_get.nx.out}
	\end{description}
\label{modclopt:error_escape}
\index{error_escape@\onyxop{}{error\_escape}{}}
\item[{\onyxop{errstr}{error\_escape}{--}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[errstr: ]
			An error string.
		\end{description}
	\item[Output(s): ] None (does not return).
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{ioerror}{ioerror}.]
		\item[\htmlref{stackunderflow}{stackunderflow}.]
		\item[\htmlref{typecheck}{typecheck}.]
		\end{description}
	\item[Description: ]
		Call the \method{error\_print} method, then clean up from an
		error, such that the \method{parse} method returns an error.
	\item[Example(s): ]
		\example
		    {error\_escape.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/error_escape.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/error_escape.nx.out}
	\end{description}
\label{modclopt:error_print}
\index{error_print@\onyxop{}{error\_print}{}}
\item[{\onyxop{errstr}{error\_print}{--}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[errstr: ]
			An error string.
		\end{description}
	\item[Output(s): ] None.
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{ioerror}{ioerror}.]
		\item[\htmlref{stackunderflow}{stackunderflow}.]
		\item[\htmlref{typecheck}{typecheck}.]
		\end{description}
	\item[Description: ]
		Print \oparg{errstr} to stderr.  This method is only to be
		called from within an option handler.
	\item[Example(s): ]
		\example
		    {error\_print.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/error_print.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/error_print.nx.out}
	\end{description}
\label{modclopt:flag_get}
\index{flag_get@\onyxop{}{flag\_get}{}}
\item[{\onyxop{--}{flag\_get}{flag}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[flag: ]
			A string that contains the argument, including any
			leading dashes, but excluding any trailing argument
			characters.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Get the current argument flag.  This method is only to be called
		from within an option handler.
	\item[Example(s): ]
		\example
		    {flag\_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/flag_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/flag_get.nx.out}
	\end{description}
\label{modclopt:index_get}
\index{index_get@\onyxop{}{index\_get}{}}
\item[{\onyxop{--}{index\_get}{index}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[index: ]
			Array index of current argument, within the array passed
			in to the \method{parse} method.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Get the array index of the current argument, within the array
		passed in ot the \method{parse} method.  This method is only to
		be called from within an option handler.
	\item[Example(s): ]
		\example
		    {index\_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/index_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/index_get.nx.out}
	\end{description}
\label{modclopt:new}
\index{new@\onyxop{}{new}{}}
\item[{\onyxop{--}{new}{instance}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[instance: ]
			An instance of clopt.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Constructor.
	\item[Example(s): ]\begin{verbatim}

onyx:0> $modclopt mclass:singleton:load
onyx:0> clopt:new
onyx:1> 1 sprint
-instance=$clopt-
onyx:0>
		\end{verbatim}
	\end{description}
\label{modclopt:parse}
\index{parse@\onyxop{}{parse}{}}
\item[{\onyxop{argv}{parse}{remainder false}}: ]
\item[{\onyxop{argv}{parse}{true}}: ]
	\begin{description}\item[]
	\item[Input(s): ]
		\begin{description}\item[]
		\item[argv: ]
			An array of strings.  The first element in the array is
			the program path, and the rest of the array is
			arguments.
		\end{description}
	\item[Output(s): ]
		\begin{description}\item[]
		\item[remainder: ]
			A subarray of \oparg{argv} that contains any remaining
			unprocessed arguments.
		\item[false: ]
			Success.
		\item[true: ]
			An error occurred during parsing.
		\end{description}
	\item[Error(s): ]
		\begin{description}\item[]
		\item[\htmlref{stackunderflow}{stackunderflow}.]
		\item[\htmlref{typecheck}{typecheck}.]
		\end{description}
	\item[Description: ]
		Parse the arguments contained in \oparg{argv} and call the
		appropriate argument handler methods.  Stop processing when
		there is an error, the {\tt --} argument is processed, or the
		entire input array has been processed.
	\item[Example(s): ]
		\example
		    {parse.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/parse.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/parse.nx.out}
	\end{description}
\label{modclopt:progname_get}
\index{progname_get@\onyxop{}{progname\_get}{}}
\item[{\onyxop{--}{progname\_get}{progname}}: ]
	\begin{description}\item[]
	\item[Input(s): ] None.
	\item[Output(s): ]
		\begin{description}\item[]
		\item[progname: ]
			A string that is the basename of the first string in the
			argument array passed to the \method{parse} method.
		\end{description}
	\item[Error(s): ] None.
	\item[Description: ]
		Get the program name, which is the basename of the first string
		in the argument array passed to the \method{parse} method.  This
		method is only to be called from within an option handler.
	\item[Example(s): ]
		\example
		    {progname\_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/progname_get.nx}
		    {@abs_srcroot@/mod/modclopt/doc/latex/progname_get.nx.out}
	\end{description}
\end{description}
